module.exports = {

"[project]/node_modules/@material-tailwind/react/node_modules/@floating-ui/react/dist/floating-ui.react.esm.js [app-ssr] (ecmascript) {locals}": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "FloatingDelayGroup": ()=>FloatingDelayGroup,
    "FloatingFocusManager": ()=>FloatingFocusManager,
    "FloatingNode": ()=>FloatingNode,
    "FloatingOverlay": ()=>FloatingOverlay,
    "FloatingPortal": ()=>FloatingPortal,
    "FloatingTree": ()=>FloatingTree,
    "inner": ()=>inner,
    "safePolygon": ()=>safePolygon,
    "useClick": ()=>useClick,
    "useDelayGroup": ()=>useDelayGroup,
    "useDelayGroupContext": ()=>useDelayGroupContext,
    "useDismiss": ()=>useDismiss,
    "useFloating": ()=>useFloating,
    "useFloatingNodeId": ()=>useFloatingNodeId,
    "useFloatingParentNodeId": ()=>useFloatingParentNodeId,
    "useFloatingPortalNode": ()=>useFloatingPortalNode,
    "useFloatingTree": ()=>useFloatingTree,
    "useFocus": ()=>useFocus,
    "useHover": ()=>useHover,
    "useId": ()=>useId,
    "useInnerOffset": ()=>useInnerOffset,
    "useInteractions": ()=>useInteractions,
    "useListNavigation": ()=>useListNavigation,
    "useMergeRefs": ()=>useMergeRefs,
    "useRole": ()=>useRole,
    "useTransitionStatus": ()=>useTransitionStatus,
    "useTransitionStyles": ()=>useTransitionStyles,
    "useTypeahead": ()=>useTypeahead
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tabbable$2f$dist$2f$index$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/tabbable/dist/index.esm.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$dom$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$aria$2d$hidden$2f$dist$2f$es2015$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/aria-hidden/dist/es2015/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$core$2f$dist$2f$floating$2d$ui$2e$core$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__ = __turbopack_import__("[project]/node_modules/@floating-ui/core/dist/floating-ui.core.mjs [app-ssr] (ecmascript) {locals}");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2d$dom$2f$dist$2f$floating$2d$ui$2e$react$2d$dom$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__ = __turbopack_import__("[project]/node_modules/@material-tailwind/react/node_modules/@floating-ui/react/node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.esm.js [app-ssr] (ecmascript) {locals}");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
;
;
;
var index = typeof document !== 'undefined' ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useLayoutEffect"] : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEffect"];
let serverHandoffComplete = false;
let count = 0;
const genId = ()=>"floating-ui-" + count++;
function useFloatingId() {
    const [id, setId] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useState(()=>serverHandoffComplete ? genId() : undefined);
    index(()=>{
        if (id == null) {
            setId(genId());
        }
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useEffect(()=>{
        if (!serverHandoffComplete) {
            serverHandoffComplete = true;
        }
    }, []);
    return id;
}
// `toString()` prevents bundlers from trying to `import { useId } from 'react'`
const useReactId = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__[/*#__PURE__*/ 'useId'.toString()];
/**
 * Uses React 18's built-in `useId()` when available, or falls back to a
 * slightly less performant (requiring a double render) implementation for
 * earlier React versions.
 * @see https://floating-ui.com/docs/useId
 */ const useId = useReactId || useFloatingId;
function createPubSub() {
    const map = new Map();
    return {
        emit (event, data) {
            var _map$get;
            (_map$get = map.get(event)) == null ? void 0 : _map$get.forEach((handler)=>handler(data));
        },
        on (event, listener) {
            map.set(event, [
                ...map.get(event) || [],
                listener
            ]);
        },
        off (event, listener) {
            map.set(event, (map.get(event) || []).filter((l)=>l !== listener));
        }
    };
}
const FloatingNodeContext = /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createContext(null);
const FloatingTreeContext = /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createContext(null);
const useFloatingParentNodeId = ()=>{
    var _React$useContext;
    return ((_React$useContext = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useContext(FloatingNodeContext)) == null ? void 0 : _React$useContext.id) || null;
};
const useFloatingTree = ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useContext(FloatingTreeContext);
/**
 * Registers a node into the floating tree, returning its id.
 */ const useFloatingNodeId = (customParentId)=>{
    const id = useId();
    const tree = useFloatingTree();
    const reactParentId = useFloatingParentNodeId();
    const parentId = customParentId || reactParentId;
    index(()=>{
        const node = {
            id,
            parentId
        };
        tree == null ? void 0 : tree.addNode(node);
        return ()=>{
            tree == null ? void 0 : tree.removeNode(node);
        };
    }, [
        tree,
        id,
        parentId
    ]);
    return id;
};
/**
 * Provides parent node context for nested floating elements.
 * @see https://floating-ui.com/docs/FloatingTree
 */ const FloatingNode = (_ref)=>{
    let { children, id } = _ref;
    const parentId = useFloatingParentNodeId();
    return /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createElement(FloatingNodeContext.Provider, {
        value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useMemo(()=>({
                id,
                parentId
            }), [
            id,
            parentId
        ])
    }, children);
};
/**
 * Provides context for nested floating elements when they are not children of
 * each other on the DOM (i.e. portalled to a common node, rather than their
 * respective parent).
 * @see https://floating-ui.com/docs/FloatingTree
 */ const FloatingTree = (_ref2)=>{
    let { children } = _ref2;
    const nodesRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef([]);
    const addNode = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useCallback((node)=>{
        nodesRef.current = [
            ...nodesRef.current,
            node
        ];
    }, []);
    const removeNode = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useCallback((node)=>{
        nodesRef.current = nodesRef.current.filter((n)=>n !== node);
    }, []);
    const events = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useState(()=>createPubSub())[0];
    return /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createElement(FloatingTreeContext.Provider, {
        value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useMemo(()=>({
                nodesRef,
                addNode,
                removeNode,
                events
            }), [
            nodesRef,
            addNode,
            removeNode,
            events
        ])
    }, children);
};
function getDocument(node) {
    return (node == null ? void 0 : node.ownerDocument) || document;
}
// Avoid Chrome DevTools blue warning.
function getPlatform() {
    const uaData = navigator.userAgentData;
    if (uaData != null && uaData.platform) {
        return uaData.platform;
    }
    return navigator.platform;
}
function getUserAgent() {
    const uaData = navigator.userAgentData;
    if (uaData && Array.isArray(uaData.brands)) {
        return uaData.brands.map((_ref)=>{
            let { brand, version } = _ref;
            return brand + "/" + version;
        }).join(' ');
    }
    return navigator.userAgent;
}
function getWindow(value) {
    return getDocument(value).defaultView || window;
}
function isElement(value) {
    return value ? value instanceof getWindow(value).Element : false;
}
function isHTMLElement(value) {
    return value ? value instanceof getWindow(value).HTMLElement : false;
}
function isShadowRoot(node) {
    // Browsers without `ShadowRoot` support
    if (typeof ShadowRoot === 'undefined') {
        return false;
    }
    const OwnElement = getWindow(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
}
// License: https://github.com/adobe/react-spectrum/blob/b35d5c02fe900badccd0cf1a8f23bb593419f238/packages/@react-aria/utils/src/isVirtualEvent.ts
function isVirtualClick(event) {
    if (event.mozInputSource === 0 && event.isTrusted) {
        return true;
    }
    const androidRe = /Android/i;
    if ((androidRe.test(getPlatform()) || androidRe.test(getUserAgent())) && event.pointerType) {
        return event.type === 'click' && event.buttons === 1;
    }
    return event.detail === 0 && !event.pointerType;
}
function isVirtualPointerEvent(event) {
    return event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType !== 'mouse' || // iOS VoiceOver returns 0.333• for width/height.
    event.width < 1 && event.height < 1 && event.pressure === 0 && event.detail === 0;
}
function isSafari() {
    // Chrome DevTools does not complain about navigator.vendor
    return /apple/i.test(navigator.vendor);
}
function isMac() {
    return getPlatform().toLowerCase().startsWith('mac') && !navigator.maxTouchPoints;
}
function isMouseLikePointerType(pointerType, strict) {
    // On some Linux machines with Chromium, mouse inputs return a `pointerType`
    // of "pen": https://github.com/floating-ui/floating-ui/issues/2015
    const values = [
        'mouse',
        'pen'
    ];
    if (!strict) {
        values.push('', undefined);
    }
    return values.includes(pointerType);
}
function useLatestRef(value) {
    const ref = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useRef"](value);
    index(()=>{
        ref.current = value;
    });
    return ref;
}
const safePolygonIdentifier = 'data-floating-ui-safe-polygon';
function getDelay(value, prop, pointerType) {
    if (pointerType && !isMouseLikePointerType(pointerType)) {
        return 0;
    }
    if (typeof value === 'number') {
        return value;
    }
    return value == null ? void 0 : value[prop];
}
/**
 * Adds hover event listeners that change the open state, like CSS :hover.
 * @see https://floating-ui.com/docs/useHover
 */ const useHover = function(context, _temp) {
    let { enabled = true, delay = 0, handleClose = null, mouseOnly = false, restMs = 0, move = true } = _temp === void 0 ? {} : _temp;
    const { open, onOpenChange, dataRef, events, elements: { domReference, floating }, refs } = context;
    const tree = useFloatingTree();
    const parentId = useFloatingParentNodeId();
    const handleCloseRef = useLatestRef(handleClose);
    const delayRef = useLatestRef(delay);
    const pointerTypeRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef();
    const timeoutRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef();
    const handlerRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef();
    const restTimeoutRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef();
    const blockMouseMoveRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(true);
    const performedPointerEventsMutationRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(false);
    const unbindMouseMoveRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(()=>{});
    const isHoverOpen = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useCallback(()=>{
        var _dataRef$current$open;
        const type = (_dataRef$current$open = dataRef.current.openEvent) == null ? void 0 : _dataRef$current$open.type;
        return (type == null ? void 0 : type.includes('mouse')) && type !== 'mousedown';
    }, [
        dataRef
    ]);
    // When dismissing before opening, clear the delay timeouts to cancel it
    // from showing.
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useEffect(()=>{
        if (!enabled) {
            return;
        }
        function onDismiss() {
            clearTimeout(timeoutRef.current);
            clearTimeout(restTimeoutRef.current);
            blockMouseMoveRef.current = true;
        }
        events.on('dismiss', onDismiss);
        return ()=>{
            events.off('dismiss', onDismiss);
        };
    }, [
        enabled,
        events
    ]);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useEffect(()=>{
        if (!enabled || !handleCloseRef.current || !open) {
            return;
        }
        function onLeave() {
            if (isHoverOpen()) {
                onOpenChange(false);
            }
        }
        const html = getDocument(floating).documentElement;
        html.addEventListener('mouseleave', onLeave);
        return ()=>{
            html.removeEventListener('mouseleave', onLeave);
        };
    }, [
        floating,
        open,
        onOpenChange,
        enabled,
        handleCloseRef,
        dataRef,
        isHoverOpen
    ]);
    const closeWithDelay = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useCallback(function(runElseBranch) {
        if (runElseBranch === void 0) {
            runElseBranch = true;
        }
        const closeDelay = getDelay(delayRef.current, 'close', pointerTypeRef.current);
        if (closeDelay && !handlerRef.current) {
            clearTimeout(timeoutRef.current);
            timeoutRef.current = setTimeout(()=>onOpenChange(false), closeDelay);
        } else if (runElseBranch) {
            clearTimeout(timeoutRef.current);
            onOpenChange(false);
        }
    }, [
        delayRef,
        onOpenChange
    ]);
    const cleanupMouseMoveHandler = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useCallback(()=>{
        unbindMouseMoveRef.current();
        handlerRef.current = undefined;
    }, []);
    const clearPointerEvents = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useCallback(()=>{
        if (performedPointerEventsMutationRef.current) {
            const body = getDocument(refs.floating.current).body;
            body.style.pointerEvents = '';
            body.removeAttribute(safePolygonIdentifier);
            performedPointerEventsMutationRef.current = false;
        }
    }, [
        refs
    ]);
    // Registering the mouse events on the reference directly to bypass React's
    // delegation system. If the cursor was on a disabled element and then entered
    // the reference (no gap), `mouseenter` doesn't fire in the delegation system.
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useEffect(()=>{
        if (!enabled) {
            return;
        }
        function isClickLikeOpenEvent() {
            return dataRef.current.openEvent ? [
                'click',
                'mousedown'
            ].includes(dataRef.current.openEvent.type) : false;
        }
        function onMouseEnter(event) {
            clearTimeout(timeoutRef.current);
            blockMouseMoveRef.current = false;
            if (mouseOnly && !isMouseLikePointerType(pointerTypeRef.current) || restMs > 0 && getDelay(delayRef.current, 'open') === 0) {
                return;
            }
            dataRef.current.openEvent = event;
            const openDelay = getDelay(delayRef.current, 'open', pointerTypeRef.current);
            if (openDelay) {
                timeoutRef.current = setTimeout(()=>{
                    onOpenChange(true);
                }, openDelay);
            } else {
                onOpenChange(true);
            }
        }
        function onMouseLeave(event) {
            if (isClickLikeOpenEvent()) {
                return;
            }
            unbindMouseMoveRef.current();
            const doc = getDocument(floating);
            clearTimeout(restTimeoutRef.current);
            if (handleCloseRef.current) {
                clearTimeout(timeoutRef.current);
                handlerRef.current = handleCloseRef.current({
                    ...context,
                    tree,
                    x: event.clientX,
                    y: event.clientY,
                    onClose () {
                        clearPointerEvents();
                        cleanupMouseMoveHandler();
                        closeWithDelay();
                    }
                });
                const handler = handlerRef.current;
                doc.addEventListener('mousemove', handler);
                unbindMouseMoveRef.current = ()=>{
                    doc.removeEventListener('mousemove', handler);
                };
                return;
            }
            closeWithDelay();
        }
        // Ensure the floating element closes after scrolling even if the pointer
        // did not move.
        // https://github.com/floating-ui/floating-ui/discussions/1692
        function onScrollMouseLeave(event) {
            if (isClickLikeOpenEvent()) {
                return;
            }
            handleCloseRef.current == null ? void 0 : handleCloseRef.current({
                ...context,
                tree,
                x: event.clientX,
                y: event.clientY,
                onClose () {
                    cleanupMouseMoveHandler();
                    closeWithDelay();
                }
            })(event);
        }
        if (isElement(domReference)) {
            const ref = domReference;
            open && ref.addEventListener('mouseleave', onScrollMouseLeave);
            floating == null ? void 0 : floating.addEventListener('mouseleave', onScrollMouseLeave);
            move && ref.addEventListener('mousemove', onMouseEnter, {
                once: true
            });
            ref.addEventListener('mouseenter', onMouseEnter);
            ref.addEventListener('mouseleave', onMouseLeave);
            return ()=>{
                open && ref.removeEventListener('mouseleave', onScrollMouseLeave);
                floating == null ? void 0 : floating.removeEventListener('mouseleave', onScrollMouseLeave);
                move && ref.removeEventListener('mousemove', onMouseEnter);
                ref.removeEventListener('mouseenter', onMouseEnter);
                ref.removeEventListener('mouseleave', onMouseLeave);
            };
        }
    }, [
        domReference,
        floating,
        enabled,
        context,
        mouseOnly,
        restMs,
        move,
        closeWithDelay,
        cleanupMouseMoveHandler,
        clearPointerEvents,
        onOpenChange,
        open,
        tree,
        delayRef,
        handleCloseRef,
        dataRef
    ]);
    // Block pointer-events of every element other than the reference and floating
    // while the floating element is open and has a `handleClose` handler. Also
    // handles nested floating elements.
    // https://github.com/floating-ui/floating-ui/issues/1722
    index(()=>{
        var _handleCloseRef$curre;
        if (!enabled) {
            return;
        }
        if (open && (_handleCloseRef$curre = handleCloseRef.current) != null && _handleCloseRef$curre.__options.blockPointerEvents && isHoverOpen()) {
            const body = getDocument(floating).body;
            body.setAttribute(safePolygonIdentifier, '');
            body.style.pointerEvents = 'none';
            performedPointerEventsMutationRef.current = true;
            if (isElement(domReference) && floating) {
                var _tree$nodesRef$curren, _tree$nodesRef$curren2;
                const ref = domReference;
                const parentFloating = tree == null ? void 0 : (_tree$nodesRef$curren = tree.nodesRef.current.find((node)=>node.id === parentId)) == null ? void 0 : (_tree$nodesRef$curren2 = _tree$nodesRef$curren.context) == null ? void 0 : _tree$nodesRef$curren2.elements.floating;
                if (parentFloating) {
                    parentFloating.style.pointerEvents = '';
                }
                ref.style.pointerEvents = 'auto';
                floating.style.pointerEvents = 'auto';
                return ()=>{
                    ref.style.pointerEvents = '';
                    floating.style.pointerEvents = '';
                };
            }
        }
    }, [
        enabled,
        open,
        parentId,
        floating,
        domReference,
        tree,
        handleCloseRef,
        dataRef,
        isHoverOpen
    ]);
    index(()=>{
        if (!open) {
            pointerTypeRef.current = undefined;
            cleanupMouseMoveHandler();
            clearPointerEvents();
        }
    }, [
        open,
        cleanupMouseMoveHandler,
        clearPointerEvents
    ]);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useEffect(()=>{
        return ()=>{
            cleanupMouseMoveHandler();
            clearTimeout(timeoutRef.current);
            clearTimeout(restTimeoutRef.current);
            clearPointerEvents();
        };
    }, [
        enabled,
        cleanupMouseMoveHandler,
        clearPointerEvents
    ]);
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useMemo(()=>{
        if (!enabled) {
            return {};
        }
        function setPointerRef(event) {
            pointerTypeRef.current = event.pointerType;
        }
        return {
            reference: {
                onPointerDown: setPointerRef,
                onPointerEnter: setPointerRef,
                onMouseMove () {
                    if (open || restMs === 0) {
                        return;
                    }
                    clearTimeout(restTimeoutRef.current);
                    restTimeoutRef.current = setTimeout(()=>{
                        if (!blockMouseMoveRef.current) {
                            onOpenChange(true);
                        }
                    }, restMs);
                }
            },
            floating: {
                onMouseEnter () {
                    clearTimeout(timeoutRef.current);
                },
                onMouseLeave () {
                    events.emit('dismiss', {
                        type: 'mouseLeave',
                        data: {
                            returnFocus: false
                        }
                    });
                    closeWithDelay(false);
                }
            }
        };
    }, [
        events,
        enabled,
        restMs,
        open,
        onOpenChange,
        closeWithDelay
    ]);
};
const FloatingDelayGroupContext = /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createContext({
    delay: 0,
    initialDelay: 0,
    timeoutMs: 0,
    currentId: null,
    setCurrentId: ()=>{},
    setState: ()=>{},
    isInstantPhase: false
});
const useDelayGroupContext = ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useContext(FloatingDelayGroupContext);
/**
 * Provides context for a group of floating elements that should share a
 * `delay`.
 * @see https://floating-ui.com/docs/FloatingDelayGroup
 */ const FloatingDelayGroup = (_ref)=>{
    let { children, delay, timeoutMs = 0 } = _ref;
    const [state, setState] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useReducer((prev, next)=>({
            ...prev,
            ...next
        }), {
        delay,
        timeoutMs,
        initialDelay: delay,
        currentId: null,
        isInstantPhase: false
    });
    const initialCurrentIdRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(null);
    const setCurrentId = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useCallback((currentId)=>{
        setState({
            currentId
        });
    }, []);
    index(()=>{
        if (state.currentId) {
            if (initialCurrentIdRef.current === null) {
                initialCurrentIdRef.current = state.currentId;
            } else {
                setState({
                    isInstantPhase: true
                });
            }
        } else {
            setState({
                isInstantPhase: false
            });
            initialCurrentIdRef.current = null;
        }
    }, [
        state.currentId
    ]);
    return /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createElement(FloatingDelayGroupContext.Provider, {
        value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useMemo(()=>({
                ...state,
                setState,
                setCurrentId
            }), [
            state,
            setState,
            setCurrentId
        ])
    }, children);
};
const useDelayGroup = (_ref2, _ref3)=>{
    let { open, onOpenChange } = _ref2;
    let { id } = _ref3;
    const { currentId, setCurrentId, initialDelay, setState, timeoutMs } = useDelayGroupContext();
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useEffect(()=>{
        if (currentId) {
            setState({
                delay: {
                    open: 1,
                    close: getDelay(initialDelay, 'close')
                }
            });
            if (currentId !== id) {
                onOpenChange(false);
            }
        }
    }, [
        id,
        onOpenChange,
        setState,
        currentId,
        initialDelay
    ]);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useEffect(()=>{
        function unset() {
            onOpenChange(false);
            setState({
                delay: initialDelay,
                currentId: null
            });
        }
        if (!open && currentId === id) {
            if (timeoutMs) {
                const timeout = window.setTimeout(unset, timeoutMs);
                return ()=>{
                    clearTimeout(timeout);
                };
            } else {
                unset();
            }
        }
    }, [
        open,
        setState,
        currentId,
        id,
        onOpenChange,
        initialDelay,
        timeoutMs
    ]);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useEffect(()=>{
        if (open) {
            setCurrentId(id);
        }
    }, [
        open,
        setCurrentId,
        id
    ]);
};
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source){
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
/**
 * Find the real active element. Traverses into shadowRoots.
 */ function activeElement$1(doc) {
    let activeElement = doc.activeElement;
    while(((_activeElement = activeElement) == null ? void 0 : (_activeElement$shadow = _activeElement.shadowRoot) == null ? void 0 : _activeElement$shadow.activeElement) != null){
        var _activeElement, _activeElement$shadow;
        activeElement = activeElement.shadowRoot.activeElement;
    }
    return activeElement;
}
function contains(parent, child) {
    if (!parent || !child) {
        return false;
    }
    const rootNode = child.getRootNode && child.getRootNode();
    // First, attempt with faster native method
    if (parent.contains(child)) {
        return true;
    } else if (rootNode && isShadowRoot(rootNode)) {
        let next = child;
        do {
            if (next && parent === next) {
                return true;
            }
            // @ts-ignore
            next = next.parentNode || next.host;
        }while (next)
    }
    // Give up, the result is false
    return false;
}
let rafId = 0;
function enqueueFocus(el, options) {
    if (options === void 0) {
        options = {};
    }
    const { preventScroll = false, cancelPrevious = true, sync = false } = options;
    cancelPrevious && cancelAnimationFrame(rafId);
    const exec = ()=>el == null ? void 0 : el.focus({
            preventScroll
        });
    if (sync) {
        exec();
    } else {
        rafId = requestAnimationFrame(exec);
    }
}
function getAncestors(nodes, id) {
    var _nodes$find;
    let allAncestors = [];
    let currentParentId = (_nodes$find = nodes.find((node)=>node.id === id)) == null ? void 0 : _nodes$find.parentId;
    while(currentParentId){
        const currentNode = nodes.find((node)=>node.id === currentParentId);
        currentParentId = currentNode == null ? void 0 : currentNode.parentId;
        if (currentNode) {
            allAncestors = allAncestors.concat(currentNode);
        }
    }
    return allAncestors;
}
function getChildren(nodes, id) {
    let allChildren = nodes.filter((node)=>{
        var _node$context;
        return node.parentId === id && ((_node$context = node.context) == null ? void 0 : _node$context.open);
    }) || [];
    let currentChildren = allChildren;
    while(currentChildren.length){
        currentChildren = nodes.filter((node)=>{
            var _currentChildren;
            return (_currentChildren = currentChildren) == null ? void 0 : _currentChildren.some((n)=>{
                var _node$context2;
                return node.parentId === n.id && ((_node$context2 = node.context) == null ? void 0 : _node$context2.open);
            });
        }) || [];
        allChildren = allChildren.concat(currentChildren);
    }
    return allChildren;
}
function getTarget(event) {
    if ('composedPath' in event) {
        return event.composedPath()[0];
    }
    // TS thinks `event` is of type never as it assumes all browsers support
    // `composedPath()`, but browsers without shadow DOM don't.
    return event.target;
}
const TYPEABLE_SELECTOR = "input:not([type='hidden']):not([disabled])," + "[contenteditable]:not([contenteditable='false']),textarea:not([disabled])";
function isTypeableElement(element) {
    return isHTMLElement(element) && element.matches(TYPEABLE_SELECTOR);
}
function stopEvent(event) {
    event.preventDefault();
    event.stopPropagation();
}
const getTabbableOptions = ()=>({
        getShadowRoot: true,
        displayCheck: // JSDOM does not support the `tabbable` library. To solve this we can
        // check if `ResizeObserver` is a real function (not polyfilled), which
        // determines if the current environment is JSDOM-like.
        typeof ResizeObserver === 'function' && ResizeObserver.toString().includes('[native code]') ? 'full' : 'none'
    });
function getTabbableIn(container, direction) {
    const allTabbable = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tabbable$2f$dist$2f$index$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tabbable"](container, getTabbableOptions());
    if (direction === 'prev') {
        allTabbable.reverse();
    }
    const activeIndex = allTabbable.indexOf(activeElement$1(getDocument(container)));
    const nextTabbableElements = allTabbable.slice(activeIndex + 1);
    return nextTabbableElements[0];
}
function getNextTabbable() {
    return getTabbableIn(document.body, 'next');
}
function getPreviousTabbable() {
    return getTabbableIn(document.body, 'prev');
}
function isOutsideEvent(event, container) {
    const containerElement = container || event.currentTarget;
    const relatedTarget = event.relatedTarget;
    return !relatedTarget || !contains(containerElement, relatedTarget);
}
function disableFocusInside(container) {
    const tabbableElements = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tabbable$2f$dist$2f$index$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tabbable"](container, getTabbableOptions());
    tabbableElements.forEach((element)=>{
        element.dataset.tabindex = element.getAttribute('tabindex') || '';
        element.setAttribute('tabindex', '-1');
    });
}
function enableFocusInside(container) {
    const elements = container.querySelectorAll('[data-tabindex]');
    elements.forEach((element)=>{
        const tabindex = element.dataset.tabindex;
        delete element.dataset.tabindex;
        if (tabindex) {
            element.setAttribute('tabindex', tabindex);
        } else {
            element.removeAttribute('tabindex');
        }
    });
}
// `toString()` prevents bundlers from trying to `import { useInsertionEffect } from 'react'`
const useInsertionEffect = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__[/*#__PURE__*/ 'useInsertionEffect'.toString()];
const useSafeInsertionEffect = useInsertionEffect || ((fn)=>fn());
function useEvent(callback) {
    const ref = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(()=>{
        if ("TURBOPACK compile-time truthy", 1) {
            throw new Error('Cannot call an event handler while rendering.');
        }
    });
    useSafeInsertionEffect(()=>{
        ref.current = callback;
    });
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useCallback(function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        return ref.current == null ? void 0 : ref.current(...args);
    }, []);
}
// See Diego Haz's Sandbox for making this logic work well on Safari/iOS:
// https://codesandbox.io/s/tabbable-portal-f4tng?file=/src/FocusTrap.tsx
const HIDDEN_STYLES = {
    border: 0,
    clip: 'rect(0 0 0 0)',
    height: '1px',
    margin: '-1px',
    overflow: 'hidden',
    padding: 0,
    position: 'fixed',
    whiteSpace: 'nowrap',
    width: '1px',
    top: 0,
    left: 0
};
let activeElement;
let timeoutId;
function setActiveElementOnTab(event) {
    if (event.key === 'Tab') {
        activeElement = event.target;
        clearTimeout(timeoutId);
    }
}
function isTabFocus(event) {
    const result = activeElement === event.relatedTarget;
    activeElement = event.relatedTarget;
    clearTimeout(timeoutId);
    return result;
}
const FocusGuard = /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.forwardRef(function FocusGuard(props, ref) {
    const onFocus = useEvent(props.onFocus);
    const [role, setRole] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useState();
    index(()=>{
        if (isSafari()) {
            // Unlike other screen readers such as NVDA and JAWS, the virtual cursor
            // on VoiceOver does trigger the onFocus event, so we can use the focus
            // trap element. On Safari, only buttons trigger the onFocus event.
            // NB: "group" role in the Sandbox no longer appears to work, must be a
            // button role.
            setRole('button');
        }
        document.addEventListener('keydown', setActiveElementOnTab);
        return ()=>{
            document.removeEventListener('keydown', setActiveElementOnTab);
        };
    }, []);
    return /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createElement("span", _extends({}, props, {
        ref: ref,
        tabIndex: 0,
        role: role,
        "aria-hidden": role ? undefined : true,
        "data-floating-ui-focus-guard": "",
        style: HIDDEN_STYLES,
        onFocus: (event)=>{
            if (isSafari() && isMac() && !isTabFocus(event)) {
                // On macOS we need to wait a little bit before moving
                // focus again.
                event.persist();
                timeoutId = window.setTimeout(()=>{
                    onFocus(event);
                }, 50);
            } else {
                onFocus(event);
            }
        }
    }));
});
const PortalContext = /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createContext(null);
const useFloatingPortalNode = function(_temp) {
    let { id, enabled = true } = _temp === void 0 ? {} : _temp;
    const [portalEl, setPortalEl] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useState(null);
    const uniqueId = useId();
    const portalContext = usePortalContext();
    index(()=>{
        if (!enabled) {
            return;
        }
        const rootNode = id ? document.getElementById(id) : null;
        if (rootNode) {
            rootNode.setAttribute('data-floating-ui-portal', '');
            setPortalEl(rootNode);
        } else {
            const newPortalEl = document.createElement('div');
            if (id !== '') {
                newPortalEl.id = id || uniqueId;
            }
            newPortalEl.setAttribute('data-floating-ui-portal', '');
            setPortalEl(newPortalEl);
            const container = (portalContext == null ? void 0 : portalContext.portalNode) || document.body;
            container.appendChild(newPortalEl);
            return ()=>{
                container.removeChild(newPortalEl);
            };
        }
    }, [
        id,
        portalContext,
        uniqueId,
        enabled
    ]);
    return portalEl;
};
/**
 * Portals your floating element outside of the main app node.
 * @see https://floating-ui.com/docs/FloatingPortal
 */ const FloatingPortal = (_ref)=>{
    let { children, id, root = null, preserveTabOrder = true } = _ref;
    const portalNode = useFloatingPortalNode({
        id,
        enabled: !root
    });
    const [focusManagerState, setFocusManagerState] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useState(null);
    const beforeOutsideRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(null);
    const afterOutsideRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(null);
    const beforeInsideRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(null);
    const afterInsideRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(null);
    const shouldRenderGuards = // The FocusManager and therefore floating element are currently open/
    // rendered.
    !!focusManagerState && // Guards are only for non-modal focus management.
    !focusManagerState.modal && !!(root || portalNode) && preserveTabOrder;
    // https://codesandbox.io/s/tabbable-portal-f4tng?file=/src/TabbablePortal.tsx
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useEffect(()=>{
        if (!portalNode || !preserveTabOrder || focusManagerState != null && focusManagerState.modal) {
            return;
        }
        // Make sure elements inside the portal element are tabbable only when the
        // portal has already been focused, either by tabbing into a focus trap
        // element outside or using the mouse.
        function onFocus(event) {
            if (portalNode && isOutsideEvent(event)) {
                const focusing = event.type === 'focusin';
                const manageFocus = focusing ? enableFocusInside : disableFocusInside;
                manageFocus(portalNode);
            }
        }
        // Listen to the event on the capture phase so they run before the focus
        // trap elements onFocus prop is called.
        portalNode.addEventListener('focusin', onFocus, true);
        portalNode.addEventListener('focusout', onFocus, true);
        return ()=>{
            portalNode.removeEventListener('focusin', onFocus, true);
            portalNode.removeEventListener('focusout', onFocus, true);
        };
    }, [
        portalNode,
        preserveTabOrder,
        focusManagerState == null ? void 0 : focusManagerState.modal
    ]);
    return /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createElement(PortalContext.Provider, {
        value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useMemo(()=>({
                preserveTabOrder,
                beforeOutsideRef,
                afterOutsideRef,
                beforeInsideRef,
                afterInsideRef,
                portalNode,
                setFocusManagerState
            }), [
            preserveTabOrder,
            portalNode
        ])
    }, shouldRenderGuards && portalNode && /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createElement(FocusGuard, {
        "data-type": "outside",
        ref: beforeOutsideRef,
        onFocus: (event)=>{
            if (isOutsideEvent(event, portalNode)) {
                var _beforeInsideRef$curr;
                (_beforeInsideRef$curr = beforeInsideRef.current) == null ? void 0 : _beforeInsideRef$curr.focus();
            } else {
                const prevTabbable = getPreviousTabbable() || (focusManagerState == null ? void 0 : focusManagerState.refs.domReference.current);
                prevTabbable == null ? void 0 : prevTabbable.focus();
            }
        }
    }), shouldRenderGuards && portalNode && /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createElement("span", {
        "aria-owns": portalNode.id,
        style: HIDDEN_STYLES
    }), root ? /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$dom$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createPortal"](children, root) : portalNode ? /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$dom$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createPortal"](children, portalNode) : null, shouldRenderGuards && portalNode && /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createElement(FocusGuard, {
        "data-type": "outside",
        ref: afterOutsideRef,
        onFocus: (event)=>{
            if (isOutsideEvent(event, portalNode)) {
                var _afterInsideRef$curre;
                (_afterInsideRef$curre = afterInsideRef.current) == null ? void 0 : _afterInsideRef$curre.focus();
            } else {
                const nextTabbable = getNextTabbable() || (focusManagerState == null ? void 0 : focusManagerState.refs.domReference.current);
                nextTabbable == null ? void 0 : nextTabbable.focus();
                (focusManagerState == null ? void 0 : focusManagerState.closeOnFocusOut) && (focusManagerState == null ? void 0 : focusManagerState.onOpenChange(false));
            }
        }
    }));
};
const usePortalContext = ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useContext(PortalContext);
const VisuallyHiddenDismiss = /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.forwardRef(function VisuallyHiddenDismiss(props, ref) {
    return /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createElement("button", _extends({}, props, {
        type: "button",
        ref: ref,
        tabIndex: -1,
        style: HIDDEN_STYLES
    }));
});
/**
 * Provides focus management for the floating element.
 * @see https://floating-ui.com/docs/FloatingFocusManager
 */ function FloatingFocusManager(_ref) {
    let { context, children, order = [
        'content'
    ], guards = true, initialFocus = 0, returnFocus = true, modal = true, visuallyHiddenDismiss = false, closeOnFocusOut = true } = _ref;
    const { refs, nodeId, onOpenChange, events, dataRef, elements: { domReference, floating } } = context;
    const orderRef = useLatestRef(order);
    const tree = useFloatingTree();
    const portalContext = usePortalContext();
    const [tabbableContentLength, setTabbableContentLength] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useState(null);
    // Controlled by `useListNavigation`.
    const ignoreInitialFocus = typeof initialFocus === 'number' && initialFocus < 0;
    const startDismissButtonRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(null);
    const endDismissButtonRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(null);
    const preventReturnFocusRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(false);
    const previouslyFocusedElementRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(null);
    const isPointerDownRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(false);
    const isInsidePortal = portalContext != null;
    // If the reference is a combobox and is typeable (e.g. input/textarea),
    // there are different focus semantics. The guards should not be rendered, but
    // aria-hidden should be applied to all nodes still. Further, the visually
    // hidden dismiss button should only appear at the end of the list, not the
    // start.
    const isTypeableCombobox = domReference && domReference.getAttribute('role') === 'combobox' && isTypeableElement(domReference);
    const getTabbableContent = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useCallback(function(container) {
        if (container === void 0) {
            container = floating;
        }
        return container ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tabbable$2f$dist$2f$index$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tabbable"](container, getTabbableOptions()) : [];
    }, [
        floating
    ]);
    const getTabbableElements = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useCallback((container)=>{
        const content = getTabbableContent(container);
        return orderRef.current.map((type)=>{
            if (domReference && type === 'reference') {
                return domReference;
            }
            if (floating && type === 'floating') {
                return floating;
            }
            return content;
        }).filter(Boolean).flat();
    }, [
        domReference,
        floating,
        orderRef,
        getTabbableContent
    ]);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useEffect(()=>{
        if (!modal) {
            return;
        }
        function onKeyDown(event) {
            if (event.key === 'Tab') {
                // The focus guards have nothing to focus, so we need to stop the event.
                if (getTabbableContent().length === 0 && !isTypeableCombobox) {
                    stopEvent(event);
                }
                const els = getTabbableElements();
                const target = getTarget(event);
                if (orderRef.current[0] === 'reference' && target === domReference) {
                    stopEvent(event);
                    if (event.shiftKey) {
                        enqueueFocus(els[els.length - 1]);
                    } else {
                        enqueueFocus(els[1]);
                    }
                }
                if (orderRef.current[1] === 'floating' && target === floating && event.shiftKey) {
                    stopEvent(event);
                    enqueueFocus(els[0]);
                }
            }
        }
        const doc = getDocument(floating);
        doc.addEventListener('keydown', onKeyDown);
        return ()=>{
            doc.removeEventListener('keydown', onKeyDown);
        };
    }, [
        domReference,
        floating,
        modal,
        orderRef,
        refs,
        isTypeableCombobox,
        getTabbableContent,
        getTabbableElements
    ]);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useEffect(()=>{
        if (!closeOnFocusOut) {
            return;
        }
        // In Safari, buttons lose focus when pressing them.
        function handlePointerDown() {
            isPointerDownRef.current = true;
            setTimeout(()=>{
                isPointerDownRef.current = false;
            });
        }
        function handleFocusOutside(event) {
            const relatedTarget = event.relatedTarget;
            const movedToUnrelatedNode = !(contains(domReference, relatedTarget) || contains(floating, relatedTarget) || contains(relatedTarget, floating) || contains(portalContext == null ? void 0 : portalContext.portalNode, relatedTarget) || relatedTarget != null && relatedTarget.hasAttribute('data-floating-ui-focus-guard') || tree && (getChildren(tree.nodesRef.current, nodeId).find((node)=>{
                var _node$context, _node$context2;
                return contains((_node$context = node.context) == null ? void 0 : _node$context.elements.floating, relatedTarget) || contains((_node$context2 = node.context) == null ? void 0 : _node$context2.elements.domReference, relatedTarget);
            }) || getAncestors(tree.nodesRef.current, nodeId).find((node)=>{
                var _node$context3, _node$context4;
                return ((_node$context3 = node.context) == null ? void 0 : _node$context3.elements.floating) === relatedTarget || ((_node$context4 = node.context) == null ? void 0 : _node$context4.elements.domReference) === relatedTarget;
            })));
            // Focus did not move inside the floating tree, and there are no tabbable
            // portal guards to handle closing.
            if (relatedTarget && movedToUnrelatedNode && !isPointerDownRef.current && // Fix React 18 Strict Mode returnFocus due to double rendering.
            relatedTarget !== previouslyFocusedElementRef.current) {
                preventReturnFocusRef.current = true;
                // On iOS VoiceOver, dismissing the nested submenu will cause the
                // first item of the list to receive focus. Delaying it appears to fix
                // the issue.
                setTimeout(()=>onOpenChange(false));
            }
        }
        if (floating && isHTMLElement(domReference)) {
            domReference.addEventListener('focusout', handleFocusOutside);
            domReference.addEventListener('pointerdown', handlePointerDown);
            !modal && floating.addEventListener('focusout', handleFocusOutside);
            return ()=>{
                domReference.removeEventListener('focusout', handleFocusOutside);
                domReference.removeEventListener('pointerdown', handlePointerDown);
                !modal && floating.removeEventListener('focusout', handleFocusOutside);
            };
        }
    }, [
        domReference,
        floating,
        modal,
        nodeId,
        tree,
        portalContext,
        onOpenChange,
        closeOnFocusOut
    ]);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useEffect(()=>{
        var _portalContext$portal;
        // Don't hide portals nested within the parent portal.
        const portalNodes = Array.from((portalContext == null ? void 0 : (_portalContext$portal = portalContext.portalNode) == null ? void 0 : _portalContext$portal.querySelectorAll('[data-floating-ui-portal]')) || []);
        function getDismissButtons() {
            return [
                startDismissButtonRef.current,
                endDismissButtonRef.current
            ].filter(Boolean);
        }
        if (floating && modal) {
            const insideNodes = [
                floating,
                ...portalNodes,
                ...getDismissButtons()
            ];
            const cleanup = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$aria$2d$hidden$2f$dist$2f$es2015$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["hideOthers"](orderRef.current.includes('reference') || isTypeableCombobox ? insideNodes.concat(domReference || []) : insideNodes);
            return ()=>{
                cleanup();
            };
        }
    }, [
        domReference,
        floating,
        modal,
        orderRef,
        portalContext,
        isTypeableCombobox
    ]);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useEffect(()=>{
        if (modal && !guards && floating) {
            const tabIndexValues = [];
            const options = getTabbableOptions();
            const allTabbable = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tabbable$2f$dist$2f$index$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tabbable"](getDocument(floating).body, options);
            const floatingTabbable = getTabbableElements();
            // Exclude all tabbable elements that are part of the order
            const elements = allTabbable.filter((el)=>!floatingTabbable.includes(el));
            elements.forEach((el, i)=>{
                tabIndexValues[i] = el.getAttribute('tabindex');
                el.setAttribute('tabindex', '-1');
            });
            return ()=>{
                elements.forEach((el, i)=>{
                    const value = tabIndexValues[i];
                    if (value == null) {
                        el.removeAttribute('tabindex');
                    } else {
                        el.setAttribute('tabindex', value);
                    }
                });
            };
        }
    }, [
        floating,
        modal,
        guards,
        getTabbableElements
    ]);
    index(()=>{
        if (!floating) return;
        const doc = getDocument(floating);
        let returnFocusValue = returnFocus;
        let preventReturnFocusScroll = false;
        const previouslyFocusedElement = activeElement$1(doc);
        const contextData = dataRef.current;
        previouslyFocusedElementRef.current = previouslyFocusedElement;
        const focusableElements = getTabbableElements(floating);
        const elToFocus = (typeof initialFocus === 'number' ? focusableElements[initialFocus] : initialFocus.current) || floating;
        // If the `useListNavigation` hook is active, always ignore `initialFocus`
        // because it has its own handling of the initial focus.
        !ignoreInitialFocus && enqueueFocus(elToFocus, {
            preventScroll: elToFocus === floating
        });
        // Dismissing via outside press should always ignore `returnFocus` to
        // prevent unwanted scrolling.
        function onDismiss(payload) {
            if (payload.type === 'escapeKey' && refs.domReference.current) {
                previouslyFocusedElementRef.current = refs.domReference.current;
            }
            if ([
                'referencePress',
                'escapeKey'
            ].includes(payload.type)) {
                return;
            }
            const returnFocus = payload.data.returnFocus;
            if (typeof returnFocus === 'object') {
                returnFocusValue = true;
                preventReturnFocusScroll = returnFocus.preventScroll;
            } else {
                returnFocusValue = returnFocus;
            }
        }
        events.on('dismiss', onDismiss);
        return ()=>{
            events.off('dismiss', onDismiss);
            if (contains(floating, activeElement$1(doc)) && refs.domReference.current) {
                previouslyFocusedElementRef.current = refs.domReference.current;
            }
            if (returnFocusValue && isHTMLElement(previouslyFocusedElementRef.current) && !preventReturnFocusRef.current) {
                // `isPointerDownRef.current` to avoid the focus ring from appearing on
                // the reference element when click-toggling it.
                if (!refs.domReference.current || isPointerDownRef.current) {
                    enqueueFocus(previouslyFocusedElementRef.current, {
                        // When dismissing nested floating elements, by the time the rAF has
                        // executed, the menus will all have been unmounted. When they try
                        // to get focused, the calls get ignored — leaving the root
                        // reference focused as desired.
                        cancelPrevious: false,
                        preventScroll: preventReturnFocusScroll
                    });
                } else {
                    var _previouslyFocusedEle;
                    // If the user has specified a `keydown` listener that calls
                    // setOpen(false) (e.g. selecting an item and closing the floating
                    // element), then sync return focus causes `useClick` to immediately
                    // re-open it, unless they call `event.preventDefault()` in the
                    // `keydown` listener. This helps keep backwards compatibility with
                    // older examples.
                    contextData.__syncReturnFocus = true;
                    // In Safari, `useListNavigation` moves focus sync, so making this
                    // sync ensures the initial item remains focused despite this being
                    // invoked in Strict Mode due to double-invoked useEffects. This also
                    // has the positive side effect of closing a modally focus-managed
                    // <Menu> on `Tab` keydown to move naturally to the next focusable
                    // element.
                    (_previouslyFocusedEle = previouslyFocusedElementRef.current) == null ? void 0 : _previouslyFocusedEle.focus({
                        preventScroll: preventReturnFocusScroll
                    });
                    setTimeout(()=>{
                        // This isn't an actual property the user should access, make sure
                        // it doesn't persist.
                        delete contextData.__syncReturnFocus;
                    });
                }
            }
        };
    }, [
        floating,
        getTabbableElements,
        initialFocus,
        returnFocus,
        dataRef,
        refs,
        events,
        ignoreInitialFocus
    ]);
    // Synchronize the `context` & `modal` value to the FloatingPortal context.
    // It will decide whether or not it needs to render its own guards.
    index(()=>{
        if (!portalContext) return;
        portalContext.setFocusManagerState({
            ...context,
            modal,
            closeOnFocusOut
        });
        return ()=>{
            portalContext.setFocusManagerState(null);
        };
    }, [
        portalContext,
        modal,
        closeOnFocusOut,
        context
    ]);
    index(()=>{
        if (ignoreInitialFocus || !floating) return;
        function setState() {
            setTabbableContentLength(getTabbableContent().length);
        }
        setState();
        if (typeof MutationObserver === 'function') {
            const observer = new MutationObserver(setState);
            observer.observe(floating, {
                childList: true,
                subtree: true
            });
            return ()=>{
                observer.disconnect();
            };
        }
    }, [
        floating,
        getTabbableContent,
        ignoreInitialFocus,
        refs
    ]);
    const shouldRenderGuards = guards && (isInsidePortal || modal) && !isTypeableCombobox;
    function renderDismissButton(location) {
        return visuallyHiddenDismiss && modal ? /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createElement(VisuallyHiddenDismiss, {
            ref: location === 'start' ? startDismissButtonRef : endDismissButtonRef,
            onClick: ()=>onOpenChange(false)
        }, typeof visuallyHiddenDismiss === 'string' ? visuallyHiddenDismiss : 'Dismiss') : null;
    }
    return /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createElement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.Fragment, null, shouldRenderGuards && /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createElement(FocusGuard, {
        "data-type": "inside",
        ref: portalContext == null ? void 0 : portalContext.beforeInsideRef,
        onFocus: (event)=>{
            if (modal) {
                const els = getTabbableElements();
                enqueueFocus(order[0] === 'reference' ? els[0] : els[els.length - 1]);
            } else if (portalContext != null && portalContext.preserveTabOrder && portalContext.portalNode) {
                preventReturnFocusRef.current = false;
                if (isOutsideEvent(event, portalContext.portalNode)) {
                    const nextTabbable = getNextTabbable() || domReference;
                    nextTabbable == null ? void 0 : nextTabbable.focus();
                } else {
                    var _portalContext$before;
                    (_portalContext$before = portalContext.beforeOutsideRef.current) == null ? void 0 : _portalContext$before.focus();
                }
            }
        }
    }), isTypeableCombobox ? null : renderDismissButton('start'), /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.cloneElement(children, tabbableContentLength === 0 || order.includes('floating') ? {
        tabIndex: 0
    } : {}), renderDismissButton('end'), shouldRenderGuards && /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createElement(FocusGuard, {
        "data-type": "inside",
        ref: portalContext == null ? void 0 : portalContext.afterInsideRef,
        onFocus: (event)=>{
            if (modal) {
                enqueueFocus(getTabbableElements()[0]);
            } else if (portalContext != null && portalContext.preserveTabOrder && portalContext.portalNode) {
                preventReturnFocusRef.current = true;
                if (isOutsideEvent(event, portalContext.portalNode)) {
                    const prevTabbable = getPreviousTabbable() || domReference;
                    prevTabbable == null ? void 0 : prevTabbable.focus();
                } else {
                    var _portalContext$afterO;
                    (_portalContext$afterO = portalContext.afterOutsideRef.current) == null ? void 0 : _portalContext$afterO.focus();
                }
            }
        }
    }));
}
const identifier = 'data-floating-ui-scroll-lock';
/**
 * Provides base styling for a fixed overlay element to dim content or block
 * pointer events behind a floating element.
 * It's a regular `<div>`, so it can be styled via any CSS solution you prefer.
 * @see https://floating-ui.com/docs/FloatingOverlay
 */ const FloatingOverlay = /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.forwardRef(function FloatingOverlay(_ref, ref) {
    let { lockScroll = false, ...rest } = _ref;
    index(()=>{
        var _window$visualViewpor, _window$visualViewpor2;
        if (!lockScroll) {
            return;
        }
        const alreadyLocked = document.body.hasAttribute(identifier);
        if (alreadyLocked) {
            return;
        }
        document.body.setAttribute(identifier, '');
        // RTL <body> scrollbar
        const scrollbarX = Math.round(document.documentElement.getBoundingClientRect().left) + document.documentElement.scrollLeft;
        const paddingProp = scrollbarX ? 'paddingLeft' : 'paddingRight';
        const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;
        // Only iOS doesn't respect `overflow: hidden` on document.body, and this
        // technique has fewer side effects.
        if (!/iP(hone|ad|od)|iOS/.test(getPlatform())) {
            Object.assign(document.body.style, {
                overflow: 'hidden',
                [paddingProp]: scrollbarWidth + "px"
            });
            return ()=>{
                document.body.removeAttribute(identifier);
                Object.assign(document.body.style, {
                    overflow: '',
                    [paddingProp]: ''
                });
            };
        }
        // iOS 12 does not support `visualViewport`.
        const offsetLeft = ((_window$visualViewpor = window.visualViewport) == null ? void 0 : _window$visualViewpor.offsetLeft) || 0;
        const offsetTop = ((_window$visualViewpor2 = window.visualViewport) == null ? void 0 : _window$visualViewpor2.offsetTop) || 0;
        const scrollX = window.pageXOffset;
        const scrollY = window.pageYOffset;
        Object.assign(document.body.style, {
            position: 'fixed',
            overflow: 'hidden',
            top: -(scrollY - Math.floor(offsetTop)) + "px",
            left: -(scrollX - Math.floor(offsetLeft)) + "px",
            right: '0',
            [paddingProp]: scrollbarWidth + "px"
        });
        return ()=>{
            Object.assign(document.body.style, {
                position: '',
                overflow: '',
                top: '',
                left: '',
                right: '',
                [paddingProp]: ''
            });
            document.body.removeAttribute(identifier);
            window.scrollTo(scrollX, scrollY);
        };
    }, [
        lockScroll
    ]);
    return /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createElement("div", _extends({
        ref: ref
    }, rest, {
        style: {
            position: 'fixed',
            overflow: 'auto',
            top: 0,
            right: 0,
            bottom: 0,
            left: 0,
            ...rest.style
        }
    }));
});
function isButtonTarget(event) {
    return isHTMLElement(event.target) && event.target.tagName === 'BUTTON';
}
function isSpaceIgnored(element) {
    return isTypeableElement(element);
}
/**
 * Adds click event listeners that change the open state.
 * @see https://floating-ui.com/docs/useClick
 */ const useClick = function(_ref, _temp) {
    let { open, onOpenChange, dataRef, elements: { domReference } } = _ref;
    let { enabled = true, event: eventOption = 'click', toggle = true, ignoreMouse = false, keyboardHandlers = true } = _temp === void 0 ? {} : _temp;
    const pointerTypeRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef();
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useMemo(()=>{
        if (!enabled) {
            return {};
        }
        return {
            reference: {
                onPointerDown (event) {
                    pointerTypeRef.current = event.pointerType;
                },
                onMouseDown (event) {
                    // Ignore all buttons except for the "main" button.
                    // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button
                    if (event.button !== 0) {
                        return;
                    }
                    if (isMouseLikePointerType(pointerTypeRef.current, true) && ignoreMouse) {
                        return;
                    }
                    if (eventOption === 'click') {
                        return;
                    }
                    if (open) {
                        if (toggle && (dataRef.current.openEvent ? dataRef.current.openEvent.type === 'mousedown' : true)) {
                            onOpenChange(false);
                        }
                    } else {
                        // Prevent stealing focus from the floating element
                        event.preventDefault();
                        onOpenChange(true);
                    }
                    dataRef.current.openEvent = event.nativeEvent;
                },
                onClick (event) {
                    if (dataRef.current.__syncReturnFocus) {
                        return;
                    }
                    if (eventOption === 'mousedown' && pointerTypeRef.current) {
                        pointerTypeRef.current = undefined;
                        return;
                    }
                    if (isMouseLikePointerType(pointerTypeRef.current, true) && ignoreMouse) {
                        return;
                    }
                    if (open) {
                        if (toggle && (dataRef.current.openEvent ? dataRef.current.openEvent.type === 'click' : true)) {
                            onOpenChange(false);
                        }
                    } else {
                        onOpenChange(true);
                    }
                    dataRef.current.openEvent = event.nativeEvent;
                },
                onKeyDown (event) {
                    pointerTypeRef.current = undefined;
                    if (!keyboardHandlers) {
                        return;
                    }
                    if (isButtonTarget(event)) {
                        return;
                    }
                    if (event.key === ' ' && !isSpaceIgnored(domReference)) {
                        // Prevent scrolling
                        event.preventDefault();
                    }
                    if (event.key === 'Enter') {
                        if (open) {
                            if (toggle) {
                                onOpenChange(false);
                            }
                        } else {
                            onOpenChange(true);
                        }
                    }
                },
                onKeyUp (event) {
                    if (!keyboardHandlers) {
                        return;
                    }
                    if (isButtonTarget(event) || isSpaceIgnored(domReference)) {
                        return;
                    }
                    if (event.key === ' ') {
                        if (open) {
                            if (toggle) {
                                onOpenChange(false);
                            }
                        } else {
                            onOpenChange(true);
                        }
                    }
                }
            }
        };
    }, [
        enabled,
        dataRef,
        eventOption,
        ignoreMouse,
        keyboardHandlers,
        domReference,
        toggle,
        open,
        onOpenChange
    ]);
};
/**
 * Check whether the event.target is within the provided node. Uses event.composedPath if available for custom element support.
 *
 * @param event The event whose target/composedPath to check
 * @param node The node to check against
 * @returns Whether the event.target/composedPath is within the node.
 */ function isEventTargetWithin(event, node) {
    if (node == null) {
        return false;
    }
    if ('composedPath' in event) {
        return event.composedPath().includes(node);
    }
    // TS thinks `event` is of type never as it assumes all browsers support composedPath, but browsers without shadow dom don't
    const e = event;
    return e.target != null && node.contains(e.target);
}
const bubbleHandlerKeys = {
    pointerdown: 'onPointerDown',
    mousedown: 'onMouseDown',
    click: 'onClick'
};
const captureHandlerKeys = {
    pointerdown: 'onPointerDownCapture',
    mousedown: 'onMouseDownCapture',
    click: 'onClickCapture'
};
const normalizeBubblesProp = function(bubbles) {
    var _bubbles$escapeKey, _bubbles$outsidePress;
    if (bubbles === void 0) {
        bubbles = true;
    }
    return {
        escapeKeyBubbles: typeof bubbles === 'boolean' ? bubbles : (_bubbles$escapeKey = bubbles.escapeKey) != null ? _bubbles$escapeKey : true,
        outsidePressBubbles: typeof bubbles === 'boolean' ? bubbles : (_bubbles$outsidePress = bubbles.outsidePress) != null ? _bubbles$outsidePress : true
    };
};
/**
 * Adds listeners that dismiss (close) the floating element.
 * @see https://floating-ui.com/docs/useDismiss
 */ const useDismiss = function(_ref, _temp) {
    let { open, onOpenChange, events, nodeId, elements: { reference, domReference, floating }, dataRef } = _ref;
    let { enabled = true, escapeKey = true, outsidePress: unstable_outsidePress = true, outsidePressEvent = 'pointerdown', referencePress = false, referencePressEvent = 'pointerdown', ancestorScroll = false, bubbles = true } = _temp === void 0 ? {} : _temp;
    const tree = useFloatingTree();
    const nested = useFloatingParentNodeId() != null;
    const outsidePressFn = useEvent(typeof unstable_outsidePress === 'function' ? unstable_outsidePress : ()=>false);
    const outsidePress = typeof unstable_outsidePress === 'function' ? outsidePressFn : unstable_outsidePress;
    const insideReactTreeRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(false);
    const { escapeKeyBubbles, outsidePressBubbles } = normalizeBubblesProp(bubbles);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useEffect(()=>{
        if (!open || !enabled) {
            return;
        }
        dataRef.current.__escapeKeyBubbles = escapeKeyBubbles;
        dataRef.current.__outsidePressBubbles = outsidePressBubbles;
        function onKeyDown(event) {
            if (event.key === 'Escape') {
                const children = tree ? getChildren(tree.nodesRef.current, nodeId) : [];
                if (children.length > 0) {
                    let shouldDismiss = true;
                    children.forEach((child)=>{
                        var _child$context;
                        if ((_child$context = child.context) != null && _child$context.open && !child.context.dataRef.current.__escapeKeyBubbles) {
                            shouldDismiss = false;
                            return;
                        }
                    });
                    if (!shouldDismiss) {
                        return;
                    }
                }
                events.emit('dismiss', {
                    type: 'escapeKey',
                    data: {
                        returnFocus: {
                            preventScroll: false
                        }
                    }
                });
                onOpenChange(false);
            }
        }
        function onOutsidePress(event) {
            // Given developers can stop the propagation of the synthetic event,
            // we can only be confident with a positive value.
            const insideReactTree = insideReactTreeRef.current;
            insideReactTreeRef.current = false;
            if (insideReactTree) {
                return;
            }
            if (typeof outsidePress === 'function' && !outsidePress(event)) {
                return;
            }
            const target = getTarget(event);
            // Check if the click occurred on the scrollbar
            if (isHTMLElement(target) && floating) {
                const win = floating.ownerDocument.defaultView || window;
                const canScrollX = target.scrollWidth > target.clientWidth;
                const canScrollY = target.scrollHeight > target.clientHeight;
                let xCond = canScrollY && event.offsetX > target.clientWidth;
                // In some browsers it is possible to change the <body> (or window)
                // scrollbar to the left side, but is very rare and is difficult to
                // check for. Plus, for modal dialogs with backdrops, it is more
                // important that the backdrop is checked but not so much the window.
                if (canScrollY) {
                    const isRTL = win.getComputedStyle(target).direction === 'rtl';
                    if (isRTL) {
                        xCond = event.offsetX <= target.offsetWidth - target.clientWidth;
                    }
                }
                if (xCond || canScrollX && event.offsetY > target.clientHeight) {
                    return;
                }
            }
            const targetIsInsideChildren = tree && getChildren(tree.nodesRef.current, nodeId).some((node)=>{
                var _node$context;
                return isEventTargetWithin(event, (_node$context = node.context) == null ? void 0 : _node$context.elements.floating);
            });
            if (isEventTargetWithin(event, floating) || isEventTargetWithin(event, domReference) || targetIsInsideChildren) {
                return;
            }
            const children = tree ? getChildren(tree.nodesRef.current, nodeId) : [];
            if (children.length > 0) {
                let shouldDismiss = true;
                children.forEach((child)=>{
                    var _child$context2;
                    if ((_child$context2 = child.context) != null && _child$context2.open && !child.context.dataRef.current.__outsidePressBubbles) {
                        shouldDismiss = false;
                        return;
                    }
                });
                if (!shouldDismiss) {
                    return;
                }
            }
            events.emit('dismiss', {
                type: 'outsidePress',
                data: {
                    returnFocus: nested ? {
                        preventScroll: true
                    } : isVirtualClick(event) || isVirtualPointerEvent(event)
                }
            });
            onOpenChange(false);
        }
        function onScroll() {
            onOpenChange(false);
        }
        const doc = getDocument(floating);
        escapeKey && doc.addEventListener('keydown', onKeyDown);
        outsidePress && doc.addEventListener(outsidePressEvent, onOutsidePress);
        let ancestors = [];
        if (ancestorScroll) {
            if (isElement(domReference)) {
                ancestors = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getOverflowAncestors"](domReference);
            }
            if (isElement(floating)) {
                ancestors = ancestors.concat(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getOverflowAncestors"](floating));
            }
            if (!isElement(reference) && reference && reference.contextElement) {
                ancestors = ancestors.concat(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getOverflowAncestors"](reference.contextElement));
            }
        }
        // Ignore the visual viewport for scrolling dismissal (allow pinch-zoom)
        ancestors = ancestors.filter((ancestor)=>{
            var _doc$defaultView;
            return ancestor !== ((_doc$defaultView = doc.defaultView) == null ? void 0 : _doc$defaultView.visualViewport);
        });
        ancestors.forEach((ancestor)=>{
            ancestor.addEventListener('scroll', onScroll, {
                passive: true
            });
        });
        return ()=>{
            escapeKey && doc.removeEventListener('keydown', onKeyDown);
            outsidePress && doc.removeEventListener(outsidePressEvent, onOutsidePress);
            ancestors.forEach((ancestor)=>{
                ancestor.removeEventListener('scroll', onScroll);
            });
        };
    }, [
        dataRef,
        floating,
        domReference,
        reference,
        escapeKey,
        outsidePress,
        outsidePressEvent,
        events,
        tree,
        nodeId,
        open,
        onOpenChange,
        ancestorScroll,
        enabled,
        escapeKeyBubbles,
        outsidePressBubbles,
        nested
    ]);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useEffect(()=>{
        insideReactTreeRef.current = false;
    }, [
        outsidePress,
        outsidePressEvent
    ]);
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useMemo(()=>{
        if (!enabled) {
            return {};
        }
        return {
            reference: {
                [bubbleHandlerKeys[referencePressEvent]]: ()=>{
                    if (referencePress) {
                        events.emit('dismiss', {
                            type: 'referencePress',
                            data: {
                                returnFocus: false
                            }
                        });
                        onOpenChange(false);
                    }
                }
            },
            floating: {
                [captureHandlerKeys[outsidePressEvent]]: ()=>{
                    insideReactTreeRef.current = true;
                }
            }
        };
    }, [
        enabled,
        events,
        referencePress,
        outsidePressEvent,
        referencePressEvent,
        onOpenChange
    ]);
};
/**
 * Adds focus event listeners that change the open state, like CSS :focus.
 * @see https://floating-ui.com/docs/useFocus
 */ const useFocus = function(_ref, _temp) {
    let { open, onOpenChange, dataRef, events, refs, elements: { floating, domReference } } = _ref;
    let { enabled = true, keyboardOnly = true } = _temp === void 0 ? {} : _temp;
    const pointerTypeRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef('');
    const blockFocusRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(false);
    const timeoutRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef();
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useEffect(()=>{
        if (!enabled) {
            return;
        }
        const doc = getDocument(floating);
        const win = doc.defaultView || window;
        // If the reference was focused and the user left the tab/window, and the
        // floating element was not open, the focus should be blocked when they
        // return to the tab/window.
        function onBlur() {
            if (!open && isHTMLElement(domReference) && domReference === activeElement$1(getDocument(domReference))) {
                blockFocusRef.current = true;
            }
        }
        win.addEventListener('blur', onBlur);
        return ()=>{
            win.removeEventListener('blur', onBlur);
        };
    }, [
        floating,
        domReference,
        open,
        enabled
    ]);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useEffect(()=>{
        if (!enabled) {
            return;
        }
        function onDismiss(payload) {
            if (payload.type === 'referencePress' || payload.type === 'escapeKey') {
                blockFocusRef.current = true;
            }
        }
        events.on('dismiss', onDismiss);
        return ()=>{
            events.off('dismiss', onDismiss);
        };
    }, [
        events,
        enabled
    ]);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useEffect(()=>{
        return ()=>{
            clearTimeout(timeoutRef.current);
        };
    }, []);
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useMemo(()=>{
        if (!enabled) {
            return {};
        }
        return {
            reference: {
                onPointerDown (_ref2) {
                    let { pointerType } = _ref2;
                    pointerTypeRef.current = pointerType;
                    blockFocusRef.current = !!(pointerType && keyboardOnly);
                },
                onMouseLeave () {
                    blockFocusRef.current = false;
                },
                onFocus (event) {
                    var _dataRef$current$open;
                    if (blockFocusRef.current) {
                        return;
                    }
                    // Dismiss with click should ignore the subsequent `focus` trigger,
                    // but only if the click originated inside the reference element.
                    if (event.type === 'focus' && ((_dataRef$current$open = dataRef.current.openEvent) == null ? void 0 : _dataRef$current$open.type) === 'mousedown' && dataRef.current.openEvent && isEventTargetWithin(dataRef.current.openEvent, domReference)) {
                        return;
                    }
                    dataRef.current.openEvent = event.nativeEvent;
                    onOpenChange(true);
                },
                onBlur (event) {
                    blockFocusRef.current = false;
                    const relatedTarget = event.relatedTarget;
                    // Hit the non-modal focus management portal guard. Focus will be
                    // moved into the floating element immediately after.
                    const movedToFocusGuard = isElement(relatedTarget) && relatedTarget.hasAttribute('data-floating-ui-focus-guard') && relatedTarget.getAttribute('data-type') === 'outside';
                    // Wait for the window blur listener to fire.
                    timeoutRef.current = setTimeout(()=>{
                        // When focusing the reference element (e.g. regular click), then
                        // clicking into the floating element, prevent it from hiding.
                        // Note: it must be focusable, e.g. `tabindex="-1"`.
                        if (contains(refs.floating.current, relatedTarget) || contains(domReference, relatedTarget) || movedToFocusGuard) {
                            return;
                        }
                        onOpenChange(false);
                    });
                }
            }
        };
    }, [
        enabled,
        keyboardOnly,
        domReference,
        refs,
        dataRef,
        onOpenChange
    ]);
};
let isPreventScrollSupported = false;
const ARROW_UP = 'ArrowUp';
const ARROW_DOWN = 'ArrowDown';
const ARROW_LEFT = 'ArrowLeft';
const ARROW_RIGHT = 'ArrowRight';
function isDifferentRow(index, cols, prevRow) {
    return Math.floor(index / cols) !== prevRow;
}
function isIndexOutOfBounds(listRef, index) {
    return index < 0 || index >= listRef.current.length;
}
function findNonDisabledIndex(listRef, _temp) {
    let { startingIndex = -1, decrement = false, disabledIndices, amount = 1 } = _temp === void 0 ? {} : _temp;
    const list = listRef.current;
    let index = startingIndex;
    do {
        var _list$index, _list$index2;
        index = index + (decrement ? -amount : amount);
    }while (index >= 0 && index <= list.length - 1 && (disabledIndices ? disabledIndices.includes(index) : list[index] == null || ((_list$index = list[index]) == null ? void 0 : _list$index.hasAttribute('disabled')) || ((_list$index2 = list[index]) == null ? void 0 : _list$index2.getAttribute('aria-disabled')) === 'true'))
    return index;
}
function doSwitch(orientation, vertical, horizontal) {
    switch(orientation){
        case 'vertical':
            return vertical;
        case 'horizontal':
            return horizontal;
        default:
            return vertical || horizontal;
    }
}
function isMainOrientationKey(key, orientation) {
    const vertical = key === ARROW_UP || key === ARROW_DOWN;
    const horizontal = key === ARROW_LEFT || key === ARROW_RIGHT;
    return doSwitch(orientation, vertical, horizontal);
}
function isMainOrientationToEndKey(key, orientation, rtl) {
    const vertical = key === ARROW_DOWN;
    const horizontal = rtl ? key === ARROW_LEFT : key === ARROW_RIGHT;
    return doSwitch(orientation, vertical, horizontal) || key === 'Enter' || key == ' ' || key === '';
}
function isCrossOrientationOpenKey(key, orientation, rtl) {
    const vertical = rtl ? key === ARROW_LEFT : key === ARROW_RIGHT;
    const horizontal = key === ARROW_DOWN;
    return doSwitch(orientation, vertical, horizontal);
}
function isCrossOrientationCloseKey(key, orientation, rtl) {
    const vertical = rtl ? key === ARROW_RIGHT : key === ARROW_LEFT;
    const horizontal = key === ARROW_UP;
    return doSwitch(orientation, vertical, horizontal);
}
function getMinIndex(listRef, disabledIndices) {
    return findNonDisabledIndex(listRef, {
        disabledIndices
    });
}
function getMaxIndex(listRef, disabledIndices) {
    return findNonDisabledIndex(listRef, {
        decrement: true,
        startingIndex: listRef.current.length,
        disabledIndices
    });
}
/**
 * Adds focus-managed indexed navigation via arrow keys to a list of items
 * within the floating element.
 * @see https://floating-ui.com/docs/useListNavigation
 */ const useListNavigation = function(_ref, _temp2) {
    let { open, onOpenChange, refs, elements: { domReference } } = _ref;
    let { listRef, activeIndex, onNavigate: unstable_onNavigate = ()=>{}, enabled = true, selectedIndex = null, allowEscape = false, loop = false, nested = false, rtl = false, virtual = false, focusItemOnOpen = 'auto', focusItemOnHover = true, openOnArrowKeyDown = true, disabledIndices = undefined, orientation = 'vertical', cols = 1, scrollItemIntoView = true } = _temp2 === void 0 ? {
        listRef: {
            current: []
        },
        activeIndex: null,
        onNavigate: ()=>{}
    } : _temp2;
    if ("TURBOPACK compile-time truthy", 1) {
        if (allowEscape) {
            if (!loop) {
                console.warn([
                    'Floating UI: `useListNavigation` looping must be enabled to allow',
                    'escaping.'
                ].join(' '));
            }
            if (!virtual) {
                console.warn([
                    'Floating UI: `useListNavigation` must be virtual to allow',
                    'escaping.'
                ].join(' '));
            }
        }
        if (orientation === 'vertical' && cols > 1) {
            console.warn([
                'Floating UI: In grid list navigation mode (`cols` > 1), the',
                '`orientation` should be either "horizontal" or "both".'
            ].join(' '));
        }
    }
    const parentId = useFloatingParentNodeId();
    const tree = useFloatingTree();
    const onNavigate = useEvent(unstable_onNavigate);
    const focusItemOnOpenRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(focusItemOnOpen);
    const indexRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(selectedIndex != null ? selectedIndex : -1);
    const keyRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(null);
    const isPointerModalityRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(true);
    const previousOnNavigateRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(onNavigate);
    const previousOpenRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(open);
    const forceSyncFocus = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(false);
    const forceScrollIntoViewRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(false);
    const disabledIndicesRef = useLatestRef(disabledIndices);
    const latestOpenRef = useLatestRef(open);
    const scrollItemIntoViewRef = useLatestRef(scrollItemIntoView);
    const [activeId, setActiveId] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useState();
    const focusItem = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useCallback(function(listRef, indexRef, forceScrollIntoView) {
        if (forceScrollIntoView === void 0) {
            forceScrollIntoView = false;
        }
        const item = listRef.current[indexRef.current];
        if (virtual) {
            setActiveId(item == null ? void 0 : item.id);
        } else {
            enqueueFocus(item, {
                preventScroll: true,
                // Mac Safari does not move the virtual cursor unless the focus call
                // is sync. However, for the very first focus call, we need to wait
                // for the position to be ready in order to prevent unwanted
                // scrolling. This means the virtual cursor will not move to the first
                // item when first opening the floating element, but will on
                // subsequent calls. `preventScroll` is supported in modern Safari,
                // so we can use that instead.
                // iOS Safari must be async or the first item will not be focused.
                sync: isMac() && isSafari() ? isPreventScrollSupported || forceSyncFocus.current : false
            });
        }
        requestAnimationFrame(()=>{
            const scrollIntoViewOptions = scrollItemIntoViewRef.current;
            const shouldScrollIntoView = scrollIntoViewOptions && item && (forceScrollIntoView || !isPointerModalityRef.current);
            if (shouldScrollIntoView) {
                // JSDOM doesn't support `.scrollIntoView()` but it's widely supported
                // by all browsers.
                item.scrollIntoView == null ? void 0 : item.scrollIntoView(typeof scrollIntoViewOptions === 'boolean' ? {
                    block: 'nearest',
                    inline: 'nearest'
                } : scrollIntoViewOptions);
            }
        });
    }, [
        virtual,
        scrollItemIntoViewRef
    ]);
    index(()=>{
        document.createElement('div').focus({
            get preventScroll () {
                isPreventScrollSupported = true;
                return false;
            }
        });
    }, []);
    // Sync `selectedIndex` to be the `activeIndex` upon opening the floating
    // element. Also, reset `activeIndex` upon closing the floating element.
    index(()=>{
        if (!enabled) {
            return;
        }
        if (open) {
            if (focusItemOnOpenRef.current && selectedIndex != null) {
                // Regardless of the pointer modality, we want to ensure the selected
                // item comes into view when the floating element is opened.
                forceScrollIntoViewRef.current = true;
                onNavigate(selectedIndex);
            }
        } else if (previousOpenRef.current) {
            // Since the user can specify `onNavigate` conditionally
            // (onNavigate: open ? setActiveIndex : setSelectedIndex),
            // we store and call the previous function.
            indexRef.current = -1;
            previousOnNavigateRef.current(null);
        }
    }, [
        enabled,
        open,
        selectedIndex,
        onNavigate
    ]);
    // Sync `activeIndex` to be the focused item while the floating element is
    // open.
    index(()=>{
        if (!enabled) {
            return;
        }
        if (open) {
            if (activeIndex == null) {
                forceSyncFocus.current = false;
                if (selectedIndex != null) {
                    return;
                }
                // Reset while the floating element was open (e.g. the list changed).
                if (previousOpenRef.current) {
                    indexRef.current = -1;
                    focusItem(listRef, indexRef);
                }
                // Initial sync.
                if (!previousOpenRef.current && focusItemOnOpenRef.current && (keyRef.current != null || focusItemOnOpenRef.current === true && keyRef.current == null)) {
                    indexRef.current = keyRef.current == null || isMainOrientationToEndKey(keyRef.current, orientation, rtl) || nested ? getMinIndex(listRef, disabledIndicesRef.current) : getMaxIndex(listRef, disabledIndicesRef.current);
                    onNavigate(indexRef.current);
                }
            } else if (!isIndexOutOfBounds(listRef, activeIndex)) {
                indexRef.current = activeIndex;
                focusItem(listRef, indexRef, forceScrollIntoViewRef.current);
                forceScrollIntoViewRef.current = false;
            }
        }
    }, [
        enabled,
        open,
        activeIndex,
        selectedIndex,
        nested,
        listRef,
        orientation,
        rtl,
        onNavigate,
        focusItem,
        disabledIndicesRef
    ]);
    // Ensure the parent floating element has focus when a nested child closes
    // to allow arrow key navigation to work after the pointer leaves the child.
    index(()=>{
        if (!enabled) {
            return;
        }
        if (previousOpenRef.current && !open) {
            var _tree$nodesRef$curren, _tree$nodesRef$curren2;
            const parentFloating = tree == null ? void 0 : (_tree$nodesRef$curren = tree.nodesRef.current.find((node)=>node.id === parentId)) == null ? void 0 : (_tree$nodesRef$curren2 = _tree$nodesRef$curren.context) == null ? void 0 : _tree$nodesRef$curren2.elements.floating;
            if (parentFloating && !contains(parentFloating, activeElement$1(getDocument(parentFloating)))) {
                parentFloating.focus({
                    preventScroll: true
                });
            }
        }
    }, [
        enabled,
        open,
        tree,
        parentId
    ]);
    index(()=>{
        keyRef.current = null;
        previousOnNavigateRef.current = onNavigate;
        previousOpenRef.current = open;
    });
    const hasActiveIndex = activeIndex != null;
    const item = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useMemo(()=>{
        function syncCurrentTarget(currentTarget) {
            if (!open) return;
            const index = listRef.current.indexOf(currentTarget);
            if (index !== -1) {
                onNavigate(index);
            }
        }
        const props = {
            onFocus (_ref2) {
                let { currentTarget } = _ref2;
                syncCurrentTarget(currentTarget);
            },
            onClick: (_ref3)=>{
                let { currentTarget } = _ref3;
                return currentTarget.focus({
                    preventScroll: true
                });
            },
            // Safari
            ...focusItemOnHover && {
                onMouseMove (_ref4) {
                    let { currentTarget } = _ref4;
                    syncCurrentTarget(currentTarget);
                },
                onPointerLeave () {
                    if (!isPointerModalityRef.current) {
                        return;
                    }
                    indexRef.current = -1;
                    focusItem(listRef, indexRef);
                    // Virtual cursor with VoiceOver on iOS needs this to be flushed
                    // synchronously or there is a glitch that prevents nested
                    // submenus from being accessible.
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$dom$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flushSync"](()=>onNavigate(null));
                    if (!virtual) {
                        var _refs$floating$curren;
                        // This also needs to be sync to prevent fast mouse movements
                        // from leaving behind a stale active item when landing on a
                        // disabled button item.
                        (_refs$floating$curren = refs.floating.current) == null ? void 0 : _refs$floating$curren.focus({
                            preventScroll: true
                        });
                    }
                }
            }
        };
        return props;
    }, [
        open,
        refs,
        focusItem,
        focusItemOnHover,
        listRef,
        onNavigate,
        virtual
    ]);
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useMemo(()=>{
        if (!enabled) {
            return {};
        }
        const disabledIndices = disabledIndicesRef.current;
        function onKeyDown(event) {
            isPointerModalityRef.current = false;
            forceSyncFocus.current = true;
            // If the floating element is animating out, ignore navigation. Otherwise,
            // the `activeIndex` gets set to 0 despite not being open so the next time
            // the user ArrowDowns, the first item won't be focused.
            if (!latestOpenRef.current && event.currentTarget === refs.floating.current) {
                return;
            }
            if (nested && isCrossOrientationCloseKey(event.key, orientation, rtl)) {
                stopEvent(event);
                onOpenChange(false);
                if (isHTMLElement(domReference)) {
                    domReference.focus();
                }
                return;
            }
            const currentIndex = indexRef.current;
            const minIndex = getMinIndex(listRef, disabledIndices);
            const maxIndex = getMaxIndex(listRef, disabledIndices);
            if (event.key === 'Home') {
                indexRef.current = minIndex;
                onNavigate(indexRef.current);
            }
            if (event.key === 'End') {
                indexRef.current = maxIndex;
                onNavigate(indexRef.current);
            }
            // Grid navigation.
            if (cols > 1) {
                const prevIndex = indexRef.current;
                if (event.key === ARROW_UP) {
                    stopEvent(event);
                    if (prevIndex === -1) {
                        indexRef.current = maxIndex;
                    } else {
                        indexRef.current = findNonDisabledIndex(listRef, {
                            startingIndex: prevIndex,
                            amount: cols,
                            decrement: true,
                            disabledIndices
                        });
                        if (loop && (prevIndex - cols < minIndex || indexRef.current < 0)) {
                            const col = prevIndex % cols;
                            const maxCol = maxIndex % cols;
                            const offset = maxIndex - (maxCol - col);
                            if (maxCol === col) {
                                indexRef.current = maxIndex;
                            } else {
                                indexRef.current = maxCol > col ? offset : offset - cols;
                            }
                        }
                    }
                    if (isIndexOutOfBounds(listRef, indexRef.current)) {
                        indexRef.current = prevIndex;
                    }
                    onNavigate(indexRef.current);
                }
                if (event.key === ARROW_DOWN) {
                    stopEvent(event);
                    if (prevIndex === -1) {
                        indexRef.current = minIndex;
                    } else {
                        indexRef.current = findNonDisabledIndex(listRef, {
                            startingIndex: prevIndex,
                            amount: cols,
                            disabledIndices
                        });
                        if (loop && prevIndex + cols > maxIndex) {
                            indexRef.current = findNonDisabledIndex(listRef, {
                                startingIndex: prevIndex % cols - cols,
                                amount: cols,
                                disabledIndices
                            });
                        }
                    }
                    if (isIndexOutOfBounds(listRef, indexRef.current)) {
                        indexRef.current = prevIndex;
                    }
                    onNavigate(indexRef.current);
                }
                // Remains on the same row/column.
                if (orientation === 'both') {
                    const prevRow = Math.floor(prevIndex / cols);
                    if (event.key === ARROW_RIGHT) {
                        stopEvent(event);
                        if (prevIndex % cols !== cols - 1) {
                            indexRef.current = findNonDisabledIndex(listRef, {
                                startingIndex: prevIndex,
                                disabledIndices
                            });
                            if (loop && isDifferentRow(indexRef.current, cols, prevRow)) {
                                indexRef.current = findNonDisabledIndex(listRef, {
                                    startingIndex: prevIndex - prevIndex % cols - 1,
                                    disabledIndices
                                });
                            }
                        } else if (loop) {
                            indexRef.current = findNonDisabledIndex(listRef, {
                                startingIndex: prevIndex - prevIndex % cols - 1,
                                disabledIndices
                            });
                        }
                        if (isDifferentRow(indexRef.current, cols, prevRow)) {
                            indexRef.current = prevIndex;
                        }
                    }
                    if (event.key === ARROW_LEFT) {
                        stopEvent(event);
                        if (prevIndex % cols !== 0) {
                            indexRef.current = findNonDisabledIndex(listRef, {
                                startingIndex: prevIndex,
                                disabledIndices,
                                decrement: true
                            });
                            if (loop && isDifferentRow(indexRef.current, cols, prevRow)) {
                                indexRef.current = findNonDisabledIndex(listRef, {
                                    startingIndex: prevIndex + (cols - prevIndex % cols),
                                    decrement: true,
                                    disabledIndices
                                });
                            }
                        } else if (loop) {
                            indexRef.current = findNonDisabledIndex(listRef, {
                                startingIndex: prevIndex + (cols - prevIndex % cols),
                                decrement: true,
                                disabledIndices
                            });
                        }
                        if (isDifferentRow(indexRef.current, cols, prevRow)) {
                            indexRef.current = prevIndex;
                        }
                    }
                    const lastRow = Math.floor(maxIndex / cols) === prevRow;
                    if (isIndexOutOfBounds(listRef, indexRef.current)) {
                        if (loop && lastRow) {
                            indexRef.current = event.key === ARROW_LEFT ? maxIndex : findNonDisabledIndex(listRef, {
                                startingIndex: prevIndex - prevIndex % cols - 1,
                                disabledIndices
                            });
                        } else {
                            indexRef.current = prevIndex;
                        }
                    }
                    onNavigate(indexRef.current);
                    return;
                }
            }
            if (isMainOrientationKey(event.key, orientation)) {
                stopEvent(event);
                // Reset the index if no item is focused.
                if (open && !virtual && activeElement$1(event.currentTarget.ownerDocument) === event.currentTarget) {
                    indexRef.current = isMainOrientationToEndKey(event.key, orientation, rtl) ? minIndex : maxIndex;
                    onNavigate(indexRef.current);
                    return;
                }
                if (isMainOrientationToEndKey(event.key, orientation, rtl)) {
                    if (loop) {
                        indexRef.current = currentIndex >= maxIndex ? allowEscape && currentIndex !== listRef.current.length ? -1 : minIndex : findNonDisabledIndex(listRef, {
                            startingIndex: currentIndex,
                            disabledIndices
                        });
                    } else {
                        indexRef.current = Math.min(maxIndex, findNonDisabledIndex(listRef, {
                            startingIndex: currentIndex,
                            disabledIndices
                        }));
                    }
                } else {
                    if (loop) {
                        indexRef.current = currentIndex <= minIndex ? allowEscape && currentIndex !== -1 ? listRef.current.length : maxIndex : findNonDisabledIndex(listRef, {
                            startingIndex: currentIndex,
                            decrement: true,
                            disabledIndices
                        });
                    } else {
                        indexRef.current = Math.max(minIndex, findNonDisabledIndex(listRef, {
                            startingIndex: currentIndex,
                            decrement: true,
                            disabledIndices
                        }));
                    }
                }
                if (isIndexOutOfBounds(listRef, indexRef.current)) {
                    onNavigate(null);
                } else {
                    onNavigate(indexRef.current);
                }
            }
        }
        function checkVirtualMouse(event) {
            if (focusItemOnOpen === 'auto' && isVirtualClick(event.nativeEvent)) {
                focusItemOnOpenRef.current = true;
            }
        }
        function checkVirtualPointer(event) {
            // `pointerdown` fires first, reset the state then perform the checks.
            focusItemOnOpenRef.current = focusItemOnOpen;
            if (focusItemOnOpen === 'auto' && isVirtualPointerEvent(event.nativeEvent)) {
                focusItemOnOpenRef.current = true;
            }
        }
        const ariaActiveDescendantProp = virtual && open && hasActiveIndex && {
            'aria-activedescendant': activeId
        };
        return {
            reference: {
                ...ariaActiveDescendantProp,
                onKeyDown (event) {
                    isPointerModalityRef.current = false;
                    const isArrowKey = event.key.indexOf('Arrow') === 0;
                    if (virtual && open) {
                        return onKeyDown(event);
                    }
                    // If a floating element should not open on arrow key down, avoid
                    // setting `activeIndex` while it's closed.
                    if (!open && !openOnArrowKeyDown && isArrowKey) {
                        return;
                    }
                    const isNavigationKey = isArrowKey || event.key === 'Enter' || event.key === ' ' || event.key === '';
                    if (isNavigationKey) {
                        keyRef.current = event.key;
                    }
                    if (nested) {
                        if (isCrossOrientationOpenKey(event.key, orientation, rtl)) {
                            stopEvent(event);
                            if (open) {
                                indexRef.current = getMinIndex(listRef, disabledIndices);
                                onNavigate(indexRef.current);
                            } else {
                                onOpenChange(true);
                            }
                        }
                        return;
                    }
                    if (isMainOrientationKey(event.key, orientation)) {
                        if (selectedIndex != null) {
                            indexRef.current = selectedIndex;
                        }
                        stopEvent(event);
                        if (!open && openOnArrowKeyDown) {
                            onOpenChange(true);
                        } else {
                            onKeyDown(event);
                        }
                        if (open) {
                            onNavigate(indexRef.current);
                        }
                    }
                },
                onFocus () {
                    if (open) {
                        onNavigate(null);
                    }
                },
                onPointerDown: checkVirtualPointer,
                onMouseDown: checkVirtualMouse,
                onClick: checkVirtualMouse
            },
            floating: {
                'aria-orientation': orientation === 'both' ? undefined : orientation,
                ...ariaActiveDescendantProp,
                onKeyDown,
                onPointerMove () {
                    isPointerModalityRef.current = true;
                }
            },
            item
        };
    }, [
        domReference,
        refs,
        activeId,
        disabledIndicesRef,
        latestOpenRef,
        listRef,
        enabled,
        orientation,
        rtl,
        virtual,
        open,
        hasActiveIndex,
        nested,
        selectedIndex,
        openOnArrowKeyDown,
        allowEscape,
        cols,
        loop,
        focusItemOnOpen,
        onNavigate,
        onOpenChange,
        item
    ]);
};
function useMergeRefs(refs) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useMemo(()=>{
        if (refs.every((ref)=>ref == null)) {
            return null;
        }
        return (value)=>{
            refs.forEach((ref)=>{
                if (typeof ref === 'function') {
                    ref(value);
                } else if (ref != null) {
                    ref.current = value;
                }
            });
        };
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, refs);
}
/**
 * Adds relevant screen reader props for a given element `role`.
 * @see https://floating-ui.com/docs/useRole
 */ const useRole = function(_ref, _temp) {
    let { open } = _ref;
    let { enabled = true, role = 'dialog' } = _temp === void 0 ? {} : _temp;
    const rootId = useId();
    const referenceId = useId();
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useMemo(()=>{
        const floatingProps = {
            id: rootId,
            role
        };
        if (!enabled) {
            return {};
        }
        if (role === 'tooltip') {
            return {
                reference: {
                    'aria-describedby': open ? rootId : undefined
                },
                floating: floatingProps
            };
        }
        return {
            reference: {
                'aria-expanded': open ? 'true' : 'false',
                'aria-haspopup': role === 'alertdialog' ? 'dialog' : role,
                'aria-controls': open ? rootId : undefined,
                ...role === 'listbox' && {
                    role: 'combobox'
                },
                ...role === 'menu' && {
                    id: referenceId
                }
            },
            floating: {
                ...floatingProps,
                ...role === 'menu' && {
                    'aria-labelledby': referenceId
                }
            }
        };
    }, [
        enabled,
        role,
        open,
        rootId,
        referenceId
    ]);
};
// Converts a JS style key like `backgroundColor` to a CSS transition-property
// like `background-color`.
const camelCaseToKebabCase = (str)=>str.replace(/[A-Z]+(?![a-z])|[A-Z]/g, ($, ofs)=>(ofs ? '-' : '') + $.toLowerCase());
function useDelayUnmount(open, durationMs) {
    const [isMounted, setIsMounted] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useState(open);
    if (open && !isMounted) {
        setIsMounted(true);
    }
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useEffect(()=>{
        if (!open) {
            const timeout = setTimeout(()=>setIsMounted(false), durationMs);
            return ()=>clearTimeout(timeout);
        }
    }, [
        open,
        durationMs
    ]);
    return isMounted;
}
/**
 * Provides a status string to apply CSS transitions to a floating element,
 * correctly handling placement-aware transitions.
 * @see https://floating-ui.com/docs/useTransition#usetransitionstatus
 */ function useTransitionStatus(_ref, _temp) {
    let { open, elements: { floating } } = _ref;
    let { duration = 250 } = _temp === void 0 ? {} : _temp;
    const isNumberDuration = typeof duration === 'number';
    const closeDuration = (isNumberDuration ? duration : duration.close) || 0;
    const [initiated, setInitiated] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useState(false);
    const [status, setStatus] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useState('unmounted');
    const isMounted = useDelayUnmount(open, closeDuration);
    // `initiated` check prevents this `setState` call from breaking
    // <FloatingPortal />. This call is necessary to ensure subsequent opens
    // after the initial one allows the correct side animation to play when the
    // placement has changed.
    index(()=>{
        if (initiated && !isMounted) {
            setStatus('unmounted');
        }
    }, [
        initiated,
        isMounted
    ]);
    index(()=>{
        if (!floating) return;
        if (open) {
            setStatus('initial');
            const frame = requestAnimationFrame(()=>{
                setStatus('open');
            });
            return ()=>{
                cancelAnimationFrame(frame);
            };
        } else {
            setInitiated(true);
            setStatus('close');
        }
    }, [
        open,
        floating
    ]);
    return {
        isMounted,
        status
    };
}
/**
 * Provides styles to apply CSS transitions to a floating element, correctly
 * handling placement-aware transitions. Wrapper around `useTransitionStatus`.
 * @see https://floating-ui.com/docs/useTransition#usetransitionstyles
 */ function useTransitionStyles(context, _temp2) {
    let { initial: unstable_initial = {
        opacity: 0
    }, open: unstable_open, close: unstable_close, common: unstable_common, duration = 250 } = _temp2 === void 0 ? {} : _temp2;
    const placement = context.placement;
    const side = placement.split('-')[0];
    const [styles, setStyles] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useState({});
    const { isMounted, status } = useTransitionStatus(context, {
        duration
    });
    const initialRef = useLatestRef(unstable_initial);
    const openRef = useLatestRef(unstable_open);
    const closeRef = useLatestRef(unstable_close);
    const commonRef = useLatestRef(unstable_common);
    const isNumberDuration = typeof duration === 'number';
    const openDuration = (isNumberDuration ? duration : duration.open) || 0;
    const closeDuration = (isNumberDuration ? duration : duration.close) || 0;
    index(()=>{
        const fnArgs = {
            side,
            placement
        };
        const initial = initialRef.current;
        const close = closeRef.current;
        const open = openRef.current;
        const common = commonRef.current;
        const initialStyles = typeof initial === 'function' ? initial(fnArgs) : initial;
        const closeStyles = typeof close === 'function' ? close(fnArgs) : close;
        const commonStyles = typeof common === 'function' ? common(fnArgs) : common;
        const openStyles = (typeof open === 'function' ? open(fnArgs) : open) || Object.keys(initialStyles).reduce((acc, key)=>{
            acc[key] = '';
            return acc;
        }, {});
        if (status === 'initial') {
            setStyles((styles)=>({
                    transitionProperty: styles.transitionProperty,
                    ...commonStyles,
                    ...initialStyles
                }));
        }
        if (status === 'open') {
            setStyles({
                transitionProperty: Object.keys(openStyles).map(camelCaseToKebabCase).join(','),
                transitionDuration: openDuration + "ms",
                ...commonStyles,
                ...openStyles
            });
        }
        if (status === 'close') {
            const styles = closeStyles || initialStyles;
            setStyles({
                transitionProperty: Object.keys(styles).map(camelCaseToKebabCase).join(','),
                transitionDuration: closeDuration + "ms",
                ...commonStyles,
                ...styles
            });
        }
    }, [
        side,
        placement,
        closeDuration,
        closeRef,
        initialRef,
        openRef,
        commonRef,
        openDuration,
        status
    ]);
    return {
        isMounted,
        styles
    };
}
/**
 * Provides a matching callback that can be used to focus an item as the user
 * types, often used in tandem with `useListNavigation()`.
 * @see https://floating-ui.com/docs/useTypeahead
 */ const useTypeahead = function(_ref, _temp) {
    var _ref2;
    let { open, dataRef } = _ref;
    let { listRef, activeIndex, onMatch: unstable_onMatch = ()=>{}, enabled = true, findMatch = null, resetMs = 1000, ignoreKeys = [], selectedIndex = null } = _temp === void 0 ? {
        listRef: {
            current: []
        },
        activeIndex: null
    } : _temp;
    const timeoutIdRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef();
    const stringRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef('');
    const prevIndexRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef((_ref2 = selectedIndex != null ? selectedIndex : activeIndex) != null ? _ref2 : -1);
    const matchIndexRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(null);
    const onMatch = useEvent(unstable_onMatch);
    const findMatchRef = useLatestRef(findMatch);
    const ignoreKeysRef = useLatestRef(ignoreKeys);
    index(()=>{
        if (open) {
            clearTimeout(timeoutIdRef.current);
            matchIndexRef.current = null;
            stringRef.current = '';
        }
    }, [
        open
    ]);
    index(()=>{
        // Sync arrow key navigation but not typeahead navigation.
        if (open && stringRef.current === '') {
            var _ref3;
            prevIndexRef.current = (_ref3 = selectedIndex != null ? selectedIndex : activeIndex) != null ? _ref3 : -1;
        }
    }, [
        open,
        selectedIndex,
        activeIndex
    ]);
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useMemo(()=>{
        if (!enabled) {
            return {};
        }
        function onKeyDown(event) {
            // Correctly scope nested non-portalled floating elements. Since the nested
            // floating element is inside of the another, we find the closest role
            // that indicates the floating element scope.
            const target = getTarget(event.nativeEvent);
            if (isElement(target) && (activeElement$1(getDocument(target)) !== event.currentTarget ? target.closest('[role="dialog"],[role="menu"],[role="listbox"],[role="tree"],[role="grid"]') !== event.currentTarget : false)) {
                return;
            }
            if (stringRef.current.length > 0 && stringRef.current[0] !== ' ') {
                dataRef.current.typing = true;
                if (event.key === ' ') {
                    stopEvent(event);
                }
            }
            const listContent = listRef.current;
            if (listContent == null || ignoreKeysRef.current.includes(event.key) || // Character key.
            event.key.length !== 1 || // Modifier key.
            event.ctrlKey || event.metaKey || event.altKey) {
                return;
            }
            // Bail out if the list contains a word like "llama" or "aaron". TODO:
            // allow it in this case, too.
            const allowRapidSuccessionOfFirstLetter = listContent.every((text)=>{
                var _text$, _text$2;
                return text ? ((_text$ = text[0]) == null ? void 0 : _text$.toLocaleLowerCase()) !== ((_text$2 = text[1]) == null ? void 0 : _text$2.toLocaleLowerCase()) : true;
            });
            // Allows the user to cycle through items that start with the same letter
            // in rapid succession.
            if (allowRapidSuccessionOfFirstLetter && stringRef.current === event.key) {
                stringRef.current = '';
                prevIndexRef.current = matchIndexRef.current;
            }
            stringRef.current += event.key;
            clearTimeout(timeoutIdRef.current);
            timeoutIdRef.current = setTimeout(()=>{
                stringRef.current = '';
                prevIndexRef.current = matchIndexRef.current;
                dataRef.current.typing = false;
            }, resetMs);
            const prevIndex = prevIndexRef.current;
            const orderedList = [
                ...listContent.slice((prevIndex || 0) + 1),
                ...listContent.slice(0, (prevIndex || 0) + 1)
            ];
            const str = findMatchRef.current ? findMatchRef.current(orderedList, stringRef.current) : orderedList.find((text)=>(text == null ? void 0 : text.toLocaleLowerCase().indexOf(stringRef.current.toLocaleLowerCase())) === 0);
            const index = str ? listContent.indexOf(str) : -1;
            if (index !== -1) {
                onMatch(index);
                matchIndexRef.current = index;
            }
        }
        return {
            reference: {
                onKeyDown
            },
            floating: {
                onKeyDown
            }
        };
    }, [
        enabled,
        dataRef,
        listRef,
        resetMs,
        ignoreKeysRef,
        findMatchRef,
        onMatch
    ]);
};
function getArgsWithCustomFloatingHeight(args, height) {
    return {
        ...args,
        rects: {
            ...args.rects,
            floating: {
                ...args.rects.floating,
                height
            }
        }
    };
}
/**
 * Positions the floating element such that an inner element inside
 * of it is anchored to the reference element.
 * @see https://floating-ui.com/docs/inner
 */ const inner = (props)=>({
        name: 'inner',
        options: props,
        async fn (middlewareArguments) {
            const { listRef, overflowRef, onFallbackChange, offset: innerOffset = 0, index = 0, minItemsVisible = 4, referenceOverflowThreshold = 0, scrollRef, ...detectOverflowOptions } = props;
            const { rects, elements: { floating } } = middlewareArguments;
            const item = listRef.current[index];
            if ("TURBOPACK compile-time truthy", 1) {
                if (!middlewareArguments.placement.startsWith('bottom')) {
                    console.warn([
                        'Floating UI: `placement` side must be "bottom" when using the',
                        '`inner` middleware.'
                    ].join(' '));
                }
            }
            if (!item) {
                return {};
            }
            const nextArgs = {
                ...middlewareArguments,
                ...await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$core$2f$dist$2f$floating$2d$ui$2e$core$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["offset"](-item.offsetTop - rects.reference.height / 2 - item.offsetHeight / 2 - innerOffset).fn(middlewareArguments)
            };
            const el = (scrollRef == null ? void 0 : scrollRef.current) || floating;
            const overflow = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$core$2f$dist$2f$floating$2d$ui$2e$core$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["detectOverflow"](getArgsWithCustomFloatingHeight(nextArgs, el.scrollHeight), detectOverflowOptions);
            const refOverflow = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$core$2f$dist$2f$floating$2d$ui$2e$core$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["detectOverflow"](nextArgs, {
                ...detectOverflowOptions,
                elementContext: 'reference'
            });
            const diffY = Math.max(0, overflow.top);
            const nextY = nextArgs.y + diffY;
            const maxHeight = Math.max(0, el.scrollHeight - diffY - Math.max(0, overflow.bottom));
            el.style.maxHeight = maxHeight + "px";
            el.scrollTop = diffY;
            // There is not enough space, fallback to standard anchored positioning
            if (onFallbackChange) {
                if (el.offsetHeight < item.offsetHeight * Math.min(minItemsVisible, listRef.current.length - 1) - 1 || refOverflow.top >= -referenceOverflowThreshold || refOverflow.bottom >= -referenceOverflowThreshold) {
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$dom$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flushSync"](()=>onFallbackChange(true));
                } else {
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$dom$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flushSync"](()=>onFallbackChange(false));
                }
            }
            if (overflowRef) {
                overflowRef.current = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$core$2f$dist$2f$floating$2d$ui$2e$core$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["detectOverflow"](getArgsWithCustomFloatingHeight({
                    ...nextArgs,
                    y: nextY
                }, el.offsetHeight), detectOverflowOptions);
            }
            return {
                y: nextY
            };
        }
    });
/**
 * Changes the `inner` middleware's `offset` upon a `wheel` event to
 * expand the floating element's height, revealing more list items.
 * @see https://floating-ui.com/docs/inner
 */ const useInnerOffset = (_ref, _ref2)=>{
    let { open, elements } = _ref;
    let { enabled = true, overflowRef, scrollRef, onChange: unstable_onChange } = _ref2;
    const onChange = useEvent(unstable_onChange);
    const controlledScrollingRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(false);
    const prevScrollTopRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(null);
    const initialOverflowRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(null);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useEffect(()=>{
        if (!enabled) {
            return;
        }
        function onWheel(e) {
            if (e.ctrlKey || !el || overflowRef.current == null) {
                return;
            }
            const dY = e.deltaY;
            const isAtTop = overflowRef.current.top >= -0.5;
            const isAtBottom = overflowRef.current.bottom >= -0.5;
            const remainingScroll = el.scrollHeight - el.clientHeight;
            const sign = dY < 0 ? -1 : 1;
            const method = dY < 0 ? 'max' : 'min';
            if (el.scrollHeight <= el.clientHeight) {
                return;
            }
            if (!isAtTop && dY > 0 || !isAtBottom && dY < 0) {
                e.preventDefault();
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$dom$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flushSync"](()=>{
                    onChange((d)=>d + Math[method](dY, remainingScroll * sign));
                });
            } else if (/firefox/i.test(getUserAgent())) {
                // Needed to propagate scrolling during momentum scrolling phase once
                // it gets limited by the boundary. UX improvement, not critical.
                el.scrollTop += dY;
            }
        }
        const el = (scrollRef == null ? void 0 : scrollRef.current) || elements.floating;
        if (open && el) {
            el.addEventListener('wheel', onWheel);
            // Wait for the position to be ready.
            requestAnimationFrame(()=>{
                prevScrollTopRef.current = el.scrollTop;
                if (overflowRef.current != null) {
                    initialOverflowRef.current = {
                        ...overflowRef.current
                    };
                }
            });
            return ()=>{
                prevScrollTopRef.current = null;
                initialOverflowRef.current = null;
                el.removeEventListener('wheel', onWheel);
            };
        }
    }, [
        enabled,
        open,
        elements.floating,
        overflowRef,
        scrollRef,
        onChange
    ]);
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useMemo(()=>{
        if (!enabled) {
            return {};
        }
        return {
            floating: {
                onKeyDown () {
                    controlledScrollingRef.current = true;
                },
                onWheel () {
                    controlledScrollingRef.current = false;
                },
                onPointerMove () {
                    controlledScrollingRef.current = false;
                },
                onScroll () {
                    const el = (scrollRef == null ? void 0 : scrollRef.current) || elements.floating;
                    if (!overflowRef.current || !el || !controlledScrollingRef.current) {
                        return;
                    }
                    if (prevScrollTopRef.current !== null) {
                        const scrollDiff = el.scrollTop - prevScrollTopRef.current;
                        if (overflowRef.current.bottom < -0.5 && scrollDiff < -1 || overflowRef.current.top < -0.5 && scrollDiff > 1) {
                            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$dom$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flushSync"](()=>onChange((d)=>d + scrollDiff));
                        }
                    }
                    // [Firefox] Wait for the height change to have been applied.
                    requestAnimationFrame(()=>{
                        prevScrollTopRef.current = el.scrollTop;
                    });
                }
            }
        };
    }, [
        enabled,
        overflowRef,
        elements.floating,
        scrollRef,
        onChange
    ]);
};
function isPointInPolygon(point, polygon) {
    const [x, y] = point;
    let isInside = false;
    const length = polygon.length;
    for(let i = 0, j = length - 1; i < length; j = i++){
        const [xi, yi] = polygon[i] || [
            0,
            0
        ];
        const [xj, yj] = polygon[j] || [
            0,
            0
        ];
        const intersect = yi >= y !== yj >= y && x <= (xj - xi) * (y - yi) / (yj - yi) + xi;
        if (intersect) {
            isInside = !isInside;
        }
    }
    return isInside;
}
function isInside(point, rect) {
    return point[0] >= rect.x && point[0] <= rect.x + rect.width && point[1] >= rect.y && point[1] <= rect.y + rect.height;
}
function safePolygon(_temp) {
    let { restMs = 0, buffer = 0.5, blockPointerEvents = false } = _temp === void 0 ? {} : _temp;
    let timeoutId;
    let isInsideRect = false;
    let hasLanded = false;
    const fn = (_ref)=>{
        let { x, y, placement, elements, onClose, nodeId, tree } = _ref;
        return function onMouseMove(event) {
            function close() {
                clearTimeout(timeoutId);
                onClose();
            }
            clearTimeout(timeoutId);
            if (!elements.domReference || !elements.floating || placement == null || x == null || y == null) {
                return;
            }
            const { clientX, clientY } = event;
            const clientPoint = [
                clientX,
                clientY
            ];
            const target = getTarget(event);
            const isLeave = event.type === 'mouseleave';
            const isOverFloatingEl = contains(elements.floating, target);
            const isOverReferenceEl = contains(elements.domReference, target);
            const refRect = elements.domReference.getBoundingClientRect();
            const rect = elements.floating.getBoundingClientRect();
            const side = placement.split('-')[0];
            const cursorLeaveFromRight = x > rect.right - rect.width / 2;
            const cursorLeaveFromBottom = y > rect.bottom - rect.height / 2;
            const isOverReferenceRect = isInside(clientPoint, refRect);
            if (isOverFloatingEl) {
                hasLanded = true;
            }
            if (isOverReferenceEl) {
                hasLanded = false;
            }
            if (isOverReferenceEl && !isLeave) {
                hasLanded = true;
                return;
            }
            // Prevent overlapping floating element from being stuck in an open-close
            // loop: https://github.com/floating-ui/floating-ui/issues/1910
            if (isLeave && isElement(event.relatedTarget) && contains(elements.floating, event.relatedTarget)) {
                return;
            }
            // If any nested child is open, abort.
            if (tree && getChildren(tree.nodesRef.current, nodeId).some((_ref2)=>{
                let { context } = _ref2;
                return context == null ? void 0 : context.open;
            })) {
                return;
            }
            // If the pointer is leaving from the opposite side, the "buffer" logic
            // creates a point where the floating element remains open, but should be
            // ignored.
            // A constant of 1 handles floating point rounding errors.
            if (side === 'top' && y >= refRect.bottom - 1 || side === 'bottom' && y <= refRect.top + 1 || side === 'left' && x >= refRect.right - 1 || side === 'right' && x <= refRect.left + 1) {
                return close();
            }
            // Ignore when the cursor is within the rectangular trough between the
            // two elements. Since the triangle is created from the cursor point,
            // which can start beyond the ref element's edge, traversing back and
            // forth from the ref to the floating element can cause it to close. This
            // ensures it always remains open in that case.
            let rectPoly = [];
            switch(side){
                case 'top':
                    rectPoly = [
                        [
                            rect.left,
                            refRect.top + 1
                        ],
                        [
                            rect.left,
                            rect.bottom - 1
                        ],
                        [
                            rect.right,
                            rect.bottom - 1
                        ],
                        [
                            rect.right,
                            refRect.top + 1
                        ]
                    ];
                    isInsideRect = clientX >= rect.left && clientX <= rect.right && clientY >= rect.top && clientY <= refRect.top + 1;
                    break;
                case 'bottom':
                    rectPoly = [
                        [
                            rect.left,
                            rect.top + 1
                        ],
                        [
                            rect.left,
                            refRect.bottom - 1
                        ],
                        [
                            rect.right,
                            refRect.bottom - 1
                        ],
                        [
                            rect.right,
                            rect.top + 1
                        ]
                    ];
                    isInsideRect = clientX >= rect.left && clientX <= rect.right && clientY >= refRect.bottom - 1 && clientY <= rect.bottom;
                    break;
                case 'left':
                    rectPoly = [
                        [
                            rect.right - 1,
                            rect.bottom
                        ],
                        [
                            rect.right - 1,
                            rect.top
                        ],
                        [
                            refRect.left + 1,
                            rect.top
                        ],
                        [
                            refRect.left + 1,
                            rect.bottom
                        ]
                    ];
                    isInsideRect = clientX >= rect.left && clientX <= refRect.left + 1 && clientY >= rect.top && clientY <= rect.bottom;
                    break;
                case 'right':
                    rectPoly = [
                        [
                            refRect.right - 1,
                            rect.bottom
                        ],
                        [
                            refRect.right - 1,
                            rect.top
                        ],
                        [
                            rect.left + 1,
                            rect.top
                        ],
                        [
                            rect.left + 1,
                            rect.bottom
                        ]
                    ];
                    isInsideRect = clientX >= refRect.right - 1 && clientX <= rect.right && clientY >= rect.top && clientY <= rect.bottom;
                    break;
            }
            function getPolygon(_ref3) {
                let [x, y] = _ref3;
                const isFloatingWider = rect.width > refRect.width;
                const isFloatingTaller = rect.height > refRect.height;
                switch(side){
                    case 'top':
                        {
                            const cursorPointOne = [
                                isFloatingWider ? x + buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4,
                                y + buffer + 1
                            ];
                            const cursorPointTwo = [
                                isFloatingWider ? x - buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4,
                                y + buffer + 1
                            ];
                            const commonPoints = [
                                [
                                    rect.left,
                                    cursorLeaveFromRight ? rect.bottom - buffer : isFloatingWider ? rect.bottom - buffer : rect.top
                                ],
                                [
                                    rect.right,
                                    cursorLeaveFromRight ? isFloatingWider ? rect.bottom - buffer : rect.top : rect.bottom - buffer
                                ]
                            ];
                            return [
                                cursorPointOne,
                                cursorPointTwo,
                                ...commonPoints
                            ];
                        }
                    case 'bottom':
                        {
                            const cursorPointOne = [
                                isFloatingWider ? x + buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4,
                                y - buffer
                            ];
                            const cursorPointTwo = [
                                isFloatingWider ? x - buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4,
                                y - buffer
                            ];
                            const commonPoints = [
                                [
                                    rect.left,
                                    cursorLeaveFromRight ? rect.top + buffer : isFloatingWider ? rect.top + buffer : rect.bottom
                                ],
                                [
                                    rect.right,
                                    cursorLeaveFromRight ? isFloatingWider ? rect.top + buffer : rect.bottom : rect.top + buffer
                                ]
                            ];
                            return [
                                cursorPointOne,
                                cursorPointTwo,
                                ...commonPoints
                            ];
                        }
                    case 'left':
                        {
                            const cursorPointOne = [
                                x + buffer + 1,
                                isFloatingTaller ? y + buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4
                            ];
                            const cursorPointTwo = [
                                x + buffer + 1,
                                isFloatingTaller ? y - buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4
                            ];
                            const commonPoints = [
                                [
                                    cursorLeaveFromBottom ? rect.right - buffer : isFloatingTaller ? rect.right - buffer : rect.left,
                                    rect.top
                                ],
                                [
                                    cursorLeaveFromBottom ? isFloatingTaller ? rect.right - buffer : rect.left : rect.right - buffer,
                                    rect.bottom
                                ]
                            ];
                            return [
                                ...commonPoints,
                                cursorPointOne,
                                cursorPointTwo
                            ];
                        }
                    case 'right':
                        {
                            const cursorPointOne = [
                                x - buffer,
                                isFloatingTaller ? y + buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4
                            ];
                            const cursorPointTwo = [
                                x - buffer,
                                isFloatingTaller ? y - buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4
                            ];
                            const commonPoints = [
                                [
                                    cursorLeaveFromBottom ? rect.left + buffer : isFloatingTaller ? rect.left + buffer : rect.right,
                                    rect.top
                                ],
                                [
                                    cursorLeaveFromBottom ? isFloatingTaller ? rect.left + buffer : rect.right : rect.left + buffer,
                                    rect.bottom
                                ]
                            ];
                            return [
                                cursorPointOne,
                                cursorPointTwo,
                                ...commonPoints
                            ];
                        }
                }
            }
            const poly = isInsideRect ? rectPoly : getPolygon([
                x,
                y
            ]);
            if (isInsideRect) {
                return;
            } else if (hasLanded && !isOverReferenceRect) {
                return close();
            }
            if (!isPointInPolygon([
                clientX,
                clientY
            ], poly)) {
                close();
            } else if (restMs && !hasLanded) {
                timeoutId = setTimeout(close, restMs);
            }
        };
    };
    fn.__options = {
        blockPointerEvents
    };
    return fn;
}
function useFloating(options) {
    if (options === void 0) {
        options = {};
    }
    const { open = false, onOpenChange: unstable_onOpenChange, nodeId } = options;
    const position = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2d$dom$2f$dist$2f$floating$2d$ui$2e$react$2d$dom$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useFloating"](options);
    const tree = useFloatingTree();
    const domReferenceRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(null);
    const dataRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef({});
    const events = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useState(()=>createPubSub())[0];
    const [domReference, setDomReference] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useState(null);
    const setPositionReference = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useCallback((node)=>{
        const positionReference = isElement(node) ? {
            getBoundingClientRect: ()=>node.getBoundingClientRect(),
            contextElement: node
        } : node;
        position.refs.setReference(positionReference);
    }, [
        position.refs
    ]);
    const setReference = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useCallback((node)=>{
        if (isElement(node) || node === null) {
            domReferenceRef.current = node;
            setDomReference(node);
        }
        // Backwards-compatibility for passing a virtual element to `reference`
        // after it has set the DOM reference.
        if (isElement(position.refs.reference.current) || position.refs.reference.current === null || // Don't allow setting virtual elements using the old technique back to
        // `null` to support `positionReference` + an unstable `reference`
        // callback ref.
        node !== null && !isElement(node)) {
            position.refs.setReference(node);
        }
    }, [
        position.refs
    ]);
    const refs = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useMemo(()=>({
            ...position.refs,
            setReference,
            setPositionReference,
            domReference: domReferenceRef
        }), [
        position.refs,
        setReference,
        setPositionReference
    ]);
    const elements = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useMemo(()=>({
            ...position.elements,
            domReference: domReference
        }), [
        position.elements,
        domReference
    ]);
    const onOpenChange = useEvent(unstable_onOpenChange);
    const context = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useMemo(()=>({
            ...position,
            refs,
            elements,
            dataRef,
            nodeId,
            events,
            open,
            onOpenChange
        }), [
        position,
        nodeId,
        events,
        open,
        onOpenChange,
        refs,
        elements
    ]);
    index(()=>{
        const node = tree == null ? void 0 : tree.nodesRef.current.find((node)=>node.id === nodeId);
        if (node) {
            node.context = context;
        }
    });
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useMemo(()=>({
            ...position,
            context,
            refs,
            reference: setReference,
            positionReference: setPositionReference
        }), [
        position,
        refs,
        context,
        setReference,
        setPositionReference
    ]);
}
function mergeProps(userProps, propsList, elementKey) {
    const map = new Map();
    return {
        ...elementKey === 'floating' && {
            tabIndex: -1
        },
        ...userProps,
        ...propsList.map((value)=>value ? value[elementKey] : null).concat(userProps).reduce((acc, props)=>{
            if (!props) {
                return acc;
            }
            Object.entries(props).forEach((_ref)=>{
                let [key, value] = _ref;
                if (key.indexOf('on') === 0) {
                    if (!map.has(key)) {
                        map.set(key, []);
                    }
                    if (typeof value === 'function') {
                        var _map$get;
                        (_map$get = map.get(key)) == null ? void 0 : _map$get.push(value);
                        acc[key] = function() {
                            var _map$get2;
                            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                                args[_key] = arguments[_key];
                            }
                            (_map$get2 = map.get(key)) == null ? void 0 : _map$get2.forEach((fn)=>fn(...args));
                        };
                    }
                } else {
                    acc[key] = value;
                }
            });
            return acc;
        }, {})
    };
}
const useInteractions = function(propsList) {
    if (propsList === void 0) {
        propsList = [];
    }
    // The dependencies are a dynamic array, so we can't use the linter's
    // suggestion to add it to the deps array.
    const deps = propsList;
    const getReferenceProps = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useCallback((userProps)=>mergeProps(userProps, propsList, 'reference'), // eslint-disable-next-line react-hooks/exhaustive-deps
    deps);
    const getFloatingProps = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useCallback((userProps)=>mergeProps(userProps, propsList, 'floating'), // eslint-disable-next-line react-hooks/exhaustive-deps
    deps);
    const getItemProps = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useCallback((userProps)=>mergeProps(userProps, propsList, 'item'), // Granularly check for `item` changes, because the `getItemProps` getter
    // should be as referentially stable as possible since it may be passed as
    // a prop to many components. All `item` key values must therefore be
    // memoized.
    // eslint-disable-next-line react-hooks/exhaustive-deps
    propsList.map((key)=>key == null ? void 0 : key.item));
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useMemo(()=>({
            getReferenceProps,
            getFloatingProps,
            getItemProps
        }), [
        getReferenceProps,
        getFloatingProps,
        getItemProps
    ]);
};
;

})()),
"[project]/node_modules/@material-tailwind/react/node_modules/@floating-ui/react/dist/floating-ui.react.esm.js [app-ssr] (ecmascript) {module evaluation}": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$dom$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__ = __turbopack_import__("[project]/node_modules/@material-tailwind/react/node_modules/@floating-ui/react/dist/floating-ui.react.esm.js [app-ssr] (ecmascript) {locals}");
"__TURBOPACK__ecmascript__hoisting__location__";

})()),
"[project]/node_modules/@material-tailwind/react/node_modules/@floating-ui/react/dist/floating-ui.react.esm.js [app-ssr] (ecmascript) {exports}": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "FloatingDelayGroup": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["FloatingDelayGroup"],
    "FloatingFocusManager": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["FloatingFocusManager"],
    "FloatingNode": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["FloatingNode"],
    "FloatingOverlay": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["FloatingOverlay"],
    "FloatingPortal": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["FloatingPortal"],
    "FloatingTree": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["FloatingTree"],
    "arrow": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2d$dom$2f$dist$2f$floating$2d$ui$2e$react$2d$dom$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["arrow"],
    "autoPlacement": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$dom$2f$dist$2f$floating$2d$ui$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["autoPlacement"],
    "autoUpdate": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$dom$2f$dist$2f$floating$2d$ui$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["autoUpdate"],
    "computePosition": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$dom$2f$dist$2f$floating$2d$ui$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["computePosition"],
    "detectOverflow": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$core$2f$dist$2f$floating$2d$ui$2e$core$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["detectOverflow"],
    "flip": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$dom$2f$dist$2f$floating$2d$ui$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["flip"],
    "getOverflowAncestors": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getOverflowAncestors"],
    "hide": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$dom$2f$dist$2f$floating$2d$ui$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["hide"],
    "inline": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$dom$2f$dist$2f$floating$2d$ui$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["inline"],
    "inner": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["inner"],
    "limitShift": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$dom$2f$dist$2f$floating$2d$ui$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["limitShift"],
    "offset": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$core$2f$dist$2f$floating$2d$ui$2e$core$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["offset"],
    "platform": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$dom$2f$dist$2f$floating$2d$ui$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["platform"],
    "safePolygon": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["safePolygon"],
    "shift": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$dom$2f$dist$2f$floating$2d$ui$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["shift"],
    "size": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$dom$2f$dist$2f$floating$2d$ui$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["size"],
    "useClick": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useClick"],
    "useDelayGroup": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useDelayGroup"],
    "useDelayGroupContext": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useDelayGroupContext"],
    "useDismiss": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useDismiss"],
    "useFloating": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useFloating"],
    "useFloatingNodeId": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useFloatingNodeId"],
    "useFloatingParentNodeId": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useFloatingParentNodeId"],
    "useFloatingPortalNode": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useFloatingPortalNode"],
    "useFloatingTree": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useFloatingTree"],
    "useFocus": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useFocus"],
    "useHover": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useHover"],
    "useId": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useId"],
    "useInnerOffset": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useInnerOffset"],
    "useInteractions": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useInteractions"],
    "useListNavigation": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useListNavigation"],
    "useMergeRefs": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useMergeRefs"],
    "useRole": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useRole"],
    "useTransitionStatus": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useTransitionStatus"],
    "useTransitionStyles": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useTransitionStyles"],
    "useTypeahead": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useTypeahead"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2d$dom$2f$dist$2f$floating$2d$ui$2e$react$2d$dom$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__ = __turbopack_import__("[project]/node_modules/@material-tailwind/react/node_modules/@floating-ui/react/node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.esm.js [app-ssr] (ecmascript) {locals}");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$dom$2f$dist$2f$floating$2d$ui$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__ = __turbopack_import__("[project]/node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs [app-ssr] (ecmascript) {locals}");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$core$2f$dist$2f$floating$2d$ui$2e$core$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__ = __turbopack_import__("[project]/node_modules/@floating-ui/core/dist/floating-ui.core.mjs [app-ssr] (ecmascript) {locals}");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__ = __turbopack_import__("[project]/node_modules/@material-tailwind/react/node_modules/@floating-ui/react/dist/floating-ui.react.esm.js [app-ssr] (ecmascript) {locals}");
"__TURBOPACK__ecmascript__hoisting__location__";

})()),
"[project]/node_modules/@material-tailwind/react/node_modules/@floating-ui/react/dist/floating-ui.react.esm.js [app-ssr] (ecmascript) {facade}": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "FloatingDelayGroup": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["FloatingDelayGroup"],
    "FloatingFocusManager": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["FloatingFocusManager"],
    "FloatingNode": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["FloatingNode"],
    "FloatingOverlay": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["FloatingOverlay"],
    "FloatingPortal": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["FloatingPortal"],
    "FloatingTree": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["FloatingTree"],
    "arrow": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["arrow"],
    "autoPlacement": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["autoPlacement"],
    "autoUpdate": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["autoUpdate"],
    "computePosition": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["computePosition"],
    "detectOverflow": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["detectOverflow"],
    "flip": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["flip"],
    "getOverflowAncestors": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["getOverflowAncestors"],
    "hide": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["hide"],
    "inline": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["inline"],
    "inner": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["inner"],
    "limitShift": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["limitShift"],
    "offset": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["offset"],
    "platform": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["platform"],
    "safePolygon": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["safePolygon"],
    "shift": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["shift"],
    "size": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["size"],
    "useClick": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["useClick"],
    "useDelayGroup": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["useDelayGroup"],
    "useDelayGroupContext": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["useDelayGroupContext"],
    "useDismiss": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["useDismiss"],
    "useFloating": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["useFloating"],
    "useFloatingNodeId": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["useFloatingNodeId"],
    "useFloatingParentNodeId": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["useFloatingParentNodeId"],
    "useFloatingPortalNode": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["useFloatingPortalNode"],
    "useFloatingTree": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["useFloatingTree"],
    "useFocus": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["useFocus"],
    "useHover": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["useHover"],
    "useId": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["useId"],
    "useInnerOffset": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["useInnerOffset"],
    "useInteractions": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["useInteractions"],
    "useListNavigation": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["useListNavigation"],
    "useMergeRefs": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["useMergeRefs"],
    "useRole": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["useRole"],
    "useTransitionStatus": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["useTransitionStatus"],
    "useTransitionStyles": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["useTransitionStyles"],
    "useTypeahead": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["useTypeahead"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$module__evaluation$7d$__ = __turbopack_import__("[project]/node_modules/@material-tailwind/react/node_modules/@floating-ui/react/dist/floating-ui.react.esm.js [app-ssr] (ecmascript) {module evaluation}");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$material$2d$tailwind$2f$react$2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__ = __turbopack_import__("[project]/node_modules/@material-tailwind/react/node_modules/@floating-ui/react/dist/floating-ui.react.esm.js [app-ssr] (ecmascript) {exports}");
"__TURBOPACK__ecmascript__hoisting__location__";

})()),
"[project]/node_modules/@floating-ui/react/dist/floating-ui.react.esm.js [app-ssr] (ecmascript) {locals}": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "Composite": ()=>Composite,
    "CompositeItem": ()=>CompositeItem,
    "FloatingArrow": ()=>FloatingArrow,
    "FloatingDelayGroup": ()=>FloatingDelayGroup,
    "FloatingFocusManager": ()=>FloatingFocusManager,
    "FloatingList": ()=>FloatingList,
    "FloatingNode": ()=>FloatingNode,
    "FloatingOverlay": ()=>FloatingOverlay,
    "FloatingPortal": ()=>FloatingPortal,
    "FloatingTree": ()=>FloatingTree,
    "inner": ()=>inner,
    "safePolygon": ()=>safePolygon,
    "useClick": ()=>useClick,
    "useClientPoint": ()=>useClientPoint,
    "useDelayGroup": ()=>useDelayGroup,
    "useDelayGroupContext": ()=>useDelayGroupContext,
    "useDismiss": ()=>useDismiss,
    "useFloating": ()=>useFloating,
    "useFloatingNodeId": ()=>useFloatingNodeId,
    "useFloatingParentNodeId": ()=>useFloatingParentNodeId,
    "useFloatingPortalNode": ()=>useFloatingPortalNode,
    "useFloatingTree": ()=>useFloatingTree,
    "useFocus": ()=>useFocus,
    "useHover": ()=>useHover,
    "useId": ()=>useId,
    "useInnerOffset": ()=>useInnerOffset,
    "useInteractions": ()=>useInteractions,
    "useListItem": ()=>useListItem,
    "useListNavigation": ()=>useListNavigation,
    "useMergeRefs": ()=>useMergeRefs,
    "useRole": ()=>useRole,
    "useTransitionStatus": ()=>useTransitionStatus,
    "useTransitionStyles": ()=>useTransitionStyles,
    "useTypeahead": ()=>useTypeahead
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@floating-ui/react/dist/floating-ui.react.utils.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$dom$2f$dist$2f$floating$2d$ui$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__ = __turbopack_import__("[project]/node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs [app-ssr] (ecmascript) {locals}");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tabbable$2f$dist$2f$index$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/tabbable/dist/index.esm.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$dom$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2d$dom$2f$dist$2f$floating$2d$ui$2e$react$2d$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__ = __turbopack_import__("[project]/node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs [app-ssr] (ecmascript) {locals}");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$core$2f$dist$2f$floating$2d$ui$2e$core$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__ = __turbopack_import__("[project]/node_modules/@floating-ui/core/dist/floating-ui.core.mjs [app-ssr] (ecmascript) {locals}");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
;
;
;
;
;
;
/**
 * Merges an array of refs into a single memoized callback ref or `null`.
 * @see https://floating-ui.com/docs/react-utils#usemergerefs
 */ function useMergeRefs(refs) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useMemo(()=>{
        if (refs.every((ref)=>ref == null)) {
            return null;
        }
        return (value)=>{
            refs.forEach((ref)=>{
                if (typeof ref === 'function') {
                    ref(value);
                } else if (ref != null) {
                    ref.current = value;
                }
            });
        };
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, refs);
}
// https://github.com/mui/material-ui/issues/41190#issuecomment-2040873379
const SafeReact = {
    ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__
};
const useInsertionEffect = SafeReact.useInsertionEffect;
const useSafeInsertionEffect = useInsertionEffect || ((fn)=>fn());
function useEffectEvent(callback) {
    const ref = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(()=>{
        if ("TURBOPACK compile-time truthy", 1) {
            throw new Error('Cannot call an event handler while rendering.');
        }
    });
    useSafeInsertionEffect(()=>{
        ref.current = callback;
    });
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useCallback(function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        return ref.current == null ? void 0 : ref.current(...args);
    }, []);
}
const ARROW_UP = 'ArrowUp';
const ARROW_DOWN = 'ArrowDown';
const ARROW_LEFT = 'ArrowLeft';
const ARROW_RIGHT = 'ArrowRight';
function isDifferentRow(index, cols, prevRow) {
    return Math.floor(index / cols) !== prevRow;
}
function isIndexOutOfBounds(listRef, index) {
    return index < 0 || index >= listRef.current.length;
}
function getMinIndex(listRef, disabledIndices) {
    return findNonDisabledIndex(listRef, {
        disabledIndices
    });
}
function getMaxIndex(listRef, disabledIndices) {
    return findNonDisabledIndex(listRef, {
        decrement: true,
        startingIndex: listRef.current.length,
        disabledIndices
    });
}
function findNonDisabledIndex(listRef, _temp) {
    let { startingIndex = -1, decrement = false, disabledIndices, amount = 1 } = _temp === void 0 ? {} : _temp;
    const list = listRef.current;
    const isDisabledIndex = disabledIndices ? (index)=>disabledIndices.includes(index) : (index)=>{
        const element = list[index];
        return element == null || element.hasAttribute('disabled') || element.getAttribute('aria-disabled') === 'true';
    };
    let index = startingIndex;
    do {
        index += decrement ? -amount : amount;
    }while (index >= 0 && index <= list.length - 1 && isDisabledIndex(index))
    return index;
}
function getGridNavigatedIndex(elementsRef, _ref) {
    let { event, orientation, loop, cols, disabledIndices, minIndex, maxIndex, prevIndex, stopEvent: stop = false } = _ref;
    let nextIndex = prevIndex;
    if (event.key === ARROW_UP) {
        stop && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stopEvent"](event);
        if (prevIndex === -1) {
            nextIndex = maxIndex;
        } else {
            nextIndex = findNonDisabledIndex(elementsRef, {
                startingIndex: nextIndex,
                amount: cols,
                decrement: true,
                disabledIndices
            });
            if (loop && (prevIndex - cols < minIndex || nextIndex < 0)) {
                const col = prevIndex % cols;
                const maxCol = maxIndex % cols;
                const offset = maxIndex - (maxCol - col);
                if (maxCol === col) {
                    nextIndex = maxIndex;
                } else {
                    nextIndex = maxCol > col ? offset : offset - cols;
                }
            }
        }
        if (isIndexOutOfBounds(elementsRef, nextIndex)) {
            nextIndex = prevIndex;
        }
    }
    if (event.key === ARROW_DOWN) {
        stop && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stopEvent"](event);
        if (prevIndex === -1) {
            nextIndex = minIndex;
        } else {
            nextIndex = findNonDisabledIndex(elementsRef, {
                startingIndex: prevIndex,
                amount: cols,
                disabledIndices
            });
            if (loop && prevIndex + cols > maxIndex) {
                nextIndex = findNonDisabledIndex(elementsRef, {
                    startingIndex: prevIndex % cols - cols,
                    amount: cols,
                    disabledIndices
                });
            }
        }
        if (isIndexOutOfBounds(elementsRef, nextIndex)) {
            nextIndex = prevIndex;
        }
    }
    // Remains on the same row/column.
    if (orientation === 'both') {
        const prevRow = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["floor"](prevIndex / cols);
        if (event.key === ARROW_RIGHT) {
            stop && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stopEvent"](event);
            if (prevIndex % cols !== cols - 1) {
                nextIndex = findNonDisabledIndex(elementsRef, {
                    startingIndex: prevIndex,
                    disabledIndices
                });
                if (loop && isDifferentRow(nextIndex, cols, prevRow)) {
                    nextIndex = findNonDisabledIndex(elementsRef, {
                        startingIndex: prevIndex - prevIndex % cols - 1,
                        disabledIndices
                    });
                }
            } else if (loop) {
                nextIndex = findNonDisabledIndex(elementsRef, {
                    startingIndex: prevIndex - prevIndex % cols - 1,
                    disabledIndices
                });
            }
            if (isDifferentRow(nextIndex, cols, prevRow)) {
                nextIndex = prevIndex;
            }
        }
        if (event.key === ARROW_LEFT) {
            stop && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stopEvent"](event);
            if (prevIndex % cols !== 0) {
                nextIndex = findNonDisabledIndex(elementsRef, {
                    startingIndex: prevIndex,
                    disabledIndices,
                    decrement: true
                });
                if (loop && isDifferentRow(nextIndex, cols, prevRow)) {
                    nextIndex = findNonDisabledIndex(elementsRef, {
                        startingIndex: prevIndex + (cols - prevIndex % cols),
                        decrement: true,
                        disabledIndices
                    });
                }
            } else if (loop) {
                nextIndex = findNonDisabledIndex(elementsRef, {
                    startingIndex: prevIndex + (cols - prevIndex % cols),
                    decrement: true,
                    disabledIndices
                });
            }
            if (isDifferentRow(nextIndex, cols, prevRow)) {
                nextIndex = prevIndex;
            }
        }
        const lastRow = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["floor"](maxIndex / cols) === prevRow;
        if (isIndexOutOfBounds(elementsRef, nextIndex)) {
            if (loop && lastRow) {
                nextIndex = event.key === ARROW_LEFT ? maxIndex : findNonDisabledIndex(elementsRef, {
                    startingIndex: prevIndex - prevIndex % cols - 1,
                    disabledIndices
                });
            } else {
                nextIndex = prevIndex;
            }
        }
    }
    return nextIndex;
}
/** For each cell index, gets the item index that occupies that cell */ function buildCellMap(sizes, cols, dense) {
    const cellMap = [];
    let startIndex = 0;
    sizes.forEach((_ref2, index)=>{
        let { width, height } = _ref2;
        if (width > cols) {
            if ("TURBOPACK compile-time truthy", 1) {
                throw new Error("[Floating UI]: Invalid grid - item width at index " + index + " is greater than grid columns");
            }
        }
        let itemPlaced = false;
        if (dense) {
            startIndex = 0;
        }
        while(!itemPlaced){
            const targetCells = [];
            for(let i = 0; i < width; i++){
                for(let j = 0; j < height; j++){
                    targetCells.push(startIndex + i + j * cols);
                }
            }
            if (startIndex % cols + width <= cols && targetCells.every((cell)=>cellMap[cell] == null)) {
                targetCells.forEach((cell)=>{
                    cellMap[cell] = index;
                });
                itemPlaced = true;
            } else {
                startIndex++;
            }
        }
    });
    // convert into a non-sparse array
    return [
        ...cellMap
    ];
}
/** Gets cell index of an item's corner or -1 when index is -1. */ function getCellIndexOfCorner(index, sizes, cellMap, cols, corner) {
    if (index === -1) return -1;
    const firstCellIndex = cellMap.indexOf(index);
    switch(corner){
        case 'tl':
            return firstCellIndex;
        case 'tr':
            return firstCellIndex + sizes[index].width - 1;
        case 'bl':
            return firstCellIndex + (sizes[index].height - 1) * cols;
        case 'br':
            return cellMap.lastIndexOf(index);
    }
}
/** Gets all cell indices that correspond to the specified indices */ function getCellIndices(indices, cellMap) {
    return cellMap.flatMap((index, cellIndex)=>indices.includes(index) ? [
            cellIndex
        ] : []);
}
let rafId = 0;
function enqueueFocus(el, options) {
    if (options === void 0) {
        options = {};
    }
    const { preventScroll = false, cancelPrevious = true, sync = false } = options;
    cancelPrevious && cancelAnimationFrame(rafId);
    const exec = ()=>el == null ? void 0 : el.focus({
            preventScroll
        });
    if (sync) {
        exec();
    } else {
        rafId = requestAnimationFrame(exec);
    }
}
var index = typeof document !== 'undefined' ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useLayoutEffect"] : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEffect"];
function sortByDocumentPosition(a, b) {
    const position = a.compareDocumentPosition(b);
    if (position & Node.DOCUMENT_POSITION_FOLLOWING || position & Node.DOCUMENT_POSITION_CONTAINED_BY) {
        return -1;
    }
    if (position & Node.DOCUMENT_POSITION_PRECEDING || position & Node.DOCUMENT_POSITION_CONTAINS) {
        return 1;
    }
    return 0;
}
function areMapsEqual(map1, map2) {
    if (map1.size !== map2.size) {
        return false;
    }
    for (const [key, value] of map1.entries()){
        if (value !== map2.get(key)) {
            return false;
        }
    }
    return true;
}
const FloatingListContext = /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createContext({
    register: ()=>{},
    unregister: ()=>{},
    map: /*#__PURE__*/ new Map(),
    elementsRef: {
        current: []
    }
});
/**
 * Provides context for a list of items within the floating element.
 * @see https://floating-ui.com/docs/FloatingList
 */ function FloatingList(props) {
    const { children, elementsRef, labelsRef } = props;
    const [map, setMap] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useState(()=>new Map());
    const register = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useCallback((node)=>{
        setMap((prevMap)=>new Map(prevMap).set(node, null));
    }, []);
    const unregister = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useCallback((node)=>{
        setMap((prevMap)=>{
            const map = new Map(prevMap);
            map.delete(node);
            return map;
        });
    }, []);
    index(()=>{
        const newMap = new Map(map);
        const nodes = Array.from(newMap.keys()).sort(sortByDocumentPosition);
        nodes.forEach((node, index)=>{
            newMap.set(node, index);
        });
        if (!areMapsEqual(map, newMap)) {
            setMap(newMap);
        }
    }, [
        map
    ]);
    return /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createElement(FloatingListContext.Provider, {
        value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useMemo(()=>({
                register,
                unregister,
                map,
                elementsRef,
                labelsRef
            }), [
            register,
            unregister,
            map,
            elementsRef,
            labelsRef
        ])
    }, children);
}
/**
 * Used to register a list item and its index (DOM position) in the
 * `FloatingList`.
 * @see https://floating-ui.com/docs/FloatingList#uselistitem
 */ function useListItem(props) {
    if (props === void 0) {
        props = {};
    }
    const { label } = props;
    const { register, unregister, map, elementsRef, labelsRef } = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useContext(FloatingListContext);
    const [index$1, setIndex] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useState(null);
    const componentRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(null);
    const ref = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useCallback((node)=>{
        componentRef.current = node;
        if (index$1 !== null) {
            elementsRef.current[index$1] = node;
            if (labelsRef) {
                var _node$textContent;
                const isLabelDefined = label !== undefined;
                labelsRef.current[index$1] = isLabelDefined ? label : (_node$textContent = node == null ? void 0 : node.textContent) != null ? _node$textContent : null;
            }
        }
    }, [
        index$1,
        elementsRef,
        labelsRef,
        label
    ]);
    index(()=>{
        const node = componentRef.current;
        if (node) {
            register(node);
            return ()=>{
                unregister(node);
            };
        }
    }, [
        register,
        unregister
    ]);
    index(()=>{
        const index = componentRef.current ? map.get(componentRef.current) : null;
        if (index != null) {
            setIndex(index);
        }
    }, [
        map
    ]);
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useMemo(()=>({
            ref,
            index: index$1 == null ? -1 : index$1
        }), [
        index$1,
        ref
    ]);
}
function renderJsx(render, computedProps) {
    if (typeof render === 'function') {
        return render(computedProps);
    }
    if (render) {
        return /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.cloneElement(render, computedProps);
    }
    return /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createElement("div", computedProps);
}
const CompositeContext = /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createContext({
    activeIndex: 0,
    onNavigate: ()=>{}
});
const horizontalKeys = [
    ARROW_LEFT,
    ARROW_RIGHT
];
const verticalKeys = [
    ARROW_UP,
    ARROW_DOWN
];
const allKeys = [
    ...horizontalKeys,
    ...verticalKeys
];
/**
 * Creates a single tab stop whose items are navigated by arrow keys, which
 * provides list navigation outside of floating element contexts.
 *
 * This is useful to enable navigation of a list of items that aren’t part of a
 * floating element. A menubar is an example of a composite, with each reference
 * element being an item.
 * @see https://floating-ui.com/docs/Composite
 */ const Composite = /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.forwardRef(function Composite(props, forwardedRef) {
    const { render, orientation = 'both', loop = true, cols = 1, disabledIndices = [], activeIndex: externalActiveIndex, onNavigate: externalSetActiveIndex, itemSizes, dense = false, ...domProps } = props;
    const [internalActiveIndex, internalSetActiveIndex] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useState(0);
    const activeIndex = externalActiveIndex != null ? externalActiveIndex : internalActiveIndex;
    const onNavigate = useEffectEvent(externalSetActiveIndex != null ? externalSetActiveIndex : internalSetActiveIndex);
    const elementsRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef([]);
    const renderElementProps = render && typeof render !== 'function' ? render.props : {};
    const contextValue = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useMemo(()=>({
            activeIndex,
            onNavigate
        }), [
        activeIndex,
        onNavigate
    ]);
    const isGrid = cols > 1;
    function handleKeyDown(event) {
        if (!allKeys.includes(event.key)) return;
        let nextIndex = activeIndex;
        if (isGrid) {
            const sizes = itemSizes || Array.from({
                length: elementsRef.current.length
            }, ()=>({
                    width: 1,
                    height: 1
                }));
            // To calculate movements on the grid, we use hypothetical cell indices
            // as if every item was 1x1, then convert back to real indices.
            const cellMap = buildCellMap(sizes, cols, dense);
            const minGridIndex = cellMap.findIndex((index)=>index != null && !disabledIndices.includes(index));
            // last enabled index
            const maxGridIndex = cellMap.reduce((foundIndex, index, cellIndex)=>index != null && !(disabledIndices != null && disabledIndices.includes(index)) ? cellIndex : foundIndex, -1);
            nextIndex = cellMap[getGridNavigatedIndex({
                current: cellMap.map((itemIndex)=>itemIndex ? elementsRef.current[itemIndex] : null)
            }, {
                event,
                orientation,
                loop,
                cols,
                // treat undefined (empty grid spaces) as disabled indices so we
                // don't end up in them
                disabledIndices: getCellIndices([
                    ...disabledIndices,
                    undefined
                ], cellMap),
                minIndex: minGridIndex,
                maxIndex: maxGridIndex,
                prevIndex: getCellIndexOfCorner(activeIndex, sizes, cellMap, cols, // use a corner matching the edge closest to the direction we're
                // moving in so we don't end up in the same item. Prefer
                // top/left over bottom/right.
                event.key === ARROW_DOWN ? 'bl' : event.key === ARROW_RIGHT ? 'tr' : 'tl')
            })]; // navigated cell will never be nullish
        }
        const minIndex = getMinIndex(elementsRef, disabledIndices);
        const maxIndex = getMaxIndex(elementsRef, disabledIndices);
        const toEndKeys = {
            horizontal: [
                ARROW_RIGHT
            ],
            vertical: [
                ARROW_DOWN
            ],
            both: [
                ARROW_RIGHT,
                ARROW_DOWN
            ]
        }[orientation];
        const toStartKeys = {
            horizontal: [
                ARROW_LEFT
            ],
            vertical: [
                ARROW_UP
            ],
            both: [
                ARROW_LEFT,
                ARROW_UP
            ]
        }[orientation];
        const preventedKeys = isGrid ? allKeys : ({
            horizontal: horizontalKeys,
            vertical: verticalKeys,
            both: allKeys
        })[orientation];
        if (nextIndex === activeIndex && [
            ...toEndKeys,
            ...toStartKeys
        ].includes(event.key)) {
            if (loop && nextIndex === maxIndex && toEndKeys.includes(event.key)) {
                nextIndex = minIndex;
            } else if (loop && nextIndex === minIndex && toStartKeys.includes(event.key)) {
                nextIndex = maxIndex;
            } else {
                nextIndex = findNonDisabledIndex(elementsRef, {
                    startingIndex: nextIndex,
                    decrement: toStartKeys.includes(event.key),
                    disabledIndices
                });
            }
        }
        if (nextIndex !== activeIndex && !isIndexOutOfBounds(elementsRef, nextIndex)) {
            event.stopPropagation();
            if (preventedKeys.includes(event.key)) {
                event.preventDefault();
            }
            onNavigate(nextIndex);
            // Wait for FocusManager `returnFocus` to execute.
            queueMicrotask(()=>{
                enqueueFocus(elementsRef.current[nextIndex]);
            });
        }
    }
    const computedProps = {
        ...domProps,
        ...renderElementProps,
        ref: forwardedRef,
        'aria-orientation': orientation === 'both' ? undefined : orientation,
        onKeyDown (e) {
            domProps.onKeyDown == null || domProps.onKeyDown(e);
            renderElementProps.onKeyDown == null || renderElementProps.onKeyDown(e);
            handleKeyDown(e);
        }
    };
    return /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createElement(CompositeContext.Provider, {
        value: contextValue
    }, /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createElement(FloatingList, {
        elementsRef: elementsRef
    }, renderJsx(render, computedProps)));
});
/**
 * @see https://floating-ui.com/docs/Composite
 */ const CompositeItem = /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.forwardRef(function CompositeItem(props, forwardedRef) {
    const { render, ...domProps } = props;
    const renderElementProps = render && typeof render !== 'function' ? render.props : {};
    const { activeIndex, onNavigate } = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useContext(CompositeContext);
    const { ref, index } = useListItem();
    const mergedRef = useMergeRefs([
        ref,
        forwardedRef,
        renderElementProps.ref
    ]);
    const isActive = activeIndex === index;
    const computedProps = {
        ...domProps,
        ...renderElementProps,
        ref: mergedRef,
        tabIndex: isActive ? 0 : -1,
        'data-active': isActive ? '' : undefined,
        onFocus (e) {
            domProps.onFocus == null || domProps.onFocus(e);
            renderElementProps.onFocus == null || renderElementProps.onFocus(e);
            onNavigate(index);
        }
    };
    return renderJsx(render, computedProps);
});
function _extends() {
    _extends = ("TURBOPACK compile-time truthy", 1) ? Object.assign.bind() : ("TURBOPACK unreachable", undefined);
    return _extends.apply(this, arguments);
}
let serverHandoffComplete = false;
let count = 0;
const genId = ()=>// on <React 18
    "floating-ui-" + Math.random().toString(36).slice(2, 6) + count++;
function useFloatingId() {
    const [id, setId] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useState(()=>serverHandoffComplete ? genId() : undefined);
    index(()=>{
        if (id == null) {
            setId(genId());
        }
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useEffect(()=>{
        serverHandoffComplete = true;
    }, []);
    return id;
}
const useReactId = SafeReact.useId;
/**
 * Uses React 18's built-in `useId()` when available, or falls back to a
 * slightly less performant (requiring a double render) implementation for
 * earlier React versions.
 * @see https://floating-ui.com/docs/react-utils#useid
 */ const useId = useReactId || useFloatingId;
let devMessageSet;
if ("TURBOPACK compile-time truthy", 1) {
    devMessageSet = /*#__PURE__*/ new Set();
}
function warn() {
    var _devMessageSet;
    for(var _len = arguments.length, messages = new Array(_len), _key = 0; _key < _len; _key++){
        messages[_key] = arguments[_key];
    }
    const message = "Floating UI: " + messages.join(' ');
    if (!((_devMessageSet = devMessageSet) != null && _devMessageSet.has(message))) {
        var _devMessageSet2;
        (_devMessageSet2 = devMessageSet) == null || _devMessageSet2.add(message);
        console.warn(message);
    }
}
function error() {
    var _devMessageSet3;
    for(var _len2 = arguments.length, messages = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++){
        messages[_key2] = arguments[_key2];
    }
    const message = "Floating UI: " + messages.join(' ');
    if (!((_devMessageSet3 = devMessageSet) != null && _devMessageSet3.has(message))) {
        var _devMessageSet4;
        (_devMessageSet4 = devMessageSet) == null || _devMessageSet4.add(message);
        console.error(message);
    }
}
/**
 * Renders a pointing arrow triangle.
 * @see https://floating-ui.com/docs/FloatingArrow
 */ const FloatingArrow = /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.forwardRef(function FloatingArrow(props, ref) {
    const { context: { placement, elements: { floating }, middlewareData: { arrow } }, width = 14, height = 7, tipRadius = 0, strokeWidth = 0, staticOffset, stroke, d, style: { transform, ...restStyle } = {}, ...rest } = props;
    if ("TURBOPACK compile-time truthy", 1) {
        if (!ref) {
            warn('The `ref` prop is required for `FloatingArrow`.');
        }
    }
    const clipPathId = useId();
    if (!floating) {
        return null;
    }
    // Strokes must be double the border width, this ensures the stroke's width
    // works as you'd expect.
    const computedStrokeWidth = strokeWidth * 2;
    const halfStrokeWidth = computedStrokeWidth / 2;
    const svgX = width / 2 * (tipRadius / -8 + 1);
    const svgY = height / 2 * tipRadius / 4;
    const [side, alignment] = placement.split('-');
    const isRTL = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$dom$2f$dist$2f$floating$2d$ui$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["platform"].isRTL(floating);
    const isCustomShape = !!d;
    const isVerticalSide = side === 'top' || side === 'bottom';
    const yOffsetProp = staticOffset && alignment === 'end' ? 'bottom' : 'top';
    let xOffsetProp = staticOffset && alignment === 'end' ? 'right' : 'left';
    if (staticOffset && isRTL) {
        xOffsetProp = alignment === 'end' ? 'left' : 'right';
    }
    const arrowX = (arrow == null ? void 0 : arrow.x) != null ? staticOffset || arrow.x : '';
    const arrowY = (arrow == null ? void 0 : arrow.y) != null ? staticOffset || arrow.y : '';
    const dValue = d || 'M0,0' + (" H" + width) + (" L" + (width - svgX) + "," + (height - svgY)) + (" Q" + width / 2 + "," + height + " " + svgX + "," + (height - svgY)) + ' Z';
    const rotation = {
        top: isCustomShape ? 'rotate(180deg)' : '',
        left: isCustomShape ? 'rotate(90deg)' : 'rotate(-90deg)',
        bottom: isCustomShape ? '' : 'rotate(180deg)',
        right: isCustomShape ? 'rotate(-90deg)' : 'rotate(90deg)'
    }[side];
    return /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createElement("svg", _extends({}, rest, {
        "aria-hidden": true,
        ref: ref,
        width: isCustomShape ? width : width + computedStrokeWidth,
        height: width,
        viewBox: "0 0 " + width + " " + (height > width ? height : width),
        style: {
            position: 'absolute',
            pointerEvents: 'none',
            [xOffsetProp]: arrowX,
            [yOffsetProp]: arrowY,
            [side]: isVerticalSide || isCustomShape ? '100%' : "calc(100% - " + computedStrokeWidth / 2 + "px)",
            transform: "" + rotation + (transform != null ? transform : ''),
            ...restStyle
        }
    }), computedStrokeWidth > 0 && /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createElement("path", {
        clipPath: "url(#" + clipPathId + ")",
        fill: "none",
        stroke: stroke,
        strokeWidth: computedStrokeWidth + (d ? 0 : 1),
        d: dValue
    }), /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createElement("path", {
        stroke: computedStrokeWidth && !d ? rest.fill : 'none',
        d: dValue
    }), /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createElement("clipPath", {
        id: clipPathId
    }, /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createElement("rect", {
        x: -halfStrokeWidth,
        y: halfStrokeWidth * (isCustomShape ? -1 : 1),
        width: width + computedStrokeWidth,
        height: width
    })));
});
function createPubSub() {
    const map = new Map();
    return {
        emit (event, data) {
            var _map$get;
            (_map$get = map.get(event)) == null || _map$get.forEach((handler)=>handler(data));
        },
        on (event, listener) {
            map.set(event, [
                ...map.get(event) || [],
                listener
            ]);
        },
        off (event, listener) {
            var _map$get2;
            map.set(event, ((_map$get2 = map.get(event)) == null ? void 0 : _map$get2.filter((l)=>l !== listener)) || []);
        }
    };
}
const FloatingNodeContext = /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createContext(null);
const FloatingTreeContext = /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createContext(null);
/**
 * Returns the parent node id for nested floating elements, if available.
 * Returns `null` for top-level floating elements.
 */ const useFloatingParentNodeId = ()=>{
    var _React$useContext;
    return ((_React$useContext = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useContext(FloatingNodeContext)) == null ? void 0 : _React$useContext.id) || null;
};
/**
 * Returns the nearest floating tree context, if available.
 */ const useFloatingTree = ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useContext(FloatingTreeContext);
/**
 * Registers a node into the `FloatingTree`, returning its id.
 * @see https://floating-ui.com/docs/FloatingTree
 */ function useFloatingNodeId(customParentId) {
    const id = useId();
    const tree = useFloatingTree();
    const reactParentId = useFloatingParentNodeId();
    const parentId = customParentId || reactParentId;
    index(()=>{
        const node = {
            id,
            parentId
        };
        tree == null || tree.addNode(node);
        return ()=>{
            tree == null || tree.removeNode(node);
        };
    }, [
        tree,
        id,
        parentId
    ]);
    return id;
}
/**
 * Provides parent node context for nested floating elements.
 * @see https://floating-ui.com/docs/FloatingTree
 */ function FloatingNode(props) {
    const { children, id } = props;
    const parentId = useFloatingParentNodeId();
    return /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createElement(FloatingNodeContext.Provider, {
        value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useMemo(()=>({
                id,
                parentId
            }), [
            id,
            parentId
        ])
    }, children);
}
/**
 * Provides context for nested floating elements when they are not children of
 * each other on the DOM.
 * This is not necessary in all cases, except when there must be explicit communication between parent and child floating elements. It is necessary for:
 * - The `bubbles` option in the `useDismiss()` Hook
 * - Nested virtual list navigation
 * - Nested floating elements that each open on hover
 * - Custom communication between parent and child floating elements
 * @see https://floating-ui.com/docs/FloatingTree
 */ function FloatingTree(props) {
    const { children } = props;
    const nodesRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef([]);
    const addNode = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useCallback((node)=>{
        nodesRef.current = [
            ...nodesRef.current,
            node
        ];
    }, []);
    const removeNode = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useCallback((node)=>{
        nodesRef.current = nodesRef.current.filter((n)=>n !== node);
    }, []);
    const events = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useState(()=>createPubSub())[0];
    return /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createElement(FloatingTreeContext.Provider, {
        value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useMemo(()=>({
                nodesRef,
                addNode,
                removeNode,
                events
            }), [
            addNode,
            removeNode,
            events
        ])
    }, children);
}
function createAttribute(name) {
    return "data-floating-ui-" + name;
}
function useLatestRef(value) {
    const ref = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useRef"](value);
    index(()=>{
        ref.current = value;
    });
    return ref;
}
const safePolygonIdentifier = /*#__PURE__*/ createAttribute('safe-polygon');
function getDelay(value, prop, pointerType) {
    if (pointerType && !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isMouseLikePointerType"](pointerType)) {
        return 0;
    }
    if (typeof value === 'number') {
        return value;
    }
    return value == null ? void 0 : value[prop];
}
/**
 * Opens the floating element while hovering over the reference element, like
 * CSS `:hover`.
 * @see https://floating-ui.com/docs/useHover
 */ function useHover(context, props) {
    if (props === void 0) {
        props = {};
    }
    const { open, onOpenChange, dataRef, events, elements: { domReference, floating }, refs } = context;
    const { enabled = true, delay = 0, handleClose = null, mouseOnly = false, restMs = 0, move = true } = props;
    const tree = useFloatingTree();
    const parentId = useFloatingParentNodeId();
    const handleCloseRef = useLatestRef(handleClose);
    const delayRef = useLatestRef(delay);
    const pointerTypeRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef();
    const timeoutRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef();
    const handlerRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef();
    const restTimeoutRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef();
    const blockMouseMoveRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(true);
    const performedPointerEventsMutationRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(false);
    const unbindMouseMoveRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(()=>{});
    const isHoverOpen = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useCallback(()=>{
        var _dataRef$current$open;
        const type = (_dataRef$current$open = dataRef.current.openEvent) == null ? void 0 : _dataRef$current$open.type;
        return (type == null ? void 0 : type.includes('mouse')) && type !== 'mousedown';
    }, [
        dataRef
    ]);
    // When closing before opening, clear the delay timeouts to cancel it
    // from showing.
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useEffect(()=>{
        if (!enabled) {
            return;
        }
        function onOpenChange(_ref) {
            let { open } = _ref;
            if (!open) {
                clearTimeout(timeoutRef.current);
                clearTimeout(restTimeoutRef.current);
                blockMouseMoveRef.current = true;
            }
        }
        events.on('openchange', onOpenChange);
        return ()=>{
            events.off('openchange', onOpenChange);
        };
    }, [
        enabled,
        events
    ]);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useEffect(()=>{
        if (!enabled || !handleCloseRef.current || !open) {
            return;
        }
        function onLeave(event) {
            if (isHoverOpen()) {
                onOpenChange(false, event, 'hover');
            }
        }
        const html = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getDocument"](floating).documentElement;
        html.addEventListener('mouseleave', onLeave);
        return ()=>{
            html.removeEventListener('mouseleave', onLeave);
        };
    }, [
        floating,
        open,
        onOpenChange,
        enabled,
        handleCloseRef,
        isHoverOpen
    ]);
    const closeWithDelay = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useCallback(function(event, runElseBranch, reason) {
        if (runElseBranch === void 0) {
            runElseBranch = true;
        }
        if (reason === void 0) {
            reason = 'hover';
        }
        const closeDelay = getDelay(delayRef.current, 'close', pointerTypeRef.current);
        if (closeDelay && !handlerRef.current) {
            clearTimeout(timeoutRef.current);
            timeoutRef.current = setTimeout(()=>onOpenChange(false, event, reason), closeDelay);
        } else if (runElseBranch) {
            clearTimeout(timeoutRef.current);
            onOpenChange(false, event, reason);
        }
    }, [
        delayRef,
        onOpenChange
    ]);
    const cleanupMouseMoveHandler = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useCallback(()=>{
        unbindMouseMoveRef.current();
        handlerRef.current = undefined;
    }, []);
    const clearPointerEvents = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useCallback(()=>{
        if (performedPointerEventsMutationRef.current) {
            const body = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getDocument"](refs.floating.current).body;
            body.style.pointerEvents = '';
            body.removeAttribute(safePolygonIdentifier);
            performedPointerEventsMutationRef.current = false;
        }
    }, [
        refs
    ]);
    // Registering the mouse events on the reference directly to bypass React's
    // delegation system. If the cursor was on a disabled element and then entered
    // the reference (no gap), `mouseenter` doesn't fire in the delegation system.
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useEffect(()=>{
        if (!enabled) {
            return;
        }
        function isClickLikeOpenEvent() {
            return dataRef.current.openEvent ? [
                'click',
                'mousedown'
            ].includes(dataRef.current.openEvent.type) : false;
        }
        function onMouseEnter(event) {
            clearTimeout(timeoutRef.current);
            blockMouseMoveRef.current = false;
            if (mouseOnly && !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isMouseLikePointerType"](pointerTypeRef.current) || restMs > 0 && getDelay(delayRef.current, 'open') === 0) {
                return;
            }
            const openDelay = getDelay(delayRef.current, 'open', pointerTypeRef.current);
            if (openDelay) {
                timeoutRef.current = setTimeout(()=>{
                    onOpenChange(true, event, 'hover');
                }, openDelay);
            } else {
                onOpenChange(true, event, 'hover');
            }
        }
        function onMouseLeave(event) {
            if (isClickLikeOpenEvent()) {
                return;
            }
            unbindMouseMoveRef.current();
            const doc = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getDocument"](floating);
            clearTimeout(restTimeoutRef.current);
            if (handleCloseRef.current) {
                // Prevent clearing `onScrollMouseLeave` timeout.
                if (!open) {
                    clearTimeout(timeoutRef.current);
                }
                handlerRef.current = handleCloseRef.current({
                    ...context,
                    tree,
                    x: event.clientX,
                    y: event.clientY,
                    onClose () {
                        clearPointerEvents();
                        cleanupMouseMoveHandler();
                        closeWithDelay(event, true, 'safe-polygon');
                    }
                });
                const handler = handlerRef.current;
                doc.addEventListener('mousemove', handler);
                unbindMouseMoveRef.current = ()=>{
                    doc.removeEventListener('mousemove', handler);
                };
                return;
            }
            // Allow interactivity without `safePolygon` on touch devices. With a
            // pointer, a short close delay is an alternative, so it should work
            // consistently.
            const shouldClose = pointerTypeRef.current === 'touch' ? !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["contains"](floating, event.relatedTarget) : true;
            if (shouldClose) {
                closeWithDelay(event);
            }
        }
        // Ensure the floating element closes after scrolling even if the pointer
        // did not move.
        // https://github.com/floating-ui/floating-ui/discussions/1692
        function onScrollMouseLeave(event) {
            if (isClickLikeOpenEvent()) {
                return;
            }
            handleCloseRef.current == null || handleCloseRef.current({
                ...context,
                tree,
                x: event.clientX,
                y: event.clientY,
                onClose () {
                    clearPointerEvents();
                    cleanupMouseMoveHandler();
                    closeWithDelay(event);
                }
            })(event);
        }
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isElement"](domReference)) {
            const ref = domReference;
            open && ref.addEventListener('mouseleave', onScrollMouseLeave);
            floating == null || floating.addEventListener('mouseleave', onScrollMouseLeave);
            move && ref.addEventListener('mousemove', onMouseEnter, {
                once: true
            });
            ref.addEventListener('mouseenter', onMouseEnter);
            ref.addEventListener('mouseleave', onMouseLeave);
            return ()=>{
                open && ref.removeEventListener('mouseleave', onScrollMouseLeave);
                floating == null || floating.removeEventListener('mouseleave', onScrollMouseLeave);
                move && ref.removeEventListener('mousemove', onMouseEnter);
                ref.removeEventListener('mouseenter', onMouseEnter);
                ref.removeEventListener('mouseleave', onMouseLeave);
            };
        }
    }, [
        domReference,
        floating,
        enabled,
        context,
        mouseOnly,
        restMs,
        move,
        closeWithDelay,
        cleanupMouseMoveHandler,
        clearPointerEvents,
        onOpenChange,
        open,
        tree,
        delayRef,
        handleCloseRef,
        dataRef
    ]);
    // Block pointer-events of every element other than the reference and floating
    // while the floating element is open and has a `handleClose` handler. Also
    // handles nested floating elements.
    // https://github.com/floating-ui/floating-ui/issues/1722
    index(()=>{
        var _handleCloseRef$curre;
        if (!enabled) {
            return;
        }
        if (open && (_handleCloseRef$curre = handleCloseRef.current) != null && _handleCloseRef$curre.__options.blockPointerEvents && isHoverOpen()) {
            const body = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getDocument"](floating).body;
            body.setAttribute(safePolygonIdentifier, '');
            body.style.pointerEvents = 'none';
            performedPointerEventsMutationRef.current = true;
            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isElement"](domReference) && floating) {
                var _tree$nodesRef$curren;
                const ref = domReference;
                const parentFloating = tree == null || (_tree$nodesRef$curren = tree.nodesRef.current.find((node)=>node.id === parentId)) == null || (_tree$nodesRef$curren = _tree$nodesRef$curren.context) == null ? void 0 : _tree$nodesRef$curren.elements.floating;
                if (parentFloating) {
                    parentFloating.style.pointerEvents = '';
                }
                ref.style.pointerEvents = 'auto';
                floating.style.pointerEvents = 'auto';
                return ()=>{
                    ref.style.pointerEvents = '';
                    floating.style.pointerEvents = '';
                };
            }
        }
    }, [
        enabled,
        open,
        parentId,
        floating,
        domReference,
        tree,
        handleCloseRef,
        isHoverOpen
    ]);
    index(()=>{
        if (!open) {
            pointerTypeRef.current = undefined;
            cleanupMouseMoveHandler();
            clearPointerEvents();
        }
    }, [
        open,
        cleanupMouseMoveHandler,
        clearPointerEvents
    ]);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useEffect(()=>{
        return ()=>{
            cleanupMouseMoveHandler();
            clearTimeout(timeoutRef.current);
            clearTimeout(restTimeoutRef.current);
            clearPointerEvents();
        };
    }, [
        enabled,
        domReference,
        cleanupMouseMoveHandler,
        clearPointerEvents
    ]);
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useMemo(()=>{
        if (!enabled) {
            return {};
        }
        function setPointerRef(event) {
            pointerTypeRef.current = event.pointerType;
        }
        return {
            reference: {
                onPointerDown: setPointerRef,
                onPointerEnter: setPointerRef,
                onMouseMove (event) {
                    function handleMouseMove() {
                        if (!blockMouseMoveRef.current) {
                            onOpenChange(true, event.nativeEvent, 'hover');
                        }
                    }
                    if (mouseOnly && !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isMouseLikePointerType"](pointerTypeRef.current)) {
                        return;
                    }
                    if (open || restMs === 0) {
                        return;
                    }
                    clearTimeout(restTimeoutRef.current);
                    if (pointerTypeRef.current === 'touch') {
                        handleMouseMove();
                    } else {
                        restTimeoutRef.current = setTimeout(handleMouseMove, restMs);
                    }
                }
            },
            floating: {
                onMouseEnter () {
                    clearTimeout(timeoutRef.current);
                },
                onMouseLeave (event) {
                    closeWithDelay(event.nativeEvent, false);
                }
            }
        };
    }, [
        enabled,
        mouseOnly,
        open,
        restMs,
        onOpenChange,
        closeWithDelay
    ]);
}
const NOOP = ()=>{};
const FloatingDelayGroupContext = /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createContext({
    delay: 0,
    initialDelay: 0,
    timeoutMs: 0,
    currentId: null,
    setCurrentId: NOOP,
    setState: NOOP,
    isInstantPhase: false
});
/**
 * @deprecated
 * Use the return value of `useDelayGroup()` instead.
 */ const useDelayGroupContext = ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useContext(FloatingDelayGroupContext);
/**
 * Provides context for a group of floating elements that should share a
 * `delay`.
 * @see https://floating-ui.com/docs/FloatingDelayGroup
 */ const FloatingDelayGroup = (props)=>{
    const { children, delay, timeoutMs = 0 } = props;
    const [state, setState] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useReducer((prev, next)=>({
            ...prev,
            ...next
        }), {
        delay,
        timeoutMs,
        initialDelay: delay,
        currentId: null,
        isInstantPhase: false
    });
    const initialCurrentIdRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(null);
    const setCurrentId = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useCallback((currentId)=>{
        setState({
            currentId
        });
    }, []);
    index(()=>{
        if (state.currentId) {
            if (initialCurrentIdRef.current === null) {
                initialCurrentIdRef.current = state.currentId;
            } else {
                setState({
                    isInstantPhase: true
                });
            }
        } else {
            setState({
                isInstantPhase: false
            });
            initialCurrentIdRef.current = null;
        }
    }, [
        state.currentId
    ]);
    return /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createElement(FloatingDelayGroupContext.Provider, {
        value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useMemo(()=>({
                ...state,
                setState,
                setCurrentId
            }), [
            state,
            setCurrentId
        ])
    }, children);
};
/**
 * Enables grouping when called inside a component that's a child of a
 * `FloatingDelayGroup`.
 * @see https://floating-ui.com/docs/FloatingDelayGroup
 */ function useDelayGroup(context, options) {
    if (options === void 0) {
        options = {};
    }
    const { open, onOpenChange, floatingId } = context;
    const { id: optionId } = options;
    const id = optionId != null ? optionId : floatingId;
    const groupContext = useDelayGroupContext();
    const { currentId, setCurrentId, initialDelay, setState, timeoutMs } = groupContext;
    index(()=>{
        if (!currentId) return;
        setState({
            delay: {
                open: 1,
                close: getDelay(initialDelay, 'close')
            }
        });
        if (currentId !== id) {
            onOpenChange(false);
        }
    }, [
        id,
        onOpenChange,
        setState,
        currentId,
        initialDelay
    ]);
    index(()=>{
        function unset() {
            onOpenChange(false);
            setState({
                delay: initialDelay,
                currentId: null
            });
        }
        if (!currentId) return;
        if (!open && currentId === id) {
            if (timeoutMs) {
                const timeout = window.setTimeout(unset, timeoutMs);
                return ()=>{
                    clearTimeout(timeout);
                };
            }
            unset();
        }
    }, [
        open,
        setState,
        currentId,
        id,
        onOpenChange,
        initialDelay,
        timeoutMs
    ]);
    index(()=>{
        if (setCurrentId === NOOP || !open) return;
        setCurrentId(id);
    }, [
        open,
        setCurrentId,
        id
    ]);
    return groupContext;
}
function getAncestors(nodes, id) {
    var _nodes$find;
    let allAncestors = [];
    let currentParentId = (_nodes$find = nodes.find((node)=>node.id === id)) == null ? void 0 : _nodes$find.parentId;
    while(currentParentId){
        const currentNode = nodes.find((node)=>node.id === currentParentId);
        currentParentId = currentNode == null ? void 0 : currentNode.parentId;
        if (currentNode) {
            allAncestors = allAncestors.concat(currentNode);
        }
    }
    return allAncestors;
}
function getChildren(nodes, id) {
    let allChildren = nodes.filter((node)=>{
        var _node$context;
        return node.parentId === id && ((_node$context = node.context) == null ? void 0 : _node$context.open);
    });
    let currentChildren = allChildren;
    while(currentChildren.length){
        currentChildren = nodes.filter((node)=>{
            var _currentChildren;
            return (_currentChildren = currentChildren) == null ? void 0 : _currentChildren.some((n)=>{
                var _node$context2;
                return node.parentId === n.id && ((_node$context2 = node.context) == null ? void 0 : _node$context2.open);
            });
        });
        allChildren = allChildren.concat(currentChildren);
    }
    return allChildren;
}
function getDeepestNode(nodes, id) {
    let deepestNodeId;
    let maxDepth = -1;
    function findDeepest(nodeId, depth) {
        if (depth > maxDepth) {
            deepestNodeId = nodeId;
            maxDepth = depth;
        }
        const children = getChildren(nodes, nodeId);
        children.forEach((child)=>{
            findDeepest(child.id, depth + 1);
        });
    }
    findDeepest(id, 0);
    return nodes.find((node)=>node.id === deepestNodeId);
}
// Modified to add conditional `aria-hidden` support:
// https://github.com/theKashey/aria-hidden/blob/9220c8f4a4fd35f63bee5510a9f41a37264382d4/src/index.ts
let counterMap = /*#__PURE__*/ new WeakMap();
let uncontrolledElementsSet = /*#__PURE__*/ new WeakSet();
let markerMap = {};
let lockCount = 0;
const supportsInert = ()=>typeof HTMLElement !== 'undefined' && 'inert' in HTMLElement.prototype;
const unwrapHost = (node)=>node && (node.host || unwrapHost(node.parentNode));
const correctElements = (parent, targets)=>targets.map((target)=>{
        if (parent.contains(target)) {
            return target;
        }
        const correctedTarget = unwrapHost(target);
        if (parent.contains(correctedTarget)) {
            return correctedTarget;
        }
        return null;
    }).filter((x)=>x != null);
function applyAttributeToOthers(uncorrectedAvoidElements, body, ariaHidden, inert) {
    const markerName = 'data-floating-ui-inert';
    const controlAttribute = inert ? 'inert' : ariaHidden ? 'aria-hidden' : null;
    const avoidElements = correctElements(body, uncorrectedAvoidElements);
    const elementsToKeep = new Set();
    const elementsToStop = new Set(avoidElements);
    const hiddenElements = [];
    if (!markerMap[markerName]) {
        markerMap[markerName] = new WeakMap();
    }
    const markerCounter = markerMap[markerName];
    avoidElements.forEach(keep);
    deep(body);
    elementsToKeep.clear();
    function keep(el) {
        if (!el || elementsToKeep.has(el)) {
            return;
        }
        elementsToKeep.add(el);
        el.parentNode && keep(el.parentNode);
    }
    function deep(parent) {
        if (!parent || elementsToStop.has(parent)) {
            return;
        }
        Array.prototype.forEach.call(parent.children, (node)=>{
            if (elementsToKeep.has(node)) {
                deep(node);
            } else {
                const attr = controlAttribute ? node.getAttribute(controlAttribute) : null;
                const alreadyHidden = attr !== null && attr !== 'false';
                const counterValue = (counterMap.get(node) || 0) + 1;
                const markerValue = (markerCounter.get(node) || 0) + 1;
                counterMap.set(node, counterValue);
                markerCounter.set(node, markerValue);
                hiddenElements.push(node);
                if (counterValue === 1 && alreadyHidden) {
                    uncontrolledElementsSet.add(node);
                }
                if (markerValue === 1) {
                    node.setAttribute(markerName, '');
                }
                if (!alreadyHidden && controlAttribute) {
                    node.setAttribute(controlAttribute, 'true');
                }
            }
        });
    }
    lockCount++;
    return ()=>{
        hiddenElements.forEach((element)=>{
            const counterValue = (counterMap.get(element) || 0) - 1;
            const markerValue = (markerCounter.get(element) || 0) - 1;
            counterMap.set(element, counterValue);
            markerCounter.set(element, markerValue);
            if (!counterValue) {
                if (!uncontrolledElementsSet.has(element) && controlAttribute) {
                    element.removeAttribute(controlAttribute);
                }
                uncontrolledElementsSet.delete(element);
            }
            if (!markerValue) {
                element.removeAttribute(markerName);
            }
        });
        lockCount--;
        if (!lockCount) {
            counterMap = new WeakMap();
            counterMap = new WeakMap();
            uncontrolledElementsSet = new WeakSet();
            markerMap = {};
        }
    };
}
function markOthers(avoidElements, ariaHidden, inert) {
    if (ariaHidden === void 0) {
        ariaHidden = false;
    }
    if (inert === void 0) {
        inert = false;
    }
    const body = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getDocument"](avoidElements[0]).body;
    return applyAttributeToOthers(avoidElements.concat(Array.from(body.querySelectorAll('[aria-live]'))), body, ariaHidden, inert);
}
const getTabbableOptions = ()=>({
        getShadowRoot: true,
        displayCheck: // JSDOM does not support the `tabbable` library. To solve this we can
        // check if `ResizeObserver` is a real function (not polyfilled), which
        // determines if the current environment is JSDOM-like.
        typeof ResizeObserver === 'function' && ResizeObserver.toString().includes('[native code]') ? 'full' : 'none'
    });
function getTabbableIn(container, direction) {
    const allTabbable = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tabbable$2f$dist$2f$index$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tabbable"](container, getTabbableOptions());
    if (direction === 'prev') {
        allTabbable.reverse();
    }
    const activeIndex = allTabbable.indexOf(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["activeElement"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getDocument"](container)));
    const nextTabbableElements = allTabbable.slice(activeIndex + 1);
    return nextTabbableElements[0];
}
function getNextTabbable() {
    return getTabbableIn(document.body, 'next');
}
function getPreviousTabbable() {
    return getTabbableIn(document.body, 'prev');
}
function isOutsideEvent(event, container) {
    const containerElement = container || event.currentTarget;
    const relatedTarget = event.relatedTarget;
    return !relatedTarget || !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["contains"](containerElement, relatedTarget);
}
function disableFocusInside(container) {
    const tabbableElements = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tabbable$2f$dist$2f$index$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tabbable"](container, getTabbableOptions());
    tabbableElements.forEach((element)=>{
        element.dataset.tabindex = element.getAttribute('tabindex') || '';
        element.setAttribute('tabindex', '-1');
    });
}
function enableFocusInside(container) {
    const elements = container.querySelectorAll('[data-tabindex]');
    elements.forEach((element)=>{
        const tabindex = element.dataset.tabindex;
        delete element.dataset.tabindex;
        if (tabindex) {
            element.setAttribute('tabindex', tabindex);
        } else {
            element.removeAttribute('tabindex');
        }
    });
}
// See Diego Haz's Sandbox for making this logic work well on Safari/iOS:
// https://codesandbox.io/s/tabbable-portal-f4tng?file=/src/FocusTrap.tsx
const HIDDEN_STYLES = {
    border: 0,
    clip: 'rect(0 0 0 0)',
    height: '1px',
    margin: '-1px',
    overflow: 'hidden',
    padding: 0,
    position: 'fixed',
    whiteSpace: 'nowrap',
    width: '1px',
    top: 0,
    left: 0
};
let timeoutId;
function setActiveElementOnTab(event) {
    if (event.key === 'Tab') {
        event.target;
        clearTimeout(timeoutId);
    }
}
const FocusGuard = /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.forwardRef(function FocusGuard(props, ref) {
    const [role, setRole] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useState();
    index(()=>{
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSafari"]()) {
            // Unlike other screen readers such as NVDA and JAWS, the virtual cursor
            // on VoiceOver does trigger the onFocus event, so we can use the focus
            // trap element. On Safari, only buttons trigger the onFocus event.
            // NB: "group" role in the Sandbox no longer appears to work, must be a
            // button role.
            setRole('button');
        }
        document.addEventListener('keydown', setActiveElementOnTab);
        return ()=>{
            document.removeEventListener('keydown', setActiveElementOnTab);
        };
    }, []);
    const restProps = {
        ref,
        tabIndex: 0,
        // Role is only for VoiceOver
        role,
        'aria-hidden': role ? undefined : true,
        [createAttribute('focus-guard')]: '',
        style: HIDDEN_STYLES
    };
    return /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createElement("span", _extends({}, props, restProps));
});
const PortalContext = /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createContext(null);
const attr = /*#__PURE__*/ createAttribute('portal');
/**
 * @see https://floating-ui.com/docs/FloatingPortal#usefloatingportalnode
 */ function useFloatingPortalNode(props) {
    if (props === void 0) {
        props = {};
    }
    const { id, root } = props;
    const uniqueId = useId();
    const portalContext = usePortalContext();
    const [portalNode, setPortalNode] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useState(null);
    const portalNodeRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(null);
    index(()=>{
        return ()=>{
            portalNode == null || portalNode.remove();
            // Allow the subsequent layout effects to create a new node on updates.
            // The portal node will still be cleaned up on unmount.
            // https://github.com/floating-ui/floating-ui/issues/2454
            queueMicrotask(()=>{
                portalNodeRef.current = null;
            });
        };
    }, [
        portalNode
    ]);
    index(()=>{
        if (portalNodeRef.current) return;
        const existingIdRoot = id ? document.getElementById(id) : null;
        if (!existingIdRoot) return;
        const subRoot = document.createElement('div');
        subRoot.id = uniqueId;
        subRoot.setAttribute(attr, '');
        existingIdRoot.appendChild(subRoot);
        portalNodeRef.current = subRoot;
        setPortalNode(subRoot);
    }, [
        id,
        uniqueId
    ]);
    index(()=>{
        if (portalNodeRef.current) return;
        let container = root || (portalContext == null ? void 0 : portalContext.portalNode);
        if (container && !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isElement"](container)) container = container.current;
        container = container || document.body;
        let idWrapper = null;
        if (id) {
            idWrapper = document.createElement('div');
            idWrapper.id = id;
            container.appendChild(idWrapper);
        }
        const subRoot = document.createElement('div');
        subRoot.id = uniqueId;
        subRoot.setAttribute(attr, '');
        container = idWrapper || container;
        container.appendChild(subRoot);
        portalNodeRef.current = subRoot;
        setPortalNode(subRoot);
    }, [
        id,
        root,
        uniqueId,
        portalContext
    ]);
    return portalNode;
}
/**
 * Portals the floating element into a given container element — by default,
 * outside of the app root and into the body.
 * This is necessary to ensure the floating element can appear outside any
 * potential parent containers that cause clipping (such as `overflow: hidden`),
 * while retaining its location in the React tree.
 * @see https://floating-ui.com/docs/FloatingPortal
 */ function FloatingPortal(props) {
    const { children, id, root = null, preserveTabOrder = true } = props;
    const portalNode = useFloatingPortalNode({
        id,
        root
    });
    const [focusManagerState, setFocusManagerState] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useState(null);
    const beforeOutsideRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(null);
    const afterOutsideRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(null);
    const beforeInsideRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(null);
    const afterInsideRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(null);
    const shouldRenderGuards = // The FocusManager and therefore floating element are currently open/
    // rendered.
    !!focusManagerState && // Guards are only for non-modal focus management.
    !focusManagerState.modal && // Don't render if unmount is transitioning.
    focusManagerState.open && preserveTabOrder && !!(root || portalNode);
    // https://codesandbox.io/s/tabbable-portal-f4tng?file=/src/TabbablePortal.tsx
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useEffect(()=>{
        if (!portalNode || !preserveTabOrder || focusManagerState != null && focusManagerState.modal) {
            return;
        }
        // Make sure elements inside the portal element are tabbable only when the
        // portal has already been focused, either by tabbing into a focus trap
        // element outside or using the mouse.
        function onFocus(event) {
            if (portalNode && isOutsideEvent(event)) {
                const focusing = event.type === 'focusin';
                const manageFocus = focusing ? enableFocusInside : disableFocusInside;
                manageFocus(portalNode);
            }
        }
        // Listen to the event on the capture phase so they run before the focus
        // trap elements onFocus prop is called.
        portalNode.addEventListener('focusin', onFocus, true);
        portalNode.addEventListener('focusout', onFocus, true);
        return ()=>{
            portalNode.removeEventListener('focusin', onFocus, true);
            portalNode.removeEventListener('focusout', onFocus, true);
        };
    }, [
        portalNode,
        preserveTabOrder,
        focusManagerState == null ? void 0 : focusManagerState.modal
    ]);
    return /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createElement(PortalContext.Provider, {
        value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useMemo(()=>({
                preserveTabOrder,
                beforeOutsideRef,
                afterOutsideRef,
                beforeInsideRef,
                afterInsideRef,
                portalNode,
                setFocusManagerState
            }), [
            preserveTabOrder,
            portalNode
        ])
    }, shouldRenderGuards && portalNode && /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createElement(FocusGuard, {
        "data-type": "outside",
        ref: beforeOutsideRef,
        onFocus: (event)=>{
            if (isOutsideEvent(event, portalNode)) {
                var _beforeInsideRef$curr;
                (_beforeInsideRef$curr = beforeInsideRef.current) == null || _beforeInsideRef$curr.focus();
            } else {
                const prevTabbable = getPreviousTabbable() || (focusManagerState == null ? void 0 : focusManagerState.refs.domReference.current);
                prevTabbable == null || prevTabbable.focus();
            }
        }
    }), shouldRenderGuards && portalNode && /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createElement("span", {
        "aria-owns": portalNode.id,
        style: HIDDEN_STYLES
    }), portalNode && /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$dom$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createPortal"](children, portalNode), shouldRenderGuards && portalNode && /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createElement(FocusGuard, {
        "data-type": "outside",
        ref: afterOutsideRef,
        onFocus: (event)=>{
            if (isOutsideEvent(event, portalNode)) {
                var _afterInsideRef$curre;
                (_afterInsideRef$curre = afterInsideRef.current) == null || _afterInsideRef$curre.focus();
            } else {
                const nextTabbable = getNextTabbable() || (focusManagerState == null ? void 0 : focusManagerState.refs.domReference.current);
                nextTabbable == null || nextTabbable.focus();
                (focusManagerState == null ? void 0 : focusManagerState.closeOnFocusOut) && (focusManagerState == null ? void 0 : focusManagerState.onOpenChange(false, event.nativeEvent));
            }
        }
    }));
}
const usePortalContext = ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useContext(PortalContext);
const LIST_LIMIT = 20;
let previouslyFocusedElements = [];
function addPreviouslyFocusedElement(element) {
    previouslyFocusedElements = previouslyFocusedElements.filter((el)=>el.isConnected);
    let tabbableEl = element;
    if (!tabbableEl || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getNodeName"](tabbableEl) === 'body') return;
    if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tabbable$2f$dist$2f$index$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isTabbable"](tabbableEl, getTabbableOptions())) {
        const tabbableChild = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tabbable$2f$dist$2f$index$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tabbable"](tabbableEl, getTabbableOptions())[0];
        if (!tabbableChild) return;
        tabbableEl = tabbableChild;
    }
    previouslyFocusedElements.push(tabbableEl);
    if (previouslyFocusedElements.length > LIST_LIMIT) {
        previouslyFocusedElements = previouslyFocusedElements.slice(-LIST_LIMIT);
    }
}
function getPreviouslyFocusedElement() {
    return previouslyFocusedElements.slice().reverse().find((el)=>el.isConnected);
}
const VisuallyHiddenDismiss = /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.forwardRef(function VisuallyHiddenDismiss(props, ref) {
    return /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createElement("button", _extends({}, props, {
        type: "button",
        ref: ref,
        tabIndex: -1,
        style: HIDDEN_STYLES
    }));
});
/**
 * Provides focus management for the floating element.
 * @see https://floating-ui.com/docs/FloatingFocusManager
 */ function FloatingFocusManager(props) {
    const { context, children, disabled = false, order = [
        'content'
    ], guards: _guards = true, initialFocus = 0, returnFocus = true, modal = true, visuallyHiddenDismiss = false, closeOnFocusOut = true } = props;
    const { open, refs, nodeId, onOpenChange, events, dataRef, elements: { domReference, floating } } = context;
    const ignoreInitialFocus = typeof initialFocus === 'number' && initialFocus < 0;
    // If the reference is a combobox and is typeable (e.g. input/textarea),
    // there are different focus semantics. The guards should not be rendered, but
    // aria-hidden should be applied to all nodes still. Further, the visually
    // hidden dismiss button should only appear at the end of the list, not the
    // start.
    const isUntrappedTypeableCombobox = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isTypeableCombobox"](domReference) && ignoreInitialFocus;
    // Force the guards to be rendered if the `inert` attribute is not supported.
    const guards = supportsInert() ? _guards : true;
    const orderRef = useLatestRef(order);
    const initialFocusRef = useLatestRef(initialFocus);
    const returnFocusRef = useLatestRef(returnFocus);
    const tree = useFloatingTree();
    const portalContext = usePortalContext();
    const startDismissButtonRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(null);
    const endDismissButtonRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(null);
    const preventReturnFocusRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(false);
    const isPointerDownRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(false);
    const isInsidePortal = portalContext != null;
    const getTabbableContent = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useCallback(function(container) {
        if (container === void 0) {
            container = floating;
        }
        return container ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tabbable$2f$dist$2f$index$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tabbable"](container, getTabbableOptions()) : [];
    }, [
        floating
    ]);
    const getTabbableElements = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useCallback((container)=>{
        const content = getTabbableContent(container);
        return orderRef.current.map((type)=>{
            if (domReference && type === 'reference') {
                return domReference;
            }
            if (floating && type === 'floating') {
                return floating;
            }
            return content;
        }).filter(Boolean).flat();
    }, [
        domReference,
        floating,
        orderRef,
        getTabbableContent
    ]);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useEffect(()=>{
        if (disabled || !modal) return;
        function onKeyDown(event) {
            if (event.key === 'Tab') {
                // The focus guards have nothing to focus, so we need to stop the event.
                if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["contains"](floating, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["activeElement"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getDocument"](floating))) && getTabbableContent().length === 0 && !isUntrappedTypeableCombobox) {
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stopEvent"](event);
                }
                const els = getTabbableElements();
                const target = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getTarget"](event);
                if (orderRef.current[0] === 'reference' && target === domReference) {
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stopEvent"](event);
                    if (event.shiftKey) {
                        enqueueFocus(els[els.length - 1]);
                    } else {
                        enqueueFocus(els[1]);
                    }
                }
                if (orderRef.current[1] === 'floating' && target === floating && event.shiftKey) {
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stopEvent"](event);
                    enqueueFocus(els[0]);
                }
            }
        }
        const doc = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getDocument"](floating);
        doc.addEventListener('keydown', onKeyDown);
        return ()=>{
            doc.removeEventListener('keydown', onKeyDown);
        };
    }, [
        disabled,
        domReference,
        floating,
        modal,
        orderRef,
        isUntrappedTypeableCombobox,
        getTabbableContent,
        getTabbableElements
    ]);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useEffect(()=>{
        if (disabled || !closeOnFocusOut) return;
        // In Safari, buttons lose focus when pressing them.
        function handlePointerDown() {
            isPointerDownRef.current = true;
            setTimeout(()=>{
                isPointerDownRef.current = false;
            });
        }
        function handleFocusOutside(event) {
            const relatedTarget = event.relatedTarget;
            queueMicrotask(()=>{
                const movedToUnrelatedNode = !(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["contains"](domReference, relatedTarget) || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["contains"](floating, relatedTarget) || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["contains"](relatedTarget, floating) || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["contains"](portalContext == null ? void 0 : portalContext.portalNode, relatedTarget) || relatedTarget != null && relatedTarget.hasAttribute(createAttribute('focus-guard')) || tree && (getChildren(tree.nodesRef.current, nodeId).find((node)=>{
                    var _node$context, _node$context2;
                    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["contains"]((_node$context = node.context) == null ? void 0 : _node$context.elements.floating, relatedTarget) || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["contains"]((_node$context2 = node.context) == null ? void 0 : _node$context2.elements.domReference, relatedTarget);
                }) || getAncestors(tree.nodesRef.current, nodeId).find((node)=>{
                    var _node$context3, _node$context4;
                    return ((_node$context3 = node.context) == null ? void 0 : _node$context3.elements.floating) === relatedTarget || ((_node$context4 = node.context) == null ? void 0 : _node$context4.elements.domReference) === relatedTarget;
                })));
                // Focus did not move inside the floating tree, and there are no tabbable
                // portal guards to handle closing.
                if (relatedTarget && movedToUnrelatedNode && !isPointerDownRef.current && // Fix React 18 Strict Mode returnFocus due to double rendering.
                relatedTarget !== getPreviouslyFocusedElement()) {
                    preventReturnFocusRef.current = true;
                    onOpenChange(false, event);
                }
            });
        }
        if (floating && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isHTMLElement"](domReference)) {
            domReference.addEventListener('focusout', handleFocusOutside);
            domReference.addEventListener('pointerdown', handlePointerDown);
            !modal && floating.addEventListener('focusout', handleFocusOutside);
            return ()=>{
                domReference.removeEventListener('focusout', handleFocusOutside);
                domReference.removeEventListener('pointerdown', handlePointerDown);
                !modal && floating.removeEventListener('focusout', handleFocusOutside);
            };
        }
    }, [
        disabled,
        domReference,
        floating,
        modal,
        nodeId,
        tree,
        portalContext,
        onOpenChange,
        closeOnFocusOut
    ]);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useEffect(()=>{
        var _portalContext$portal;
        if (disabled) return;
        // Don't hide portals nested within the parent portal.
        const portalNodes = Array.from((portalContext == null || (_portalContext$portal = portalContext.portalNode) == null ? void 0 : _portalContext$portal.querySelectorAll("[" + createAttribute('portal') + "]")) || []);
        if (floating) {
            const insideElements = [
                floating,
                ...portalNodes,
                startDismissButtonRef.current,
                endDismissButtonRef.current,
                orderRef.current.includes('reference') || isUntrappedTypeableCombobox ? domReference : null
            ].filter((x)=>x != null);
            const cleanup = modal || isUntrappedTypeableCombobox ? markOthers(insideElements, guards, !guards) : markOthers(insideElements);
            return ()=>{
                cleanup();
            };
        }
    }, [
        disabled,
        domReference,
        floating,
        modal,
        orderRef,
        portalContext,
        isUntrappedTypeableCombobox,
        guards
    ]);
    index(()=>{
        if (disabled || !floating) return;
        const doc = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getDocument"](floating);
        const previouslyFocusedElement = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["activeElement"](doc);
        // Wait for any layout effect state setters to execute to set `tabIndex`.
        queueMicrotask(()=>{
            const focusableElements = getTabbableElements(floating);
            const initialFocusValue = initialFocusRef.current;
            const elToFocus = (typeof initialFocusValue === 'number' ? focusableElements[initialFocusValue] : initialFocusValue.current) || floating;
            const focusAlreadyInsideFloatingEl = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["contains"](floating, previouslyFocusedElement);
            if (!ignoreInitialFocus && !focusAlreadyInsideFloatingEl && open) {
                enqueueFocus(elToFocus, {
                    preventScroll: elToFocus === floating
                });
            }
        });
    }, [
        disabled,
        open,
        floating,
        ignoreInitialFocus,
        getTabbableElements,
        initialFocusRef
    ]);
    index(()=>{
        if (disabled || !floating) return;
        let preventReturnFocusScroll = false;
        const doc = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getDocument"](floating);
        const previouslyFocusedElement = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["activeElement"](doc);
        const contextData = dataRef.current;
        addPreviouslyFocusedElement(previouslyFocusedElement);
        // Dismissing via outside press should always ignore `returnFocus` to
        // prevent unwanted scrolling.
        function onOpenChange(_ref) {
            let { reason, event, nested } = _ref;
            if (reason === 'escape-key' && refs.domReference.current) {
                addPreviouslyFocusedElement(refs.domReference.current);
            }
            if (reason === 'hover' && event.type === 'mouseleave') {
                preventReturnFocusRef.current = true;
            }
            if (reason !== 'outside-press') return;
            if (nested) {
                preventReturnFocusRef.current = false;
                preventReturnFocusScroll = true;
            } else {
                preventReturnFocusRef.current = !(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isVirtualClick"](event) || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isVirtualPointerEvent"](event));
            }
        }
        events.on('openchange', onOpenChange);
        return ()=>{
            events.off('openchange', onOpenChange);
            const activeEl = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["activeElement"](doc);
            const isFocusInsideFloatingTree = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["contains"](floating, activeEl) || tree && getChildren(tree.nodesRef.current, nodeId).some((node)=>{
                var _node$context5;
                return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["contains"]((_node$context5 = node.context) == null ? void 0 : _node$context5.elements.floating, activeEl);
            });
            const shouldFocusReference = isFocusInsideFloatingTree || contextData.openEvent && [
                'click',
                'mousedown'
            ].includes(contextData.openEvent.type);
            if (shouldFocusReference && refs.domReference.current) {
                addPreviouslyFocusedElement(refs.domReference.current);
            }
            const returnElement = getPreviouslyFocusedElement();
            if (// eslint-disable-next-line react-hooks/exhaustive-deps
            returnFocusRef.current && !preventReturnFocusRef.current && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isHTMLElement"](returnElement) && (// If the focus moved somewhere else after mount, avoid returning focus
            // since it likely entered a different element which should be
            // respected: https://github.com/floating-ui/floating-ui/issues/2607
            returnElement !== activeEl && activeEl !== doc.body ? isFocusInsideFloatingTree : true)) {
                enqueueFocus(returnElement, {
                    // When dismissing nested floating elements, by the time the rAF has
                    // executed, the menus will all have been unmounted. When they try
                    // to get focused, the calls get ignored — leaving the root
                    // reference focused as desired.
                    cancelPrevious: false,
                    preventScroll: preventReturnFocusScroll
                });
            }
        };
    }, [
        disabled,
        floating,
        returnFocusRef,
        dataRef,
        refs,
        events,
        tree,
        nodeId
    ]);
    // Synchronize the `context` & `modal` value to the FloatingPortal context.
    // It will decide whether or not it needs to render its own guards.
    index(()=>{
        if (disabled || !portalContext) return;
        portalContext.setFocusManagerState({
            modal,
            closeOnFocusOut,
            open,
            onOpenChange,
            refs
        });
        return ()=>{
            portalContext.setFocusManagerState(null);
        };
    }, [
        disabled,
        portalContext,
        modal,
        open,
        onOpenChange,
        refs,
        closeOnFocusOut
    ]);
    index(()=>{
        if (disabled || !floating || typeof MutationObserver !== 'function' || ignoreInitialFocus) {
            return;
        }
        const handleMutation = ()=>{
            const tabIndex = floating.getAttribute('tabindex');
            if (orderRef.current.includes('floating') || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["activeElement"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getDocument"](floating)) !== refs.domReference.current && getTabbableContent().length === 0) {
                if (tabIndex !== '0') {
                    floating.setAttribute('tabindex', '0');
                }
            } else if (tabIndex !== '-1') {
                floating.setAttribute('tabindex', '-1');
            }
        };
        handleMutation();
        const observer = new MutationObserver(handleMutation);
        observer.observe(floating, {
            childList: true,
            subtree: true,
            attributes: true
        });
        return ()=>{
            observer.disconnect();
        };
    }, [
        disabled,
        floating,
        refs,
        orderRef,
        getTabbableContent,
        ignoreInitialFocus
    ]);
    function renderDismissButton(location) {
        if (disabled || !visuallyHiddenDismiss || !modal) {
            return null;
        }
        return /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createElement(VisuallyHiddenDismiss, {
            ref: location === 'start' ? startDismissButtonRef : endDismissButtonRef,
            onClick: (event)=>onOpenChange(false, event.nativeEvent)
        }, typeof visuallyHiddenDismiss === 'string' ? visuallyHiddenDismiss : 'Dismiss');
    }
    const shouldRenderGuards = !disabled && guards && (isInsidePortal || modal);
    return /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createElement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.Fragment, null, shouldRenderGuards && /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createElement(FocusGuard, {
        "data-type": "inside",
        ref: portalContext == null ? void 0 : portalContext.beforeInsideRef,
        onFocus: (event)=>{
            if (modal) {
                const els = getTabbableElements();
                enqueueFocus(order[0] === 'reference' ? els[0] : els[els.length - 1]);
            } else if (portalContext != null && portalContext.preserveTabOrder && portalContext.portalNode) {
                preventReturnFocusRef.current = false;
                if (isOutsideEvent(event, portalContext.portalNode)) {
                    const nextTabbable = getNextTabbable() || domReference;
                    nextTabbable == null || nextTabbable.focus();
                } else {
                    var _portalContext$before;
                    (_portalContext$before = portalContext.beforeOutsideRef.current) == null || _portalContext$before.focus();
                }
            }
        }
    }), !isUntrappedTypeableCombobox && renderDismissButton('start'), children, renderDismissButton('end'), shouldRenderGuards && /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createElement(FocusGuard, {
        "data-type": "inside",
        ref: portalContext == null ? void 0 : portalContext.afterInsideRef,
        onFocus: (event)=>{
            if (modal) {
                enqueueFocus(getTabbableElements()[0]);
            } else if (portalContext != null && portalContext.preserveTabOrder && portalContext.portalNode) {
                if (closeOnFocusOut) {
                    preventReturnFocusRef.current = true;
                }
                if (isOutsideEvent(event, portalContext.portalNode)) {
                    const prevTabbable = getPreviousTabbable() || domReference;
                    prevTabbable == null || prevTabbable.focus();
                } else {
                    var _portalContext$afterO;
                    (_portalContext$afterO = portalContext.afterOutsideRef.current) == null || _portalContext$afterO.focus();
                }
            }
        }
    }));
}
const activeLocks = /*#__PURE__*/ new Set();
/**
 * Provides base styling for a fixed overlay element to dim content or block
 * pointer events behind a floating element.
 * It's a regular `<div>`, so it can be styled via any CSS solution you prefer.
 * @see https://floating-ui.com/docs/FloatingOverlay
 */ const FloatingOverlay = /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.forwardRef(function FloatingOverlay(props, ref) {
    const { lockScroll = false, ...rest } = props;
    const lockId = useId();
    index(()=>{
        if (!lockScroll) return;
        activeLocks.add(lockId);
        const isIOS = /iP(hone|ad|od)|iOS/.test(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getPlatform"]());
        const bodyStyle = document.body.style;
        // RTL <body> scrollbar
        const scrollbarX = Math.round(document.documentElement.getBoundingClientRect().left) + document.documentElement.scrollLeft;
        const paddingProp = scrollbarX ? 'paddingLeft' : 'paddingRight';
        const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;
        const scrollX = bodyStyle.left ? parseFloat(bodyStyle.left) : window.pageXOffset;
        const scrollY = bodyStyle.top ? parseFloat(bodyStyle.top) : window.pageYOffset;
        bodyStyle.overflow = 'hidden';
        if (scrollbarWidth) {
            bodyStyle[paddingProp] = scrollbarWidth + "px";
        }
        // Only iOS doesn't respect `overflow: hidden` on document.body, and this
        // technique has fewer side effects.
        if (isIOS) {
            var _window$visualViewpor, _window$visualViewpor2;
            // iOS 12 does not support `visualViewport`.
            const offsetLeft = ((_window$visualViewpor = window.visualViewport) == null ? void 0 : _window$visualViewpor.offsetLeft) || 0;
            const offsetTop = ((_window$visualViewpor2 = window.visualViewport) == null ? void 0 : _window$visualViewpor2.offsetTop) || 0;
            Object.assign(bodyStyle, {
                position: 'fixed',
                top: -(scrollY - Math.floor(offsetTop)) + "px",
                left: -(scrollX - Math.floor(offsetLeft)) + "px",
                right: '0'
            });
        }
        return ()=>{
            activeLocks.delete(lockId);
            if (activeLocks.size === 0) {
                Object.assign(bodyStyle, {
                    overflow: '',
                    [paddingProp]: ''
                });
                if (isIOS) {
                    Object.assign(bodyStyle, {
                        position: '',
                        top: '',
                        left: '',
                        right: ''
                    });
                    window.scrollTo(scrollX, scrollY);
                }
            }
        };
    }, [
        lockId,
        lockScroll
    ]);
    return /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.createElement("div", _extends({
        ref: ref
    }, rest, {
        style: {
            position: 'fixed',
            overflow: 'auto',
            top: 0,
            right: 0,
            bottom: 0,
            left: 0,
            ...rest.style
        }
    }));
});
function isButtonTarget(event) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isHTMLElement"](event.target) && event.target.tagName === 'BUTTON';
}
function isSpaceIgnored(element) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isTypeableElement"](element);
}
/**
 * Opens or closes the floating element when clicking the reference element.
 * @see https://floating-ui.com/docs/useClick
 */ function useClick(context, props) {
    if (props === void 0) {
        props = {};
    }
    const { open, onOpenChange, dataRef, elements: { domReference } } = context;
    const { enabled = true, event: eventOption = 'click', toggle = true, ignoreMouse = false, keyboardHandlers = true } = props;
    const pointerTypeRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef();
    const didKeyDownRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(false);
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useMemo(()=>{
        if (!enabled) return {};
        return {
            reference: {
                onPointerDown (event) {
                    pointerTypeRef.current = event.pointerType;
                },
                onMouseDown (event) {
                    // Ignore all buttons except for the "main" button.
                    // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button
                    if (event.button !== 0) {
                        return;
                    }
                    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isMouseLikePointerType"](pointerTypeRef.current, true) && ignoreMouse) {
                        return;
                    }
                    if (eventOption === 'click') {
                        return;
                    }
                    if (open && toggle && (dataRef.current.openEvent ? dataRef.current.openEvent.type === 'mousedown' : true)) {
                        onOpenChange(false, event.nativeEvent, 'click');
                    } else {
                        // Prevent stealing focus from the floating element
                        event.preventDefault();
                        onOpenChange(true, event.nativeEvent, 'click');
                    }
                },
                onClick (event) {
                    if (eventOption === 'mousedown' && pointerTypeRef.current) {
                        pointerTypeRef.current = undefined;
                        return;
                    }
                    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isMouseLikePointerType"](pointerTypeRef.current, true) && ignoreMouse) {
                        return;
                    }
                    if (open && toggle && (dataRef.current.openEvent ? dataRef.current.openEvent.type === 'click' : true)) {
                        onOpenChange(false, event.nativeEvent, 'click');
                    } else {
                        onOpenChange(true, event.nativeEvent, 'click');
                    }
                },
                onKeyDown (event) {
                    pointerTypeRef.current = undefined;
                    if (event.defaultPrevented || !keyboardHandlers || isButtonTarget(event)) {
                        return;
                    }
                    if (event.key === ' ' && !isSpaceIgnored(domReference)) {
                        // Prevent scrolling
                        event.preventDefault();
                        didKeyDownRef.current = true;
                    }
                    if (event.key === 'Enter') {
                        if (open && toggle) {
                            onOpenChange(false, event.nativeEvent, 'click');
                        } else {
                            onOpenChange(true, event.nativeEvent, 'click');
                        }
                    }
                },
                onKeyUp (event) {
                    if (event.defaultPrevented || !keyboardHandlers || isButtonTarget(event) || isSpaceIgnored(domReference)) {
                        return;
                    }
                    if (event.key === ' ' && didKeyDownRef.current) {
                        didKeyDownRef.current = false;
                        if (open && toggle) {
                            onOpenChange(false, event.nativeEvent, 'click');
                        } else {
                            onOpenChange(true, event.nativeEvent, 'click');
                        }
                    }
                }
            }
        };
    }, [
        enabled,
        dataRef,
        eventOption,
        ignoreMouse,
        keyboardHandlers,
        domReference,
        toggle,
        open,
        onOpenChange
    ]);
}
function createVirtualElement(domRef, data) {
    let offsetX = null;
    let offsetY = null;
    let isAutoUpdateEvent = false;
    return {
        contextElement: domRef.current || undefined,
        getBoundingClientRect () {
            var _domRef$current, _data$dataRef$current;
            const domRect = ((_domRef$current = domRef.current) == null ? void 0 : _domRef$current.getBoundingClientRect()) || {
                width: 0,
                height: 0,
                x: 0,
                y: 0
            };
            const isXAxis = data.axis === 'x' || data.axis === 'both';
            const isYAxis = data.axis === 'y' || data.axis === 'both';
            const canTrackCursorOnAutoUpdate = [
                'mouseenter',
                'mousemove'
            ].includes(((_data$dataRef$current = data.dataRef.current.openEvent) == null ? void 0 : _data$dataRef$current.type) || '') && data.pointerType !== 'touch';
            let width = domRect.width;
            let height = domRect.height;
            let x = domRect.x;
            let y = domRect.y;
            if (offsetX == null && data.x && isXAxis) {
                offsetX = domRect.x - data.x;
            }
            if (offsetY == null && data.y && isYAxis) {
                offsetY = domRect.y - data.y;
            }
            x -= offsetX || 0;
            y -= offsetY || 0;
            width = 0;
            height = 0;
            if (!isAutoUpdateEvent || canTrackCursorOnAutoUpdate) {
                width = data.axis === 'y' ? domRect.width : 0;
                height = data.axis === 'x' ? domRect.height : 0;
                x = isXAxis && data.x != null ? data.x : x;
                y = isYAxis && data.y != null ? data.y : y;
            } else if (isAutoUpdateEvent && !canTrackCursorOnAutoUpdate) {
                height = data.axis === 'x' ? domRect.height : height;
                width = data.axis === 'y' ? domRect.width : width;
            }
            isAutoUpdateEvent = true;
            return {
                width,
                height,
                x,
                y,
                top: y,
                right: x + width,
                bottom: y + height,
                left: x
            };
        }
    };
}
function isMouseBasedEvent(event) {
    return event != null && event.clientX != null;
}
/**
 * Positions the floating element relative to a client point (in the viewport),
 * such as the mouse position. By default, it follows the mouse cursor.
 * @see https://floating-ui.com/docs/useClientPoint
 */ function useClientPoint(context, props) {
    if (props === void 0) {
        props = {};
    }
    const { open, refs, dataRef, elements: { floating } } = context;
    const { enabled = true, axis = 'both', x = null, y = null } = props;
    const initialRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(false);
    const cleanupListenerRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(null);
    const [pointerType, setPointerType] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useState();
    const [reactive, setReactive] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useState([]);
    const setReference = useEffectEvent((x, y)=>{
        if (initialRef.current) return;
        // Prevent setting if the open event was not a mouse-like one
        // (e.g. focus to open, then hover over the reference element).
        // Only apply if the event exists.
        if (dataRef.current.openEvent && !isMouseBasedEvent(dataRef.current.openEvent)) {
            return;
        }
        refs.setPositionReference(createVirtualElement(refs.domReference, {
            x,
            y,
            axis,
            dataRef,
            pointerType
        }));
    });
    const handleReferenceEnterOrMove = useEffectEvent((event)=>{
        if (x != null || y != null) return;
        if (!open) {
            setReference(event.clientX, event.clientY);
        } else if (!cleanupListenerRef.current) {
            // If there's no cleanup, there's no listener, but we want to ensure
            // we add the listener if the cursor landed on the floating element and
            // then back on the reference (i.e. it's interactive).
            setReactive([]);
        }
    });
    // If the pointer is a mouse-like pointer, we want to continue following the
    // mouse even if the floating element is transitioning out. On touch
    // devices, this is undesirable because the floating element will move to
    // the dismissal touch point.
    const openCheck = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isMouseLikePointerType"](pointerType) ? floating : open;
    const addListener = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useCallback(()=>{
        // Explicitly specified `x`/`y` coordinates shouldn't add a listener.
        if (!openCheck || !enabled || x != null || y != null) return;
        const win = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getWindow"](refs.floating.current);
        function handleMouseMove(event) {
            const target = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getTarget"](event);
            if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["contains"](refs.floating.current, target)) {
                setReference(event.clientX, event.clientY);
            } else {
                win.removeEventListener('mousemove', handleMouseMove);
                cleanupListenerRef.current = null;
            }
        }
        if (!dataRef.current.openEvent || isMouseBasedEvent(dataRef.current.openEvent)) {
            win.addEventListener('mousemove', handleMouseMove);
            const cleanup = ()=>{
                win.removeEventListener('mousemove', handleMouseMove);
                cleanupListenerRef.current = null;
            };
            cleanupListenerRef.current = cleanup;
            return cleanup;
        }
        refs.setPositionReference(refs.domReference.current);
    }, [
        dataRef,
        enabled,
        openCheck,
        refs,
        setReference,
        x,
        y
    ]);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useEffect(()=>{
        return addListener();
    }, [
        addListener,
        reactive
    ]);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useEffect(()=>{
        if (enabled && !floating) {
            initialRef.current = false;
        }
    }, [
        enabled,
        floating
    ]);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useEffect(()=>{
        if (!enabled && open) {
            initialRef.current = true;
        }
    }, [
        enabled,
        open
    ]);
    index(()=>{
        if (enabled && (x != null || y != null)) {
            initialRef.current = false;
            setReference(x, y);
        }
    }, [
        enabled,
        x,
        y,
        setReference
    ]);
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useMemo(()=>{
        if (!enabled) return {};
        function setPointerTypeRef(_ref) {
            let { pointerType } = _ref;
            setPointerType(pointerType);
        }
        return {
            reference: {
                onPointerDown: setPointerTypeRef,
                onPointerEnter: setPointerTypeRef,
                onMouseMove: handleReferenceEnterOrMove,
                onMouseEnter: handleReferenceEnterOrMove
            }
        };
    }, [
        enabled,
        handleReferenceEnterOrMove
    ]);
}
const bubbleHandlerKeys = {
    pointerdown: 'onPointerDown',
    mousedown: 'onMouseDown',
    click: 'onClick'
};
const captureHandlerKeys = {
    pointerdown: 'onPointerDownCapture',
    mousedown: 'onMouseDownCapture',
    click: 'onClickCapture'
};
const normalizeProp = (normalizable)=>{
    var _normalizable$escapeK, _normalizable$outside;
    return {
        escapeKey: typeof normalizable === 'boolean' ? normalizable : (_normalizable$escapeK = normalizable == null ? void 0 : normalizable.escapeKey) != null ? _normalizable$escapeK : false,
        outsidePress: typeof normalizable === 'boolean' ? normalizable : (_normalizable$outside = normalizable == null ? void 0 : normalizable.outsidePress) != null ? _normalizable$outside : true
    };
};
/**
 * Closes the floating element when a dismissal is requested — by default, when
 * the user presses the `escape` key or outside of the floating element.
 * @see https://floating-ui.com/docs/useDismiss
 */ function useDismiss(context, props) {
    if (props === void 0) {
        props = {};
    }
    const { open, onOpenChange, nodeId, elements: { reference, domReference, floating }, dataRef } = context;
    const { enabled = true, escapeKey = true, outsidePress: unstable_outsidePress = true, outsidePressEvent = 'pointerdown', referencePress = false, referencePressEvent = 'pointerdown', ancestorScroll = false, bubbles, capture } = props;
    const tree = useFloatingTree();
    const outsidePressFn = useEffectEvent(typeof unstable_outsidePress === 'function' ? unstable_outsidePress : ()=>false);
    const outsidePress = typeof unstable_outsidePress === 'function' ? outsidePressFn : unstable_outsidePress;
    const insideReactTreeRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(false);
    const endedOrStartedInsideRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(false);
    const { escapeKey: escapeKeyBubbles, outsidePress: outsidePressBubbles } = normalizeProp(bubbles);
    const { escapeKey: escapeKeyCapture, outsidePress: outsidePressCapture } = normalizeProp(capture);
    const closeOnEscapeKeyDown = useEffectEvent((event)=>{
        if (!open || !enabled || !escapeKey || event.key !== 'Escape') {
            return;
        }
        const children = tree ? getChildren(tree.nodesRef.current, nodeId) : [];
        if (!escapeKeyBubbles) {
            event.stopPropagation();
            if (children.length > 0) {
                let shouldDismiss = true;
                children.forEach((child)=>{
                    var _child$context;
                    if ((_child$context = child.context) != null && _child$context.open && !child.context.dataRef.current.__escapeKeyBubbles) {
                        shouldDismiss = false;
                        return;
                    }
                });
                if (!shouldDismiss) {
                    return;
                }
            }
        }
        onOpenChange(false, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isReactEvent"](event) ? event.nativeEvent : event, 'escape-key');
    });
    const closeOnEscapeKeyDownCapture = useEffectEvent((event)=>{
        var _getTarget2;
        const callback = ()=>{
            var _getTarget;
            closeOnEscapeKeyDown(event);
            (_getTarget = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getTarget"](event)) == null || _getTarget.removeEventListener('keydown', callback);
        };
        (_getTarget2 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getTarget"](event)) == null || _getTarget2.addEventListener('keydown', callback);
    });
    const closeOnPressOutside = useEffectEvent((event)=>{
        // Given developers can stop the propagation of the synthetic event,
        // we can only be confident with a positive value.
        const insideReactTree = insideReactTreeRef.current;
        insideReactTreeRef.current = false;
        // When click outside is lazy (`click` event), handle dragging.
        // Don't close if:
        // - The click started inside the floating element.
        // - The click ended inside the floating element.
        const endedOrStartedInside = endedOrStartedInsideRef.current;
        endedOrStartedInsideRef.current = false;
        if (outsidePressEvent === 'click' && endedOrStartedInside) {
            return;
        }
        if (insideReactTree) {
            return;
        }
        if (typeof outsidePress === 'function' && !outsidePress(event)) {
            return;
        }
        const target = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getTarget"](event);
        const inertSelector = "[" + createAttribute('inert') + "]";
        const markers = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getDocument"](floating).querySelectorAll(inertSelector);
        let targetRootAncestor = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isElement"](target) ? target : null;
        while(targetRootAncestor && !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isLastTraversableNode"](targetRootAncestor)){
            const nextParent = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getParentNode"](targetRootAncestor);
            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isLastTraversableNode"](nextParent) || !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isElement"](nextParent)) {
                break;
            }
            targetRootAncestor = nextParent;
        }
        // Check if the click occurred on a third-party element injected after the
        // floating element rendered.
        if (markers.length && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isElement"](target) && !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isRootElement"](target) && // Clicked on a direct ancestor (e.g. FloatingOverlay).
        !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["contains"](target, floating) && // If the target root element contains none of the markers, then the
        // element was injected after the floating element rendered.
        Array.from(markers).every((marker)=>!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["contains"](targetRootAncestor, marker))) {
            return;
        }
        // Check if the click occurred on the scrollbar
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isHTMLElement"](target) && floating) {
            // In Firefox, `target.scrollWidth > target.clientWidth` for inline
            // elements.
            const canScrollX = target.clientWidth > 0 && target.scrollWidth > target.clientWidth;
            const canScrollY = target.clientHeight > 0 && target.scrollHeight > target.clientHeight;
            let xCond = canScrollY && event.offsetX > target.clientWidth;
            // In some browsers it is possible to change the <body> (or window)
            // scrollbar to the left side, but is very rare and is difficult to
            // check for. Plus, for modal dialogs with backdrops, it is more
            // important that the backdrop is checked but not so much the window.
            if (canScrollY) {
                const isRTL = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getComputedStyle"](target).direction === 'rtl';
                if (isRTL) {
                    xCond = event.offsetX <= target.offsetWidth - target.clientWidth;
                }
            }
            if (xCond || canScrollX && event.offsetY > target.clientHeight) {
                return;
            }
        }
        const targetIsInsideChildren = tree && getChildren(tree.nodesRef.current, nodeId).some((node)=>{
            var _node$context;
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEventTargetWithin"](event, (_node$context = node.context) == null ? void 0 : _node$context.elements.floating);
        });
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEventTargetWithin"](event, floating) || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEventTargetWithin"](event, domReference) || targetIsInsideChildren) {
            return;
        }
        const children = tree ? getChildren(tree.nodesRef.current, nodeId) : [];
        if (children.length > 0) {
            let shouldDismiss = true;
            children.forEach((child)=>{
                var _child$context2;
                if ((_child$context2 = child.context) != null && _child$context2.open && !child.context.dataRef.current.__outsidePressBubbles) {
                    shouldDismiss = false;
                    return;
                }
            });
            if (!shouldDismiss) {
                return;
            }
        }
        onOpenChange(false, event, 'outside-press');
    });
    const closeOnPressOutsideCapture = useEffectEvent((event)=>{
        var _getTarget4;
        const callback = ()=>{
            var _getTarget3;
            closeOnPressOutside(event);
            (_getTarget3 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getTarget"](event)) == null || _getTarget3.removeEventListener(outsidePressEvent, callback);
        };
        (_getTarget4 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getTarget"](event)) == null || _getTarget4.addEventListener(outsidePressEvent, callback);
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useEffect(()=>{
        if (!open || !enabled) {
            return;
        }
        dataRef.current.__escapeKeyBubbles = escapeKeyBubbles;
        dataRef.current.__outsidePressBubbles = outsidePressBubbles;
        function onScroll(event) {
            onOpenChange(false, event, 'ancestor-scroll');
        }
        const doc = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getDocument"](floating);
        escapeKey && doc.addEventListener('keydown', escapeKeyCapture ? closeOnEscapeKeyDownCapture : closeOnEscapeKeyDown, escapeKeyCapture);
        outsidePress && doc.addEventListener(outsidePressEvent, outsidePressCapture ? closeOnPressOutsideCapture : closeOnPressOutside, outsidePressCapture);
        let ancestors = [];
        if (ancestorScroll) {
            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isElement"](domReference)) {
                ancestors = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getOverflowAncestors"](domReference);
            }
            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isElement"](floating)) {
                ancestors = ancestors.concat(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getOverflowAncestors"](floating));
            }
            if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isElement"](reference) && reference && reference.contextElement) {
                ancestors = ancestors.concat(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getOverflowAncestors"](reference.contextElement));
            }
        }
        // Ignore the visual viewport for scrolling dismissal (allow pinch-zoom)
        ancestors = ancestors.filter((ancestor)=>{
            var _doc$defaultView;
            return ancestor !== ((_doc$defaultView = doc.defaultView) == null ? void 0 : _doc$defaultView.visualViewport);
        });
        ancestors.forEach((ancestor)=>{
            ancestor.addEventListener('scroll', onScroll, {
                passive: true
            });
        });
        return ()=>{
            escapeKey && doc.removeEventListener('keydown', escapeKeyCapture ? closeOnEscapeKeyDownCapture : closeOnEscapeKeyDown, escapeKeyCapture);
            outsidePress && doc.removeEventListener(outsidePressEvent, outsidePressCapture ? closeOnPressOutsideCapture : closeOnPressOutside, outsidePressCapture);
            ancestors.forEach((ancestor)=>{
                ancestor.removeEventListener('scroll', onScroll);
            });
        };
    }, [
        dataRef,
        floating,
        domReference,
        reference,
        escapeKey,
        outsidePress,
        outsidePressEvent,
        open,
        onOpenChange,
        ancestorScroll,
        enabled,
        escapeKeyBubbles,
        outsidePressBubbles,
        closeOnEscapeKeyDown,
        escapeKeyCapture,
        closeOnEscapeKeyDownCapture,
        closeOnPressOutside,
        outsidePressCapture,
        closeOnPressOutsideCapture
    ]);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useEffect(()=>{
        insideReactTreeRef.current = false;
    }, [
        outsidePress,
        outsidePressEvent
    ]);
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useMemo(()=>{
        if (!enabled) {
            return {};
        }
        return {
            reference: {
                onKeyDown: closeOnEscapeKeyDown,
                [bubbleHandlerKeys[referencePressEvent]]: (event)=>{
                    if (referencePress) {
                        onOpenChange(false, event.nativeEvent, 'reference-press');
                    }
                }
            },
            floating: {
                onKeyDown: closeOnEscapeKeyDown,
                onMouseDown () {
                    endedOrStartedInsideRef.current = true;
                },
                onMouseUp () {
                    endedOrStartedInsideRef.current = true;
                },
                [captureHandlerKeys[outsidePressEvent]]: ()=>{
                    insideReactTreeRef.current = true;
                }
            }
        };
    }, [
        enabled,
        referencePress,
        outsidePressEvent,
        referencePressEvent,
        onOpenChange,
        closeOnEscapeKeyDown
    ]);
}
/**
 * Provides data to position a floating element and context to add interactions.
 * @see https://floating-ui.com/docs/useFloating
 */ function useFloating(options) {
    var _options$elements;
    if (options === void 0) {
        options = {};
    }
    const { open = false, onOpenChange: unstable_onOpenChange, nodeId } = options;
    const [_domReference, setDomReference] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useState(null);
    const [positionReference, _setPositionReference] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useState(null);
    const optionDomReference = (_options$elements = options.elements) == null ? void 0 : _options$elements.reference;
    const domReference = optionDomReference || _domReference;
    if ("TURBOPACK compile-time truthy", 1) {
        if (optionDomReference && !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isElement"](optionDomReference)) {
            error('Cannot pass a virtual element to the `elements.reference` option,', 'as it must be a real DOM element. Use `refs.setPositionReference()`', 'instead.');
        }
    }
    index(()=>{
        if (domReference) {
            domReferenceRef.current = domReference;
        }
    }, [
        domReference
    ]);
    const position = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2d$dom$2f$dist$2f$floating$2d$ui$2e$react$2d$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useFloating"]({
        ...options,
        elements: {
            ...options.elements,
            ...positionReference && {
                reference: positionReference
            }
        }
    });
    const tree = useFloatingTree();
    const nested = useFloatingParentNodeId() != null;
    const onOpenChange = useEffectEvent((open, event, reason)=>{
        dataRef.current.openEvent = open ? event : undefined;
        events.emit('openchange', {
            open,
            event,
            reason,
            nested
        });
        unstable_onOpenChange == null || unstable_onOpenChange(open, event, reason);
    });
    const domReferenceRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(null);
    const dataRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef({});
    const events = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useState(()=>createPubSub())[0];
    const floatingId = useId();
    const setPositionReference = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useCallback((node)=>{
        const computedPositionReference = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isElement"](node) ? {
            getBoundingClientRect: ()=>node.getBoundingClientRect(),
            contextElement: node
        } : node;
        // Store the positionReference in state if the DOM reference is specified externally via the
        // `elements.reference` option. This ensures that it won't be overridden on future renders.
        _setPositionReference(computedPositionReference);
        position.refs.setReference(computedPositionReference);
    }, [
        position.refs
    ]);
    const setReference = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useCallback((node)=>{
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isElement"](node) || node === null) {
            domReferenceRef.current = node;
            setDomReference(node);
        }
        // Backwards-compatibility for passing a virtual element to `reference`
        // after it has set the DOM reference.
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isElement"](position.refs.reference.current) || position.refs.reference.current === null || // Don't allow setting virtual elements using the old technique back to
        // `null` to support `positionReference` + an unstable `reference`
        // callback ref.
        node !== null && !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isElement"](node)) {
            position.refs.setReference(node);
        }
    }, [
        position.refs
    ]);
    const refs = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useMemo(()=>({
            ...position.refs,
            setReference,
            setPositionReference,
            domReference: domReferenceRef
        }), [
        position.refs,
        setReference,
        setPositionReference
    ]);
    const elements = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useMemo(()=>({
            ...position.elements,
            domReference: domReference
        }), [
        position.elements,
        domReference
    ]);
    const context = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useMemo(()=>({
            ...position,
            refs,
            elements,
            dataRef,
            nodeId,
            floatingId,
            events,
            open,
            onOpenChange
        }), [
        position,
        nodeId,
        floatingId,
        events,
        open,
        onOpenChange,
        refs,
        elements
    ]);
    index(()=>{
        const node = tree == null ? void 0 : tree.nodesRef.current.find((node)=>node.id === nodeId);
        if (node) {
            node.context = context;
        }
    });
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useMemo(()=>({
            ...position,
            context,
            refs,
            elements
        }), [
        position,
        refs,
        elements,
        context
    ]);
}
/**
 * Opens the floating element while the reference element has focus, like CSS
 * `:focus`.
 * @see https://floating-ui.com/docs/useFocus
 */ function useFocus(context, props) {
    if (props === void 0) {
        props = {};
    }
    const { open, onOpenChange, events, refs, elements: { domReference } } = context;
    const { enabled = true, visibleOnly = true } = props;
    const blockFocusRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(false);
    const timeoutRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef();
    const keyboardModalityRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(true);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useEffect(()=>{
        if (!enabled) {
            return;
        }
        const win = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getWindow"](domReference);
        // If the reference was focused and the user left the tab/window, and the
        // floating element was not open, the focus should be blocked when they
        // return to the tab/window.
        function onBlur() {
            if (!open && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isHTMLElement"](domReference) && domReference === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["activeElement"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getDocument"](domReference))) {
                blockFocusRef.current = true;
            }
        }
        function onKeyDown() {
            keyboardModalityRef.current = true;
        }
        win.addEventListener('blur', onBlur);
        win.addEventListener('keydown', onKeyDown, true);
        return ()=>{
            win.removeEventListener('blur', onBlur);
            win.removeEventListener('keydown', onKeyDown, true);
        };
    }, [
        domReference,
        open,
        enabled
    ]);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useEffect(()=>{
        if (!enabled) {
            return;
        }
        function onOpenChange(_ref) {
            let { reason } = _ref;
            if (reason === 'reference-press' || reason === 'escape-key') {
                blockFocusRef.current = true;
            }
        }
        events.on('openchange', onOpenChange);
        return ()=>{
            events.off('openchange', onOpenChange);
        };
    }, [
        events,
        enabled
    ]);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useEffect(()=>{
        return ()=>{
            clearTimeout(timeoutRef.current);
        };
    }, []);
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useMemo(()=>{
        if (!enabled) {
            return {};
        }
        return {
            reference: {
                onPointerDown (event) {
                    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isVirtualPointerEvent"](event.nativeEvent)) return;
                    keyboardModalityRef.current = false;
                },
                onMouseLeave () {
                    blockFocusRef.current = false;
                },
                onFocus (event) {
                    if (blockFocusRef.current) return;
                    const target = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getTarget"](event.nativeEvent);
                    if (visibleOnly && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isElement"](target)) {
                        try {
                            // Mac Safari unreliably matches `:focus-visible` on the reference
                            // if focus was outside the page initially - use the fallback
                            // instead.
                            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSafari"]() && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isMac"]()) throw Error();
                            if (!target.matches(':focus-visible')) return;
                        } catch (e) {
                            // Old browsers will throw an error when using `:focus-visible`.
                            if (!keyboardModalityRef.current && !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isTypeableElement"](target)) {
                                return;
                            }
                        }
                    }
                    onOpenChange(true, event.nativeEvent, 'focus');
                },
                onBlur (event) {
                    blockFocusRef.current = false;
                    const relatedTarget = event.relatedTarget;
                    // Hit the non-modal focus management portal guard. Focus will be
                    // moved into the floating element immediately after.
                    const movedToFocusGuard = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isElement"](relatedTarget) && relatedTarget.hasAttribute(createAttribute('focus-guard')) && relatedTarget.getAttribute('data-type') === 'outside';
                    // Wait for the window blur listener to fire.
                    timeoutRef.current = window.setTimeout(()=>{
                        const activeEl = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["activeElement"](domReference ? domReference.ownerDocument : document);
                        // Focus left the page, keep it open.
                        if (!relatedTarget && activeEl === domReference) return;
                        // When focusing the reference element (e.g. regular click), then
                        // clicking into the floating element, prevent it from hiding.
                        // Note: it must be focusable, e.g. `tabindex="-1"`.
                        // We can not rely on relatedTarget to point to the correct element
                        // as it will only point to the shadow host of the newly focused element
                        // and not the element that actually has received focus if it is located
                        // inside a shadow root.
                        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["contains"](refs.floating.current, activeEl) || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["contains"](domReference, activeEl) || movedToFocusGuard) {
                            return;
                        }
                        onOpenChange(false, event.nativeEvent, 'focus');
                    });
                }
            }
        };
    }, [
        enabled,
        visibleOnly,
        domReference,
        refs,
        onOpenChange
    ]);
}
const ACTIVE_KEY = 'active';
const SELECTED_KEY = 'selected';
function mergeProps(userProps, propsList, elementKey) {
    const map = new Map();
    const isItem = elementKey === 'item';
    let domUserProps = userProps;
    if (isItem && userProps) {
        const { [ACTIVE_KEY]: _, [SELECTED_KEY]: __, ...validProps } = userProps;
        domUserProps = validProps;
    }
    return {
        ...elementKey === 'floating' && {
            tabIndex: -1
        },
        ...domUserProps,
        ...propsList.map((value)=>{
            const propsOrGetProps = value ? value[elementKey] : null;
            if (typeof propsOrGetProps === 'function') {
                return userProps ? propsOrGetProps(userProps) : null;
            }
            return propsOrGetProps;
        }).concat(userProps).reduce((acc, props)=>{
            if (!props) {
                return acc;
            }
            Object.entries(props).forEach((_ref)=>{
                let [key, value] = _ref;
                if (isItem && [
                    ACTIVE_KEY,
                    SELECTED_KEY
                ].includes(key)) {
                    return;
                }
                if (key.indexOf('on') === 0) {
                    if (!map.has(key)) {
                        map.set(key, []);
                    }
                    if (typeof value === 'function') {
                        var _map$get;
                        (_map$get = map.get(key)) == null || _map$get.push(value);
                        acc[key] = function() {
                            var _map$get2;
                            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                                args[_key] = arguments[_key];
                            }
                            return (_map$get2 = map.get(key)) == null ? void 0 : _map$get2.map((fn)=>fn(...args)).find((val)=>val !== undefined);
                        };
                    }
                } else {
                    acc[key] = value;
                }
            });
            return acc;
        }, {})
    };
}
/**
 * Merges an array of interaction hooks' props into prop getters, allowing
 * event handler functions to be composed together without overwriting one
 * another.
 * @see https://floating-ui.com/docs/useInteractions
 */ function useInteractions(propsList) {
    if (propsList === void 0) {
        propsList = [];
    }
    // The dependencies are a dynamic array, so we can't use the linter's
    // suggestion to add it to the deps array.
    const deps = propsList;
    const getReferenceProps = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useCallback((userProps)=>mergeProps(userProps, propsList, 'reference'), // eslint-disable-next-line react-hooks/exhaustive-deps
    deps);
    const getFloatingProps = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useCallback((userProps)=>mergeProps(userProps, propsList, 'floating'), // eslint-disable-next-line react-hooks/exhaustive-deps
    deps);
    const getItemProps = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useCallback((userProps)=>mergeProps(userProps, propsList, 'item'), // Granularly check for `item` changes, because the `getItemProps` getter
    // should be as referentially stable as possible since it may be passed as
    // a prop to many components. All `item` key values must therefore be
    // memoized.
    // eslint-disable-next-line react-hooks/exhaustive-deps
    propsList.map((key)=>key == null ? void 0 : key.item));
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useMemo(()=>({
            getReferenceProps,
            getFloatingProps,
            getItemProps
        }), [
        getReferenceProps,
        getFloatingProps,
        getItemProps
    ]);
}
let isPreventScrollSupported = false;
function doSwitch(orientation, vertical, horizontal) {
    switch(orientation){
        case 'vertical':
            return vertical;
        case 'horizontal':
            return horizontal;
        default:
            return vertical || horizontal;
    }
}
function isMainOrientationKey(key, orientation) {
    const vertical = key === ARROW_UP || key === ARROW_DOWN;
    const horizontal = key === ARROW_LEFT || key === ARROW_RIGHT;
    return doSwitch(orientation, vertical, horizontal);
}
function isMainOrientationToEndKey(key, orientation, rtl) {
    const vertical = key === ARROW_DOWN;
    const horizontal = rtl ? key === ARROW_LEFT : key === ARROW_RIGHT;
    return doSwitch(orientation, vertical, horizontal) || key === 'Enter' || key === ' ' || key === '';
}
function isCrossOrientationOpenKey(key, orientation, rtl) {
    const vertical = rtl ? key === ARROW_LEFT : key === ARROW_RIGHT;
    const horizontal = key === ARROW_DOWN;
    return doSwitch(orientation, vertical, horizontal);
}
function isCrossOrientationCloseKey(key, orientation, rtl) {
    const vertical = rtl ? key === ARROW_RIGHT : key === ARROW_LEFT;
    const horizontal = key === ARROW_UP;
    return doSwitch(orientation, vertical, horizontal);
}
/**
 * Adds arrow key-based navigation of a list of items, either using real DOM
 * focus or virtual focus.
 * @see https://floating-ui.com/docs/useListNavigation
 */ function useListNavigation(context, props) {
    const { open, onOpenChange, refs, elements: { domReference, floating } } = context;
    const { listRef, activeIndex, onNavigate: unstable_onNavigate = ()=>{}, enabled = true, selectedIndex = null, allowEscape = false, loop = false, nested = false, rtl = false, virtual = false, focusItemOnOpen = 'auto', focusItemOnHover = true, openOnArrowKeyDown = true, disabledIndices = undefined, orientation = 'vertical', cols = 1, scrollItemIntoView = true, virtualItemRef, itemSizes, dense = false } = props;
    if ("TURBOPACK compile-time truthy", 1) {
        if (allowEscape) {
            if (!loop) {
                warn('`useListNavigation` looping must be enabled to allow escaping.');
            }
            if (!virtual) {
                warn('`useListNavigation` must be virtual to allow escaping.');
            }
        }
        if (orientation === 'vertical' && cols > 1) {
            warn('In grid list navigation mode (`cols` > 1), the `orientation` should', 'be either "horizontal" or "both".');
        }
    }
    const parentId = useFloatingParentNodeId();
    const tree = useFloatingTree();
    const onNavigate = useEffectEvent(unstable_onNavigate);
    const focusItemOnOpenRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(focusItemOnOpen);
    const indexRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(selectedIndex != null ? selectedIndex : -1);
    const keyRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(null);
    const isPointerModalityRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(true);
    const previousOnNavigateRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(onNavigate);
    const previousMountedRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(!!floating);
    const forceSyncFocus = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(false);
    const forceScrollIntoViewRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(false);
    const disabledIndicesRef = useLatestRef(disabledIndices);
    const latestOpenRef = useLatestRef(open);
    const scrollItemIntoViewRef = useLatestRef(scrollItemIntoView);
    const [activeId, setActiveId] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useState();
    const [virtualId, setVirtualId] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useState();
    const focusItem = useEffectEvent(function(listRef, indexRef, forceScrollIntoView) {
        if (forceScrollIntoView === void 0) {
            forceScrollIntoView = false;
        }
        const item = listRef.current[indexRef.current];
        if (!item) return;
        if (virtual) {
            setActiveId(item.id);
            tree == null || tree.events.emit('virtualfocus', item);
            if (virtualItemRef) {
                virtualItemRef.current = item;
            }
        } else {
            enqueueFocus(item, {
                preventScroll: true,
                // Mac Safari does not move the virtual cursor unless the focus call
                // is sync. However, for the very first focus call, we need to wait
                // for the position to be ready in order to prevent unwanted
                // scrolling. This means the virtual cursor will not move to the first
                // item when first opening the floating element, but will on
                // subsequent calls. `preventScroll` is supported in modern Safari,
                // so we can use that instead.
                // iOS Safari must be async or the first item will not be focused.
                sync: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isMac"]() && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSafari"]() ? isPreventScrollSupported || forceSyncFocus.current : false
            });
        }
        requestAnimationFrame(()=>{
            const scrollIntoViewOptions = scrollItemIntoViewRef.current;
            const shouldScrollIntoView = scrollIntoViewOptions && item && (forceScrollIntoView || !isPointerModalityRef.current);
            if (shouldScrollIntoView) {
                // JSDOM doesn't support `.scrollIntoView()` but it's widely supported
                // by all browsers.
                item.scrollIntoView == null || item.scrollIntoView(typeof scrollIntoViewOptions === 'boolean' ? {
                    block: 'nearest',
                    inline: 'nearest'
                } : scrollIntoViewOptions);
            }
        });
    });
    index(()=>{
        document.createElement('div').focus({
            get preventScroll () {
                isPreventScrollSupported = true;
                return false;
            }
        });
    }, []);
    // Sync `selectedIndex` to be the `activeIndex` upon opening the floating
    // element. Also, reset `activeIndex` upon closing the floating element.
    index(()=>{
        if (!enabled) {
            return;
        }
        if (open && floating) {
            if (focusItemOnOpenRef.current && selectedIndex != null) {
                // Regardless of the pointer modality, we want to ensure the selected
                // item comes into view when the floating element is opened.
                forceScrollIntoViewRef.current = true;
                indexRef.current = selectedIndex;
                onNavigate(selectedIndex);
            }
        } else if (previousMountedRef.current) {
            // Since the user can specify `onNavigate` conditionally
            // (onNavigate: open ? setActiveIndex : setSelectedIndex),
            // we store and call the previous function.
            indexRef.current = -1;
            previousOnNavigateRef.current(null);
        }
    }, [
        enabled,
        open,
        floating,
        selectedIndex,
        onNavigate
    ]);
    // Sync `activeIndex` to be the focused item while the floating element is
    // open.
    index(()=>{
        if (!enabled) {
            return;
        }
        if (open && floating) {
            if (activeIndex == null) {
                forceSyncFocus.current = false;
                if (selectedIndex != null) {
                    return;
                }
                // Reset while the floating element was open (e.g. the list changed).
                if (previousMountedRef.current) {
                    indexRef.current = -1;
                    focusItem(listRef, indexRef);
                }
                // Initial sync.
                if (!previousMountedRef.current && focusItemOnOpenRef.current && (keyRef.current != null || focusItemOnOpenRef.current === true && keyRef.current == null)) {
                    let runs = 0;
                    const waitForListPopulated = ()=>{
                        if (listRef.current[0] == null) {
                            // Avoid letting the browser paint if possible on the first try,
                            // otherwise use rAF. Don't try more than twice, since something
                            // is wrong otherwise.
                            if (runs < 2) {
                                const scheduler = runs ? requestAnimationFrame : queueMicrotask;
                                scheduler(waitForListPopulated);
                            }
                            runs++;
                        } else {
                            indexRef.current = keyRef.current == null || isMainOrientationToEndKey(keyRef.current, orientation, rtl) || nested ? getMinIndex(listRef, disabledIndicesRef.current) : getMaxIndex(listRef, disabledIndicesRef.current);
                            keyRef.current = null;
                            onNavigate(indexRef.current);
                        }
                    };
                    waitForListPopulated();
                }
            } else if (!isIndexOutOfBounds(listRef, activeIndex)) {
                indexRef.current = activeIndex;
                focusItem(listRef, indexRef, forceScrollIntoViewRef.current);
                forceScrollIntoViewRef.current = false;
            }
        }
    }, [
        enabled,
        open,
        floating,
        activeIndex,
        selectedIndex,
        nested,
        listRef,
        orientation,
        rtl,
        onNavigate,
        focusItem,
        disabledIndicesRef
    ]);
    // Ensure the parent floating element has focus when a nested child closes
    // to allow arrow key navigation to work after the pointer leaves the child.
    index(()=>{
        var _nodes$find;
        if (!enabled || floating || !tree || virtual || !previousMountedRef.current) {
            return;
        }
        const nodes = tree.nodesRef.current;
        const parent = (_nodes$find = nodes.find((node)=>node.id === parentId)) == null || (_nodes$find = _nodes$find.context) == null ? void 0 : _nodes$find.elements.floating;
        const activeEl = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["activeElement"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getDocument"](floating));
        const treeContainsActiveEl = nodes.some((node)=>node.context && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["contains"](node.context.elements.floating, activeEl));
        if (parent && !treeContainsActiveEl && isPointerModalityRef.current) {
            parent.focus({
                preventScroll: true
            });
        }
    }, [
        enabled,
        floating,
        tree,
        parentId,
        virtual
    ]);
    index(()=>{
        if (!enabled || !tree || !virtual || parentId) return;
        function handleVirtualFocus(item) {
            setVirtualId(item.id);
            if (virtualItemRef) {
                virtualItemRef.current = item;
            }
        }
        tree.events.on('virtualfocus', handleVirtualFocus);
        return ()=>{
            tree.events.off('virtualfocus', handleVirtualFocus);
        };
    }, [
        enabled,
        tree,
        virtual,
        parentId,
        virtualItemRef
    ]);
    index(()=>{
        previousOnNavigateRef.current = onNavigate;
        previousMountedRef.current = !!floating;
    });
    index(()=>{
        if (!open) {
            keyRef.current = null;
        }
    }, [
        open
    ]);
    const hasActiveIndex = activeIndex != null;
    const item = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useMemo(()=>{
        function syncCurrentTarget(currentTarget) {
            if (!open) return;
            const index = listRef.current.indexOf(currentTarget);
            if (index !== -1) {
                onNavigate(index);
            }
        }
        const props = {
            onFocus (_ref) {
                let { currentTarget } = _ref;
                syncCurrentTarget(currentTarget);
            },
            onClick: (_ref2)=>{
                let { currentTarget } = _ref2;
                return currentTarget.focus({
                    preventScroll: true
                });
            },
            // Safari
            ...focusItemOnHover && {
                onMouseMove (_ref3) {
                    let { currentTarget } = _ref3;
                    syncCurrentTarget(currentTarget);
                },
                onPointerLeave (_ref4) {
                    let { pointerType } = _ref4;
                    if (!isPointerModalityRef.current || pointerType === 'touch') {
                        return;
                    }
                    indexRef.current = -1;
                    focusItem(listRef, indexRef);
                    onNavigate(null);
                    if (!virtual) {
                        enqueueFocus(refs.floating.current, {
                            preventScroll: true
                        });
                    }
                }
            }
        };
        return props;
    }, [
        open,
        refs,
        focusItem,
        focusItemOnHover,
        listRef,
        onNavigate,
        virtual
    ]);
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useMemo(()=>{
        if (!enabled) {
            return {};
        }
        const disabledIndices = disabledIndicesRef.current;
        function onKeyDown(event) {
            isPointerModalityRef.current = false;
            forceSyncFocus.current = true;
            // If the floating element is animating out, ignore navigation. Otherwise,
            // the `activeIndex` gets set to 0 despite not being open so the next time
            // the user ArrowDowns, the first item won't be focused.
            if (!latestOpenRef.current && event.currentTarget === refs.floating.current) {
                return;
            }
            if (nested && isCrossOrientationCloseKey(event.key, orientation, rtl)) {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stopEvent"](event);
                onOpenChange(false, event.nativeEvent, 'list-navigation');
                if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isHTMLElement"](domReference) && !virtual) {
                    domReference.focus();
                }
                return;
            }
            const currentIndex = indexRef.current;
            const minIndex = getMinIndex(listRef, disabledIndices);
            const maxIndex = getMaxIndex(listRef, disabledIndices);
            if (event.key === 'Home') {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stopEvent"](event);
                indexRef.current = minIndex;
                onNavigate(indexRef.current);
            }
            if (event.key === 'End') {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stopEvent"](event);
                indexRef.current = maxIndex;
                onNavigate(indexRef.current);
            }
            // Grid navigation.
            if (cols > 1) {
                const sizes = itemSizes || Array.from({
                    length: listRef.current.length
                }, ()=>({
                        width: 1,
                        height: 1
                    }));
                // To calculate movements on the grid, we use hypothetical cell indices
                // as if every item was 1x1, then convert back to real indices.
                const cellMap = buildCellMap(sizes, cols, dense);
                const minGridIndex = cellMap.findIndex((index)=>index != null && !(disabledIndices != null && disabledIndices.includes(index)));
                // last enabled index
                const maxGridIndex = cellMap.reduce((foundIndex, index, cellIndex)=>index != null && !(disabledIndices != null && disabledIndices.includes(index)) ? cellIndex : foundIndex, -1);
                indexRef.current = cellMap[getGridNavigatedIndex({
                    current: cellMap.map((itemIndex)=>itemIndex != null ? listRef.current[itemIndex] : null)
                }, {
                    event,
                    orientation,
                    loop,
                    cols,
                    // treat undefined (empty grid spaces) as disabled indices so we
                    // don't end up in them
                    disabledIndices: getCellIndices([
                        ...disabledIndices || [],
                        undefined
                    ], cellMap),
                    minIndex: minGridIndex,
                    maxIndex: maxGridIndex,
                    prevIndex: getCellIndexOfCorner(indexRef.current, sizes, cellMap, cols, // use a corner matching the edge closest to the direction
                    // we're moving in so we don't end up in the same item. Prefer
                    // top/left over bottom/right.
                    event.key === ARROW_DOWN ? 'bl' : event.key === ARROW_RIGHT ? 'tr' : 'tl'),
                    stopEvent: true
                })]; // navigated cell will never be nullish
                onNavigate(indexRef.current);
                if (orientation === 'both') {
                    return;
                }
            }
            if (isMainOrientationKey(event.key, orientation)) {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stopEvent"](event);
                // Reset the index if no item is focused.
                if (open && !virtual && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["activeElement"](event.currentTarget.ownerDocument) === event.currentTarget) {
                    indexRef.current = isMainOrientationToEndKey(event.key, orientation, rtl) ? minIndex : maxIndex;
                    onNavigate(indexRef.current);
                    return;
                }
                if (isMainOrientationToEndKey(event.key, orientation, rtl)) {
                    if (loop) {
                        indexRef.current = currentIndex >= maxIndex ? allowEscape && currentIndex !== listRef.current.length ? -1 : minIndex : findNonDisabledIndex(listRef, {
                            startingIndex: currentIndex,
                            disabledIndices
                        });
                    } else {
                        indexRef.current = Math.min(maxIndex, findNonDisabledIndex(listRef, {
                            startingIndex: currentIndex,
                            disabledIndices
                        }));
                    }
                } else {
                    if (loop) {
                        indexRef.current = currentIndex <= minIndex ? allowEscape && currentIndex !== -1 ? listRef.current.length : maxIndex : findNonDisabledIndex(listRef, {
                            startingIndex: currentIndex,
                            decrement: true,
                            disabledIndices
                        });
                    } else {
                        indexRef.current = Math.max(minIndex, findNonDisabledIndex(listRef, {
                            startingIndex: currentIndex,
                            decrement: true,
                            disabledIndices
                        }));
                    }
                }
                if (isIndexOutOfBounds(listRef, indexRef.current)) {
                    onNavigate(null);
                } else {
                    onNavigate(indexRef.current);
                }
            }
        }
        function checkVirtualMouse(event) {
            if (focusItemOnOpen === 'auto' && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isVirtualClick"](event.nativeEvent)) {
                focusItemOnOpenRef.current = true;
            }
        }
        function checkVirtualPointer(event) {
            // `pointerdown` fires first, reset the state then perform the checks.
            focusItemOnOpenRef.current = focusItemOnOpen;
            if (focusItemOnOpen === 'auto' && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isVirtualPointerEvent"](event.nativeEvent)) {
                focusItemOnOpenRef.current = true;
            }
        }
        const ariaActiveDescendantProp = virtual && open && hasActiveIndex && {
            'aria-activedescendant': virtualId || activeId
        };
        const activeItem = listRef.current.find((item)=>(item == null ? void 0 : item.id) === activeId);
        return {
            reference: {
                ...ariaActiveDescendantProp,
                onKeyDown (event) {
                    isPointerModalityRef.current = false;
                    const isArrowKey = event.key.indexOf('Arrow') === 0;
                    const isCrossOpenKey = isCrossOrientationOpenKey(event.key, orientation, rtl);
                    const isCrossCloseKey = isCrossOrientationCloseKey(event.key, orientation, rtl);
                    const isMainKey = isMainOrientationKey(event.key, orientation);
                    const isNavigationKey = (nested ? isCrossOpenKey : isMainKey) || event.key === 'Enter' || event.key.trim() === '';
                    if (virtual && open) {
                        const rootNode = tree == null ? void 0 : tree.nodesRef.current.find((node)=>node.parentId == null);
                        const deepestNode = tree && rootNode ? getDeepestNode(tree.nodesRef.current, rootNode.id) : null;
                        if (isArrowKey && deepestNode && virtualItemRef) {
                            const eventObject = new KeyboardEvent('keydown', {
                                key: event.key,
                                bubbles: true
                            });
                            if (isCrossOpenKey || isCrossCloseKey) {
                                var _deepestNode$context, _deepestNode$context2;
                                const isCurrentTarget = ((_deepestNode$context = deepestNode.context) == null ? void 0 : _deepestNode$context.elements.domReference) === event.currentTarget;
                                const dispatchItem = isCrossCloseKey && !isCurrentTarget ? (_deepestNode$context2 = deepestNode.context) == null ? void 0 : _deepestNode$context2.elements.domReference : isCrossOpenKey ? activeItem : null;
                                if (dispatchItem) {
                                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stopEvent"](event);
                                    dispatchItem.dispatchEvent(eventObject);
                                    setVirtualId(undefined);
                                }
                            }
                            if (isMainKey && deepestNode.context) {
                                if (deepestNode.context.open && deepestNode.parentId && event.currentTarget !== deepestNode.context.elements.domReference) {
                                    var _deepestNode$context$;
                                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stopEvent"](event);
                                    (_deepestNode$context$ = deepestNode.context.elements.domReference) == null || _deepestNode$context$.dispatchEvent(eventObject);
                                    return;
                                }
                            }
                        }
                        return onKeyDown(event);
                    }
                    // If a floating element should not open on arrow key down, avoid
                    // setting `activeIndex` while it's closed.
                    if (!open && !openOnArrowKeyDown && isArrowKey) {
                        return;
                    }
                    if (isNavigationKey) {
                        keyRef.current = nested && isMainKey ? null : event.key;
                    }
                    if (nested) {
                        if (isCrossOpenKey) {
                            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stopEvent"](event);
                            if (open) {
                                indexRef.current = getMinIndex(listRef, disabledIndices);
                                onNavigate(indexRef.current);
                            } else {
                                onOpenChange(true, event.nativeEvent, 'list-navigation');
                            }
                        }
                        return;
                    }
                    if (isMainKey) {
                        if (selectedIndex != null) {
                            indexRef.current = selectedIndex;
                        }
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stopEvent"](event);
                        if (!open && openOnArrowKeyDown) {
                            onOpenChange(true, event.nativeEvent, 'list-navigation');
                        } else {
                            onKeyDown(event);
                        }
                        if (open) {
                            onNavigate(indexRef.current);
                        }
                    }
                },
                onFocus () {
                    if (open) {
                        onNavigate(null);
                    }
                },
                onPointerDown: checkVirtualPointer,
                onMouseDown: checkVirtualMouse,
                onClick: checkVirtualMouse
            },
            floating: {
                'aria-orientation': orientation === 'both' ? undefined : orientation,
                ...!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isTypeableCombobox"](domReference) && ariaActiveDescendantProp,
                onKeyDown,
                onPointerMove () {
                    isPointerModalityRef.current = true;
                }
            },
            item
        };
    }, [
        domReference,
        refs,
        activeId,
        virtualId,
        disabledIndicesRef,
        latestOpenRef,
        listRef,
        enabled,
        orientation,
        rtl,
        virtual,
        open,
        hasActiveIndex,
        nested,
        selectedIndex,
        openOnArrowKeyDown,
        allowEscape,
        cols,
        loop,
        focusItemOnOpen,
        onNavigate,
        onOpenChange,
        item,
        tree,
        virtualItemRef,
        itemSizes,
        dense
    ]);
}
const componentRoleToAriaRoleMap = /*#__PURE__*/ new Map([
    [
        'select',
        'listbox'
    ],
    [
        'combobox',
        'listbox'
    ],
    [
        'label',
        false
    ]
]);
/**
 * Adds base screen reader props to the reference and floating elements for a
 * given floating element `role`.
 * @see https://floating-ui.com/docs/useRole
 */ function useRole(context, props) {
    var _componentRoleToAriaR;
    if (props === void 0) {
        props = {};
    }
    const { open, floatingId } = context;
    const { enabled = true, role = 'dialog' } = props;
    const ariaRole = (_componentRoleToAriaR = componentRoleToAriaRoleMap.get(role)) != null ? _componentRoleToAriaR : role;
    const referenceId = useId();
    const parentId = useFloatingParentNodeId();
    const isNested = parentId != null;
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useMemo(()=>{
        if (!enabled) return {};
        const floatingProps = {
            id: floatingId,
            ...ariaRole && {
                role: ariaRole
            }
        };
        if (ariaRole === 'tooltip' || role === 'label') {
            return {
                reference: {
                    ["aria-" + (role === 'label' ? 'labelledby' : 'describedby')]: open ? floatingId : undefined
                },
                floating: floatingProps
            };
        }
        return {
            reference: {
                'aria-expanded': open ? 'true' : 'false',
                'aria-haspopup': ariaRole === 'alertdialog' ? 'dialog' : ariaRole,
                'aria-controls': open ? floatingId : undefined,
                ...ariaRole === 'listbox' && {
                    role: 'combobox'
                },
                ...ariaRole === 'menu' && {
                    id: referenceId
                },
                ...ariaRole === 'menu' && isNested && {
                    role: 'menuitem'
                },
                ...role === 'select' && {
                    'aria-autocomplete': 'none'
                },
                ...role === 'combobox' && {
                    'aria-autocomplete': 'list'
                }
            },
            floating: {
                ...floatingProps,
                ...ariaRole === 'menu' && {
                    'aria-labelledby': referenceId
                }
            },
            item (_ref) {
                let { active, selected } = _ref;
                const commonProps = {
                    role: 'option',
                    ...active && {
                        id: floatingId + "-option"
                    }
                };
                // For `menu`, we are unable to tell if the item is a `menuitemradio`
                // or `menuitemcheckbox`. For backwards-compatibility reasons, also
                // avoid defaulting to `menuitem` as it may overwrite custom role props.
                switch(role){
                    case 'select':
                        return {
                            ...commonProps,
                            'aria-selected': active && selected
                        };
                    case 'combobox':
                        {
                            return {
                                ...commonProps,
                                ...active && {
                                    'aria-selected': true
                                }
                            };
                        }
                }
                return {};
            }
        };
    }, [
        enabled,
        role,
        ariaRole,
        open,
        floatingId,
        referenceId,
        isNested
    ]);
}
// Converts a JS style key like `backgroundColor` to a CSS transition-property
// like `background-color`.
const camelCaseToKebabCase = (str)=>str.replace(/[A-Z]+(?![a-z])|[A-Z]/g, ($, ofs)=>(ofs ? '-' : '') + $.toLowerCase());
function execWithArgsOrReturn(valueOrFn, args) {
    return typeof valueOrFn === 'function' ? valueOrFn(args) : valueOrFn;
}
function useDelayUnmount(open, durationMs) {
    const [isMounted, setIsMounted] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useState(open);
    if (open && !isMounted) {
        setIsMounted(true);
    }
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useEffect(()=>{
        if (!open) {
            const timeout = setTimeout(()=>setIsMounted(false), durationMs);
            return ()=>clearTimeout(timeout);
        }
    }, [
        open,
        durationMs
    ]);
    return isMounted;
}
/**
 * Provides a status string to apply CSS transitions to a floating element,
 * correctly handling placement-aware transitions.
 * @see https://floating-ui.com/docs/useTransition#usetransitionstatus
 */ function useTransitionStatus(context, props) {
    if (props === void 0) {
        props = {};
    }
    const { open, elements: { floating } } = context;
    const { duration = 250 } = props;
    const isNumberDuration = typeof duration === 'number';
    const closeDuration = (isNumberDuration ? duration : duration.close) || 0;
    const [initiated, setInitiated] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useState(false);
    const [status, setStatus] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useState('unmounted');
    const isMounted = useDelayUnmount(open, closeDuration);
    // `initiated` check prevents this `setState` call from breaking
    // <FloatingPortal />. This call is necessary to ensure subsequent opens
    // after the initial one allows the correct side animation to play when the
    // placement has changed.
    index(()=>{
        if (initiated && !isMounted) {
            setStatus('unmounted');
        }
    }, [
        initiated,
        isMounted
    ]);
    index(()=>{
        if (!floating) return;
        if (open) {
            setStatus('initial');
            const frame = requestAnimationFrame(()=>{
                setStatus('open');
            });
            return ()=>{
                cancelAnimationFrame(frame);
            };
        }
        setInitiated(true);
        setStatus('close');
    }, [
        open,
        floating
    ]);
    return {
        isMounted,
        status
    };
}
/**
 * Provides styles to apply CSS transitions to a floating element, correctly
 * handling placement-aware transitions. Wrapper around `useTransitionStatus`.
 * @see https://floating-ui.com/docs/useTransition#usetransitionstyles
 */ function useTransitionStyles(context, props) {
    if (props === void 0) {
        props = {};
    }
    const { initial: unstable_initial = {
        opacity: 0
    }, open: unstable_open, close: unstable_close, common: unstable_common, duration = 250 } = props;
    const placement = context.placement;
    const side = placement.split('-')[0];
    const fnArgs = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useMemo(()=>({
            side,
            placement
        }), [
        side,
        placement
    ]);
    const isNumberDuration = typeof duration === 'number';
    const openDuration = (isNumberDuration ? duration : duration.open) || 0;
    const closeDuration = (isNumberDuration ? duration : duration.close) || 0;
    const [styles, setStyles] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useState(()=>({
            ...execWithArgsOrReturn(unstable_common, fnArgs),
            ...execWithArgsOrReturn(unstable_initial, fnArgs)
        }));
    const { isMounted, status } = useTransitionStatus(context, {
        duration
    });
    const initialRef = useLatestRef(unstable_initial);
    const openRef = useLatestRef(unstable_open);
    const closeRef = useLatestRef(unstable_close);
    const commonRef = useLatestRef(unstable_common);
    index(()=>{
        const initialStyles = execWithArgsOrReturn(initialRef.current, fnArgs);
        const closeStyles = execWithArgsOrReturn(closeRef.current, fnArgs);
        const commonStyles = execWithArgsOrReturn(commonRef.current, fnArgs);
        const openStyles = execWithArgsOrReturn(openRef.current, fnArgs) || Object.keys(initialStyles).reduce((acc, key)=>{
            acc[key] = '';
            return acc;
        }, {});
        if (status === 'initial') {
            setStyles((styles)=>({
                    transitionProperty: styles.transitionProperty,
                    ...commonStyles,
                    ...initialStyles
                }));
        }
        if (status === 'open') {
            setStyles({
                transitionProperty: Object.keys(openStyles).map(camelCaseToKebabCase).join(','),
                transitionDuration: openDuration + "ms",
                ...commonStyles,
                ...openStyles
            });
        }
        if (status === 'close') {
            const styles = closeStyles || initialStyles;
            setStyles({
                transitionProperty: Object.keys(styles).map(camelCaseToKebabCase).join(','),
                transitionDuration: closeDuration + "ms",
                ...commonStyles,
                ...styles
            });
        }
    }, [
        closeDuration,
        closeRef,
        initialRef,
        openRef,
        commonRef,
        openDuration,
        status,
        fnArgs
    ]);
    return {
        isMounted,
        styles
    };
}
/**
 * Provides a matching callback that can be used to focus an item as the user
 * types, often used in tandem with `useListNavigation()`.
 * @see https://floating-ui.com/docs/useTypeahead
 */ function useTypeahead(context, props) {
    var _ref;
    const { open, dataRef } = context;
    const { listRef, activeIndex, onMatch: unstable_onMatch, onTypingChange: unstable_onTypingChange, enabled = true, findMatch = null, resetMs = 750, ignoreKeys = [], selectedIndex = null } = props;
    const timeoutIdRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef();
    const stringRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef('');
    const prevIndexRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef((_ref = selectedIndex != null ? selectedIndex : activeIndex) != null ? _ref : -1);
    const matchIndexRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(null);
    const onMatch = useEffectEvent(unstable_onMatch);
    const onTypingChange = useEffectEvent(unstable_onTypingChange);
    const findMatchRef = useLatestRef(findMatch);
    const ignoreKeysRef = useLatestRef(ignoreKeys);
    index(()=>{
        if (open) {
            clearTimeout(timeoutIdRef.current);
            matchIndexRef.current = null;
            stringRef.current = '';
        }
    }, [
        open
    ]);
    index(()=>{
        // Sync arrow key navigation but not typeahead navigation.
        if (open && stringRef.current === '') {
            var _ref2;
            prevIndexRef.current = (_ref2 = selectedIndex != null ? selectedIndex : activeIndex) != null ? _ref2 : -1;
        }
    }, [
        open,
        selectedIndex,
        activeIndex
    ]);
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useMemo(()=>{
        if (!enabled) {
            return {};
        }
        function setTypingChange(value) {
            if (value) {
                if (!dataRef.current.typing) {
                    dataRef.current.typing = value;
                    onTypingChange(value);
                }
            } else {
                if (dataRef.current.typing) {
                    dataRef.current.typing = value;
                    onTypingChange(value);
                }
            }
        }
        function getMatchingIndex(list, orderedList, string) {
            const str = findMatchRef.current ? findMatchRef.current(orderedList, string) : orderedList.find((text)=>(text == null ? void 0 : text.toLocaleLowerCase().indexOf(string.toLocaleLowerCase())) === 0);
            return str ? list.indexOf(str) : -1;
        }
        function onKeyDown(event) {
            const listContent = listRef.current;
            if (stringRef.current.length > 0 && stringRef.current[0] !== ' ') {
                if (getMatchingIndex(listContent, listContent, stringRef.current) === -1) {
                    setTypingChange(false);
                } else if (event.key === ' ') {
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stopEvent"](event);
                }
            }
            if (listContent == null || ignoreKeysRef.current.includes(event.key) || // Character key.
            event.key.length !== 1 || // Modifier key.
            event.ctrlKey || event.metaKey || event.altKey) {
                return;
            }
            if (open && event.key !== ' ') {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stopEvent"](event);
                setTypingChange(true);
            }
            // Bail out if the list contains a word like "llama" or "aaron". TODO:
            // allow it in this case, too.
            const allowRapidSuccessionOfFirstLetter = listContent.every((text)=>{
                var _text$, _text$2;
                return text ? ((_text$ = text[0]) == null ? void 0 : _text$.toLocaleLowerCase()) !== ((_text$2 = text[1]) == null ? void 0 : _text$2.toLocaleLowerCase()) : true;
            });
            // Allows the user to cycle through items that start with the same letter
            // in rapid succession.
            if (allowRapidSuccessionOfFirstLetter && stringRef.current === event.key) {
                stringRef.current = '';
                prevIndexRef.current = matchIndexRef.current;
            }
            stringRef.current += event.key;
            clearTimeout(timeoutIdRef.current);
            timeoutIdRef.current = setTimeout(()=>{
                stringRef.current = '';
                prevIndexRef.current = matchIndexRef.current;
                setTypingChange(false);
            }, resetMs);
            const prevIndex = prevIndexRef.current;
            const index = getMatchingIndex(listContent, [
                ...listContent.slice((prevIndex || 0) + 1),
                ...listContent.slice(0, (prevIndex || 0) + 1)
            ], stringRef.current);
            if (index !== -1) {
                onMatch(index);
                matchIndexRef.current = index;
            } else if (event.key !== ' ') {
                stringRef.current = '';
                setTypingChange(false);
            }
        }
        return {
            reference: {
                onKeyDown
            },
            floating: {
                onKeyDown,
                onKeyUp (event) {
                    if (event.key === ' ') {
                        setTypingChange(false);
                    }
                }
            }
        };
    }, [
        enabled,
        open,
        dataRef,
        listRef,
        resetMs,
        ignoreKeysRef,
        findMatchRef,
        onMatch,
        onTypingChange
    ]);
}
function getArgsWithCustomFloatingHeight(state, height) {
    return {
        ...state,
        rects: {
            ...state.rects,
            floating: {
                ...state.rects.floating,
                height
            }
        }
    };
}
/**
 * Positions the floating element such that an inner element inside
 * of it is anchored to the reference element.
 * @see https://floating-ui.com/docs/inner
 */ const inner = (props)=>({
        name: 'inner',
        options: props,
        async fn (state) {
            const { listRef, overflowRef, onFallbackChange, offset: innerOffset = 0, index = 0, minItemsVisible = 4, referenceOverflowThreshold = 0, scrollRef, ...detectOverflowOptions } = props;
            const { rects, elements: { floating } } = state;
            const item = listRef.current[index];
            if ("TURBOPACK compile-time truthy", 1) {
                if (!state.placement.startsWith('bottom')) {
                    warn('`placement` side must be "bottom" when using the `inner`', 'middleware.');
                }
            }
            if (!item) {
                return {};
            }
            const nextArgs = {
                ...state,
                ...await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$core$2f$dist$2f$floating$2d$ui$2e$core$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["offset"](-item.offsetTop - floating.clientTop - rects.reference.height / 2 - item.offsetHeight / 2 - innerOffset).fn(state)
            };
            const el = (scrollRef == null ? void 0 : scrollRef.current) || floating;
            const overflow = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$core$2f$dist$2f$floating$2d$ui$2e$core$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["detectOverflow"](getArgsWithCustomFloatingHeight(nextArgs, el.scrollHeight), detectOverflowOptions);
            const refOverflow = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$core$2f$dist$2f$floating$2d$ui$2e$core$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["detectOverflow"](nextArgs, {
                ...detectOverflowOptions,
                elementContext: 'reference'
            });
            const diffY = Math.max(0, overflow.top);
            const nextY = nextArgs.y + diffY;
            const maxHeight = Math.max(0, el.scrollHeight - diffY - Math.max(0, overflow.bottom));
            el.style.maxHeight = maxHeight + "px";
            el.scrollTop = diffY;
            // There is not enough space, fallback to standard anchored positioning
            if (onFallbackChange) {
                if (el.offsetHeight < item.offsetHeight * Math.min(minItemsVisible, listRef.current.length - 1) - 1 || refOverflow.top >= -referenceOverflowThreshold || refOverflow.bottom >= -referenceOverflowThreshold) {
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$dom$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flushSync"](()=>onFallbackChange(true));
                } else {
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$dom$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flushSync"](()=>onFallbackChange(false));
                }
            }
            if (overflowRef) {
                overflowRef.current = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$core$2f$dist$2f$floating$2d$ui$2e$core$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["detectOverflow"](getArgsWithCustomFloatingHeight({
                    ...nextArgs,
                    y: nextY
                }, el.offsetHeight), detectOverflowOptions);
            }
            return {
                y: nextY
            };
        }
    });
/**
 * Changes the `inner` middleware's `offset` upon a `wheel` event to
 * expand the floating element's height, revealing more list items.
 * @see https://floating-ui.com/docs/inner
 */ function useInnerOffset(context, props) {
    const { open, elements } = context;
    const { enabled = true, overflowRef, scrollRef, onChange: unstable_onChange } = props;
    const onChange = useEffectEvent(unstable_onChange);
    const controlledScrollingRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(false);
    const prevScrollTopRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(null);
    const initialOverflowRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useRef(null);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useEffect(()=>{
        if (!enabled) {
            return;
        }
        function onWheel(e) {
            if (e.ctrlKey || !el || overflowRef.current == null) {
                return;
            }
            const dY = e.deltaY;
            const isAtTop = overflowRef.current.top >= -0.5;
            const isAtBottom = overflowRef.current.bottom >= -0.5;
            const remainingScroll = el.scrollHeight - el.clientHeight;
            const sign = dY < 0 ? -1 : 1;
            const method = dY < 0 ? 'max' : 'min';
            if (el.scrollHeight <= el.clientHeight) {
                return;
            }
            if (!isAtTop && dY > 0 || !isAtBottom && dY < 0) {
                e.preventDefault();
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$dom$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flushSync"](()=>{
                    onChange((d)=>d + Math[method](dY, remainingScroll * sign));
                });
            } else if (/firefox/i.test(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getUserAgent"]())) {
                // Needed to propagate scrolling during momentum scrolling phase once
                // it gets limited by the boundary. UX improvement, not critical.
                el.scrollTop += dY;
            }
        }
        const el = (scrollRef == null ? void 0 : scrollRef.current) || elements.floating;
        if (open && el) {
            el.addEventListener('wheel', onWheel);
            // Wait for the position to be ready.
            requestAnimationFrame(()=>{
                prevScrollTopRef.current = el.scrollTop;
                if (overflowRef.current != null) {
                    initialOverflowRef.current = {
                        ...overflowRef.current
                    };
                }
            });
            return ()=>{
                prevScrollTopRef.current = null;
                initialOverflowRef.current = null;
                el.removeEventListener('wheel', onWheel);
            };
        }
    }, [
        enabled,
        open,
        elements.floating,
        overflowRef,
        scrollRef,
        onChange
    ]);
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.useMemo(()=>{
        if (!enabled) {
            return {};
        }
        return {
            floating: {
                onKeyDown () {
                    controlledScrollingRef.current = true;
                },
                onWheel () {
                    controlledScrollingRef.current = false;
                },
                onPointerMove () {
                    controlledScrollingRef.current = false;
                },
                onScroll () {
                    const el = (scrollRef == null ? void 0 : scrollRef.current) || elements.floating;
                    if (!overflowRef.current || !el || !controlledScrollingRef.current) {
                        return;
                    }
                    if (prevScrollTopRef.current !== null) {
                        const scrollDiff = el.scrollTop - prevScrollTopRef.current;
                        if (overflowRef.current.bottom < -0.5 && scrollDiff < -1 || overflowRef.current.top < -0.5 && scrollDiff > 1) {
                            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$dom$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["flushSync"](()=>onChange((d)=>d + scrollDiff));
                        }
                    }
                    // [Firefox] Wait for the height change to have been applied.
                    requestAnimationFrame(()=>{
                        prevScrollTopRef.current = el.scrollTop;
                    });
                }
            }
        };
    }, [
        enabled,
        overflowRef,
        elements.floating,
        scrollRef,
        onChange
    ]);
}
function isPointInPolygon(point, polygon) {
    const [x, y] = point;
    let isInside = false;
    const length = polygon.length;
    for(let i = 0, j = length - 1; i < length; j = i++){
        const [xi, yi] = polygon[i] || [
            0,
            0
        ];
        const [xj, yj] = polygon[j] || [
            0,
            0
        ];
        const intersect = yi >= y !== yj >= y && x <= (xj - xi) * (y - yi) / (yj - yi) + xi;
        if (intersect) {
            isInside = !isInside;
        }
    }
    return isInside;
}
function isInside(point, rect) {
    return point[0] >= rect.x && point[0] <= rect.x + rect.width && point[1] >= rect.y && point[1] <= rect.y + rect.height;
}
/**
 * Generates a safe polygon area that the user can traverse without closing the
 * floating element once leaving the reference element.
 * @see https://floating-ui.com/docs/useHover#safepolygon
 */ function safePolygon(options) {
    if (options === void 0) {
        options = {};
    }
    const { buffer = 0.5, blockPointerEvents = false, requireIntent = true } = options;
    let timeoutId;
    let hasLanded = false;
    let lastX = null;
    let lastY = null;
    let lastCursorTime = performance.now();
    function getCursorSpeed(x, y) {
        const currentTime = performance.now();
        const elapsedTime = currentTime - lastCursorTime;
        if (lastX === null || lastY === null || elapsedTime === 0) {
            lastX = x;
            lastY = y;
            lastCursorTime = currentTime;
            return null;
        }
        const deltaX = x - lastX;
        const deltaY = y - lastY;
        const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
        const speed = distance / elapsedTime; // px / ms
        lastX = x;
        lastY = y;
        lastCursorTime = currentTime;
        return speed;
    }
    const fn = (_ref)=>{
        let { x, y, placement, elements, onClose, nodeId, tree } = _ref;
        return function onMouseMove(event) {
            function close() {
                clearTimeout(timeoutId);
                onClose();
            }
            clearTimeout(timeoutId);
            if (!elements.domReference || !elements.floating || placement == null || x == null || y == null) {
                return;
            }
            const { clientX, clientY } = event;
            const clientPoint = [
                clientX,
                clientY
            ];
            const target = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getTarget"](event);
            const isLeave = event.type === 'mouseleave';
            const isOverFloatingEl = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["contains"](elements.floating, target);
            const isOverReferenceEl = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["contains"](elements.domReference, target);
            const refRect = elements.domReference.getBoundingClientRect();
            const rect = elements.floating.getBoundingClientRect();
            const side = placement.split('-')[0];
            const cursorLeaveFromRight = x > rect.right - rect.width / 2;
            const cursorLeaveFromBottom = y > rect.bottom - rect.height / 2;
            const isOverReferenceRect = isInside(clientPoint, refRect);
            const isFloatingWider = rect.width > refRect.width;
            const isFloatingTaller = rect.height > refRect.height;
            const left = (isFloatingWider ? refRect : rect).left;
            const right = (isFloatingWider ? refRect : rect).right;
            const top = (isFloatingTaller ? refRect : rect).top;
            const bottom = (isFloatingTaller ? refRect : rect).bottom;
            if (isOverFloatingEl) {
                hasLanded = true;
                if (!isLeave) {
                    return;
                }
            }
            if (isOverReferenceEl) {
                hasLanded = false;
            }
            if (isOverReferenceEl && !isLeave) {
                hasLanded = true;
                return;
            }
            // Prevent overlapping floating element from being stuck in an open-close
            // loop: https://github.com/floating-ui/floating-ui/issues/1910
            if (isLeave && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isElement"](event.relatedTarget) && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$utils$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["contains"](elements.floating, event.relatedTarget)) {
                return;
            }
            // If any nested child is open, abort.
            if (tree && getChildren(tree.nodesRef.current, nodeId).some((_ref2)=>{
                let { context } = _ref2;
                return context == null ? void 0 : context.open;
            })) {
                return;
            }
            // If the pointer is leaving from the opposite side, the "buffer" logic
            // creates a point where the floating element remains open, but should be
            // ignored.
            // A constant of 1 handles floating point rounding errors.
            if (side === 'top' && y >= refRect.bottom - 1 || side === 'bottom' && y <= refRect.top + 1 || side === 'left' && x >= refRect.right - 1 || side === 'right' && x <= refRect.left + 1) {
                return close();
            }
            // Ignore when the cursor is within the rectangular trough between the
            // two elements. Since the triangle is created from the cursor point,
            // which can start beyond the ref element's edge, traversing back and
            // forth from the ref to the floating element can cause it to close. This
            // ensures it always remains open in that case.
            let rectPoly = [];
            switch(side){
                case 'top':
                    rectPoly = [
                        [
                            left,
                            refRect.top + 1
                        ],
                        [
                            left,
                            rect.bottom - 1
                        ],
                        [
                            right,
                            rect.bottom - 1
                        ],
                        [
                            right,
                            refRect.top + 1
                        ]
                    ];
                    break;
                case 'bottom':
                    rectPoly = [
                        [
                            left,
                            rect.top + 1
                        ],
                        [
                            left,
                            refRect.bottom - 1
                        ],
                        [
                            right,
                            refRect.bottom - 1
                        ],
                        [
                            right,
                            rect.top + 1
                        ]
                    ];
                    break;
                case 'left':
                    rectPoly = [
                        [
                            rect.right - 1,
                            bottom
                        ],
                        [
                            rect.right - 1,
                            top
                        ],
                        [
                            refRect.left + 1,
                            top
                        ],
                        [
                            refRect.left + 1,
                            bottom
                        ]
                    ];
                    break;
                case 'right':
                    rectPoly = [
                        [
                            refRect.right - 1,
                            bottom
                        ],
                        [
                            refRect.right - 1,
                            top
                        ],
                        [
                            rect.left + 1,
                            top
                        ],
                        [
                            rect.left + 1,
                            bottom
                        ]
                    ];
                    break;
            }
            function getPolygon(_ref3) {
                let [x, y] = _ref3;
                switch(side){
                    case 'top':
                        {
                            const cursorPointOne = [
                                isFloatingWider ? x + buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4,
                                y + buffer + 1
                            ];
                            const cursorPointTwo = [
                                isFloatingWider ? x - buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4,
                                y + buffer + 1
                            ];
                            const commonPoints = [
                                [
                                    rect.left,
                                    cursorLeaveFromRight ? rect.bottom - buffer : isFloatingWider ? rect.bottom - buffer : rect.top
                                ],
                                [
                                    rect.right,
                                    cursorLeaveFromRight ? isFloatingWider ? rect.bottom - buffer : rect.top : rect.bottom - buffer
                                ]
                            ];
                            return [
                                cursorPointOne,
                                cursorPointTwo,
                                ...commonPoints
                            ];
                        }
                    case 'bottom':
                        {
                            const cursorPointOne = [
                                isFloatingWider ? x + buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4,
                                y - buffer
                            ];
                            const cursorPointTwo = [
                                isFloatingWider ? x - buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4,
                                y - buffer
                            ];
                            const commonPoints = [
                                [
                                    rect.left,
                                    cursorLeaveFromRight ? rect.top + buffer : isFloatingWider ? rect.top + buffer : rect.bottom
                                ],
                                [
                                    rect.right,
                                    cursorLeaveFromRight ? isFloatingWider ? rect.top + buffer : rect.bottom : rect.top + buffer
                                ]
                            ];
                            return [
                                cursorPointOne,
                                cursorPointTwo,
                                ...commonPoints
                            ];
                        }
                    case 'left':
                        {
                            const cursorPointOne = [
                                x + buffer + 1,
                                isFloatingTaller ? y + buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4
                            ];
                            const cursorPointTwo = [
                                x + buffer + 1,
                                isFloatingTaller ? y - buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4
                            ];
                            const commonPoints = [
                                [
                                    cursorLeaveFromBottom ? rect.right - buffer : isFloatingTaller ? rect.right - buffer : rect.left,
                                    rect.top
                                ],
                                [
                                    cursorLeaveFromBottom ? isFloatingTaller ? rect.right - buffer : rect.left : rect.right - buffer,
                                    rect.bottom
                                ]
                            ];
                            return [
                                ...commonPoints,
                                cursorPointOne,
                                cursorPointTwo
                            ];
                        }
                    case 'right':
                        {
                            const cursorPointOne = [
                                x - buffer,
                                isFloatingTaller ? y + buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4
                            ];
                            const cursorPointTwo = [
                                x - buffer,
                                isFloatingTaller ? y - buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4
                            ];
                            const commonPoints = [
                                [
                                    cursorLeaveFromBottom ? rect.left + buffer : isFloatingTaller ? rect.left + buffer : rect.right,
                                    rect.top
                                ],
                                [
                                    cursorLeaveFromBottom ? isFloatingTaller ? rect.left + buffer : rect.right : rect.left + buffer,
                                    rect.bottom
                                ]
                            ];
                            return [
                                cursorPointOne,
                                cursorPointTwo,
                                ...commonPoints
                            ];
                        }
                }
            }
            if (isPointInPolygon([
                clientX,
                clientY
            ], rectPoly)) {
                return;
            }
            if (hasLanded && !isOverReferenceRect) {
                return close();
            }
            if (!isLeave && requireIntent) {
                const cursorSpeed = getCursorSpeed(event.clientX, event.clientY);
                const cursorSpeedThreshold = 0.1;
                if (cursorSpeed !== null && cursorSpeed < cursorSpeedThreshold) {
                    return close();
                }
            }
            if (!isPointInPolygon([
                clientX,
                clientY
            ], getPolygon([
                x,
                y
            ]))) {
                close();
            } else if (!hasLanded && requireIntent) {
                timeoutId = window.setTimeout(close, 40);
            }
        };
    };
    fn.__options = {
        blockPointerEvents
    };
    return fn;
}
;

})()),
"[project]/node_modules/@floating-ui/react/dist/floating-ui.react.esm.js [app-ssr] (ecmascript) {module evaluation}": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$future$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$dom$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__ = __turbopack_import__("[project]/node_modules/@floating-ui/react/dist/floating-ui.react.esm.js [app-ssr] (ecmascript) {locals}");
"__TURBOPACK__ecmascript__hoisting__location__";

})()),
"[project]/node_modules/@floating-ui/react/dist/floating-ui.react.esm.js [app-ssr] (ecmascript) {exports}": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "Composite": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["Composite"],
    "CompositeItem": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["CompositeItem"],
    "FloatingArrow": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["FloatingArrow"],
    "FloatingDelayGroup": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["FloatingDelayGroup"],
    "FloatingFocusManager": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["FloatingFocusManager"],
    "FloatingList": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["FloatingList"],
    "FloatingNode": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["FloatingNode"],
    "FloatingOverlay": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["FloatingOverlay"],
    "FloatingPortal": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["FloatingPortal"],
    "FloatingTree": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["FloatingTree"],
    "arrow": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2d$dom$2f$dist$2f$floating$2d$ui$2e$react$2d$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["arrow"],
    "autoPlacement": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$dom$2f$dist$2f$floating$2d$ui$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["autoPlacement"],
    "autoUpdate": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$dom$2f$dist$2f$floating$2d$ui$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["autoUpdate"],
    "computePosition": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$dom$2f$dist$2f$floating$2d$ui$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["computePosition"],
    "detectOverflow": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$core$2f$dist$2f$floating$2d$ui$2e$core$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["detectOverflow"],
    "flip": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$dom$2f$dist$2f$floating$2d$ui$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["flip"],
    "getOverflowAncestors": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getOverflowAncestors"],
    "hide": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$dom$2f$dist$2f$floating$2d$ui$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["hide"],
    "inline": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$dom$2f$dist$2f$floating$2d$ui$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["inline"],
    "inner": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["inner"],
    "limitShift": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$dom$2f$dist$2f$floating$2d$ui$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["limitShift"],
    "offset": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$core$2f$dist$2f$floating$2d$ui$2e$core$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["offset"],
    "platform": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$dom$2f$dist$2f$floating$2d$ui$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["platform"],
    "safePolygon": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["safePolygon"],
    "shift": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$dom$2f$dist$2f$floating$2d$ui$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["shift"],
    "size": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$dom$2f$dist$2f$floating$2d$ui$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["size"],
    "useClick": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useClick"],
    "useClientPoint": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useClientPoint"],
    "useDelayGroup": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useDelayGroup"],
    "useDelayGroupContext": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useDelayGroupContext"],
    "useDismiss": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useDismiss"],
    "useFloating": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useFloating"],
    "useFloatingNodeId": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useFloatingNodeId"],
    "useFloatingParentNodeId": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useFloatingParentNodeId"],
    "useFloatingPortalNode": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useFloatingPortalNode"],
    "useFloatingTree": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useFloatingTree"],
    "useFocus": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useFocus"],
    "useHover": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useHover"],
    "useId": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useId"],
    "useInnerOffset": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useInnerOffset"],
    "useInteractions": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useInteractions"],
    "useListItem": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useListItem"],
    "useListNavigation": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useListNavigation"],
    "useMergeRefs": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useMergeRefs"],
    "useRole": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useRole"],
    "useTransitionStatus": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useTransitionStatus"],
    "useTransitionStyles": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useTransitionStyles"],
    "useTypeahead": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__["useTypeahead"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2d$dom$2f$dist$2f$floating$2d$ui$2e$react$2d$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__ = __turbopack_import__("[project]/node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs [app-ssr] (ecmascript) {locals}");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$dom$2f$dist$2f$floating$2d$ui$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__ = __turbopack_import__("[project]/node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs [app-ssr] (ecmascript) {locals}");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$core$2f$dist$2f$floating$2d$ui$2e$core$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__ = __turbopack_import__("[project]/node_modules/@floating-ui/core/dist/floating-ui.core.mjs [app-ssr] (ecmascript) {locals}");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$utils$2f$dist$2f$floating$2d$ui$2e$utils$2e$dom$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$locals$7d$__ = __turbopack_import__("[project]/node_modules/@floating-ui/react/dist/floating-ui.react.esm.js [app-ssr] (ecmascript) {locals}");
"__TURBOPACK__ecmascript__hoisting__location__";

})()),
"[project]/node_modules/@floating-ui/react/dist/floating-ui.react.esm.js [app-ssr] (ecmascript) {facade}": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, p: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__ }) => (() => {
"use strict";

__turbopack_esm__({
    "Composite": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["Composite"],
    "CompositeItem": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["CompositeItem"],
    "FloatingArrow": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["FloatingArrow"],
    "FloatingDelayGroup": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["FloatingDelayGroup"],
    "FloatingFocusManager": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["FloatingFocusManager"],
    "FloatingList": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["FloatingList"],
    "FloatingNode": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["FloatingNode"],
    "FloatingOverlay": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["FloatingOverlay"],
    "FloatingPortal": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["FloatingPortal"],
    "FloatingTree": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["FloatingTree"],
    "arrow": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["arrow"],
    "autoPlacement": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["autoPlacement"],
    "autoUpdate": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["autoUpdate"],
    "computePosition": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["computePosition"],
    "detectOverflow": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["detectOverflow"],
    "flip": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["flip"],
    "getOverflowAncestors": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["getOverflowAncestors"],
    "hide": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["hide"],
    "inline": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["inline"],
    "inner": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["inner"],
    "limitShift": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["limitShift"],
    "offset": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["offset"],
    "platform": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["platform"],
    "safePolygon": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["safePolygon"],
    "shift": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["shift"],
    "size": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["size"],
    "useClick": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["useClick"],
    "useClientPoint": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["useClientPoint"],
    "useDelayGroup": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["useDelayGroup"],
    "useDelayGroupContext": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["useDelayGroupContext"],
    "useDismiss": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["useDismiss"],
    "useFloating": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["useFloating"],
    "useFloatingNodeId": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["useFloatingNodeId"],
    "useFloatingParentNodeId": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["useFloatingParentNodeId"],
    "useFloatingPortalNode": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["useFloatingPortalNode"],
    "useFloatingTree": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["useFloatingTree"],
    "useFocus": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["useFocus"],
    "useHover": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["useHover"],
    "useId": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["useId"],
    "useInnerOffset": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["useInnerOffset"],
    "useInteractions": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["useInteractions"],
    "useListItem": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["useListItem"],
    "useListNavigation": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["useListNavigation"],
    "useMergeRefs": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["useMergeRefs"],
    "useRole": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["useRole"],
    "useTransitionStatus": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["useTransitionStatus"],
    "useTransitionStyles": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["useTransitionStyles"],
    "useTypeahead": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__["useTypeahead"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$module__evaluation$7d$__ = __turbopack_import__("[project]/node_modules/@floating-ui/react/dist/floating-ui.react.esm.js [app-ssr] (ecmascript) {module evaluation}");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$floating$2d$ui$2f$react$2f$dist$2f$floating$2d$ui$2e$react$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$7b$exports$7d$__ = __turbopack_import__("[project]/node_modules/@floating-ui/react/dist/floating-ui.react.esm.js [app-ssr] (ecmascript) {exports}");
"__TURBOPACK__ecmascript__hoisting__location__";

})()),

};

//# sourceMappingURL=node_modules_99c9f3._.js.map